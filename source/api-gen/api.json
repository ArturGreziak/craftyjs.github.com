[
    {
        "file": "src/controls/controls.js",
        "startLine": 3,
        "endLine": 9,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Enable drag and drop of the entity. Listens to events from `MouseDrag` and moves entity accordingly.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "MouseDrag"
                ]
            }
        ],
        "name": "Draggable",
        "categories": [
            "Controls"
        ]
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 28,
        "endLine": 36,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .enableDrag(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Reenable dragging of entity. Use if `.disableDrag` has been called.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".disableDrag"
                ]
            }
        ],
        "name": ".enableDrag",
        "comp": "Draggable"
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 42,
        "endLine": 50,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .disableDrag(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Disables entity dragging. Reenable with `.enableDrag()`.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".enableDrag"
                ]
            }
        ],
        "name": ".disableDrag",
        "comp": "Draggable"
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 56,
        "endLine": 84,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Method used for modifying the drag direction.\nIf direction is set, the entity being dragged will only move along the specified direction.\nIf direction is not set, the entity being dragged will move along any direction.\n"
            },
            {
                "type": "method",
                "signature": "public this .dragDirection()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Remove any previously specified direction.\n"
            },
            {
                "type": "method",
                "signature": "public this .dragDirection(vector)",
                "contents": [
                    {
                        "type": "param",
                        "name": "vector",
                        "description": "Of the form of {x: valx, y: valy}, the vector (valx, valy) denotes the move direction."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .dragDirection(degree)",
                "contents": [
                    {
                        "type": "param",
                        "name": "degree",
                        "description": "A number, the degree (clockwise) of the move direction with respect to the x axis."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Specify the dragging direction.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.dragDirection()\nthis.dragDirection({x:1, y:0}) //Horizontal\nthis.dragDirection({x:0, y:1}) //Vertical\n// Note: because of the orientation of x and y axis,\n// this is 45 degree clockwise with respect to the x axis.\nthis.dragDirection({x:1, y:1}) //45 degree.\nthis.dragDirection(60) //60 degree.\n```"
                    }
                ]
            }
        ],
        "name": ".dragDirection",
        "comp": "Draggable"
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 128,
        "endLine": 137,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewDirection",
                        "description": "When entity has changed direction due to velocity on either x or y axis a NewDirection event is triggered. The event is triggered once, if direction is different from last frame.",
                        "objName": "New direction",
                        "objProp": "{ x: -1 | 0 | 1, y: -1 | 0 | 1 }"
                    },
                    {
                        "type": "trigger",
                        "event": "Moved",
                        "description": "When entity has moved due to velocity/acceleration on either x or y axis a Moved event is triggered. If the entity has moved on both axes for diagonal movement the event is triggered twice.",
                        "objName": "Old position",
                        "objProp": "{ axis: 'x' | 'y', oldValue: Number }"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Used to bind keys to directions and have the entity move accordingly.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Motion",
                    "Keyboard"
                ]
            }
        ],
        "name": "Multiway",
        "categories": [
            "Controls"
        ]
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 184,
        "endLine": 206,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .multiway([Number speed,] Object keyBindings)",
                "contents": [
                    {
                        "type": "param",
                        "name": "speed",
                        "description": "A speed in pixels per second"
                    },
                    {
                        "type": "param",
                        "name": "keyBindings",
                        "description": "What keys should make the entity go in which direction. Direction is specified in degrees"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Constructor to initialize the speed and keyBindings. Component will listen to key events and move the entity appropriately.\nCan be called while a key is pressed to change direction & speed on the fly.\n\nMultiway acts by adding a velocity on key press and removing the same velocity when the respective key is released.\nThis works well in most cases, but can cause undesired behavior if you manipulate velocities by yourself while this component is in effect.\nIf you need to resolve collisions, it's advised to correct the position directly rather than to manipulate the velocity. If you still need to reset the velocity once a collision happens, make sure to re-add the previous velocity once the collision is resolved.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.multiway(150, {UP_ARROW: -90, DOWN_ARROW: 90, RIGHT_ARROW: 0, LEFT_ARROW: 180});\nthis.multiway({x:150,y:75}, {UP_ARROW: -90, DOWN_ARROW: 90, RIGHT_ARROW: 0, LEFT_ARROW: 180});\nthis.multiway({W: -90, S: 90, D: 0, A: 180});\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Motion",
                    "Keyboard"
                ]
            }
        ],
        "name": ".multiway",
        "comp": "Multiway"
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 235,
        "endLine": 249,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .speed(Object speed)",
                "contents": [
                    {
                        "type": "param",
                        "name": "speed",
                        "description": "New speed the entity has, for x and y axis."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Change the speed that the entity moves with, in units of pixels per second.\n\nCan be called while a key is pressed to change speed on the fly.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.speed({ x: 150, y: 50 });\n```"
                    }
                ]
            }
        ],
        "name": ".speed",
        "comp": "Multiway"
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 312,
        "endLine": 323,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .enableControl()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Enable the component to listen to key events.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.enableControl();\n```"
                    }
                ]
            }
        ],
        "name": ".enableControl",
        "comp": "Multiway"
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 333,
        "endLine": 344,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .disableControl()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Disable the component to listen to key events.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.disableControl();\n```"
                    }
                ]
            }
        ],
        "name": ".disableControl",
        "comp": "Multiway"
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 356,
        "endLine": 366,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewDirection",
                        "description": "When entity has changed direction due to velocity on either x or y axis a NewDirection event is triggered. The event is triggered once, if direction is different from last frame.",
                        "objName": "New direction",
                        "objProp": "{ x: -1 | 0 | 1, y: -1 | 0 | 1 }"
                    },
                    {
                        "type": "trigger",
                        "event": "Moved",
                        "description": "When entity has moved due to velocity/acceleration on either x or y axis a Moved event is triggered. If the entity has moved on both axes for diagonal movement the event is triggered twice.",
                        "objName": "Old position",
                        "objProp": "{ axis: 'x' | 'y', oldValue: Number }"
                    },
                    {
                        "type": "trigger",
                        "event": "CheckJumping",
                        "description": "When entity is about to jump. This event is triggered with the object the entity is about to jump from (if it exists). Third parties can respond to this event and enable the entity to jump.",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Make an entity jump in response to key events.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Supportable",
                    "Motion",
                    "Keyboard",
                    "Gravity"
                ]
            }
        ],
        "name": "Jumper",
        "categories": [
            "Controls"
        ]
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 370,
        "endLine": 392,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The canJump function determines if the entity is allowed to jump or not (e.g. perhaps the entity should be able to double jump).\nThe Jumper component will trigger a \"CheckJumping\" event.\nInterested parties can listen to this event and enable the entity to jump by setting `canJump` to true.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar player = Crafty.e(\"2D, Jumper\");\nplayer.hasDoubleJumpPowerUp = true; // allow player to double jump by granting him a powerup\nplayer.bind(\"CheckJumping\", function(ground) {\n    if (!ground && player.hasDoubleJumpPowerUp) { // allow player to double jump by using up his double jump powerup\n        player.canJump = true;\n        player.hasDoubleJumpPowerUp = false;\n    }\n});\nplayer.bind(\"LandedOnGround\", function(ground) {\n    player.hasDoubleJumpPowerUp = true; // give player new double jump powerup upon landing\n});\n```"
                    }
                ]
            }
        ],
        "name": ".canJump",
        "comp": "Jumper"
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 395,
        "endLine": 406,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .enableControl()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Enable the component to listen to key events.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.enableControl();\n```"
                    }
                ]
            }
        ],
        "name": ".enableControl",
        "comp": "Jumper"
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 408,
        "endLine": 419,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .disableControl()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Disable the component to listen to key events.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.disableControl();\n```"
                    }
                ]
            }
        ],
        "name": ".disableControl",
        "comp": "Jumper"
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 445,
        "endLine": 463,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .jumper([Number jumpSpeed,] Array jumpKeys)",
                "contents": [
                    {
                        "type": "param",
                        "name": "jumpSpeed",
                        "description": "Vertical jump speed in pixels per second"
                    },
                    {
                        "type": "param",
                        "name": "jumpKeys",
                        "description": "Keys to listen for and make entity jump in response"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Constructor to initialize the power of jump and keys to listen to. Component will\nlisten for key events and move the entity appropriately. Used with the\n`gravity` component will simulate jumping.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.jumper(300, ['UP_ARROW', 'W']);\nthis.jumper(['UP_ARROW', 'W']);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Supportable",
                    "Motion",
                    "Keyboard",
                    "Gravity"
                ]
            }
        ],
        "name": ".jumper",
        "comp": "Jumper"
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 483,
        "endLine": 495,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .jumpSpeed(Number jumpSpeed)",
                "contents": [
                    {
                        "type": "param",
                        "name": "jumpSpeed",
                        "description": "new vertical jump speed"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Change the vertical jump speed.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.jumpSpeed(300);\n```"
                    }
                ]
            }
        ],
        "name": ".jumpSpeed",
        "comp": "Jumper"
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 502,
        "endLine": 512,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewDirection",
                        "description": "When entity has changed direction due to velocity on either x or y axis a NewDirection event is triggered. The event is triggered once, if direction is different from last frame.",
                        "objName": "New direction",
                        "objProp": "{ x: -1 | 0 | 1, y: -1 | 0 | 1 }"
                    },
                    {
                        "type": "trigger",
                        "event": "Moved",
                        "description": "When entity has moved due to velocity/acceleration on either x or y axis a Moved event is triggered. If the entity has moved on both axes for diagonal movement the event is triggered twice.",
                        "objName": "Old position",
                        "objProp": "{ axis: 'x' | 'y', oldValue: Number }"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Move an entity in four directions by using the\narrow keys or `W`, `A`, `S`, `D`.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Multiway"
                ]
            }
        ],
        "name": "Fourway",
        "categories": [
            "Controls"
        ]
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 519,
        "endLine": 531,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .fourway([Number speed])",
                "contents": [
                    {
                        "type": "param",
                        "name": "speed",
                        "description": "The speed of motion in pixels per second."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Constructor to initialize the speed. Component will listen for key events and move the entity appropriately.\nThis includes `Up Arrow`, `Right Arrow`, `Down Arrow`, `Left Arrow` as well as `W`, `A`, `S`, `D`.\n\nThe key presses will move the entity in that direction by the speed passed in the argument.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Multiway"
                ]
            }
        ],
        "name": ".fourway",
        "comp": "Fourway"
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 550,
        "endLine": 560,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewDirection",
                        "description": "When entity has changed direction due to velocity on either x or y axis a NewDirection event is triggered. The event is triggered once, if direction is different from last frame.",
                        "objName": "New direction",
                        "objProp": "{ x: -1 | 0 | 1, y: -1 | 0 | 1 }"
                    },
                    {
                        "type": "trigger",
                        "event": "Moved",
                        "description": "When entity has moved due to velocity/acceleration on either x or y axis a Moved event is triggered. If the entity has moved on both axes for diagonal movement the event is triggered twice.",
                        "objName": "Old position",
                        "objProp": "{ axis: 'x' | 'y', oldValue: Number }"
                    },
                    {
                        "type": "trigger",
                        "event": "CheckJumping",
                        "description": "When entity is about to jump. This event is triggered with the object the entity is about to jump from (if it exists). Third parties can respond to this event and enable the entity to jump.",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Move an entity left or right using the arrow keys or `D` and `A` and jump using up arrow or `W`.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Multiway",
                    "Jumper"
                ]
            }
        ],
        "name": "Twoway",
        "categories": [
            "Controls"
        ]
    },
    {
        "file": "src/controls/controls.js",
        "startLine": 567,
        "endLine": 583,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .twoway([Number speed[, Number jumpSpeed]])",
                "contents": [
                    {
                        "type": "param",
                        "name": "speed",
                        "description": "A speed in pixels per second"
                    },
                    {
                        "type": "param",
                        "name": "jumpSpeed",
                        "description": "Vertical jump speed in pixels per second"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Constructor to initialize the speed and power of jump. Component will\nlisten for key events and move the entity appropriately. This includes\n`Up Arrow`, `Right Arrow`, `Left Arrow` as well as `W`, `A`, `D`. Used with the\n`gravity` component to simulate jumping.\n\nThe key presses will move the entity in that direction by the speed passed in\nthe argument. Pressing the `Up Arrow` or `W` will cause the entity to jump.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Multiway",
                    "Jumper"
                ]
            }
        ],
        "name": ".twoway",
        "comp": "Twoway"
    },
    {
        "file": "src/controls/device.js",
        "startLine": 5,
        "endLine": 10,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Methods relating to devices such as tablets or phones"
            }
        ],
        "name": "Crafty.device",
        "categories": [
            "Misc"
        ]
    },
    {
        "file": "src/controls/device.js",
        "startLine": 83,
        "endLine": 108,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.device.deviceOrientation(Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Callback method executed once as soon as device orientation is change"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Do something with normalized device orientation data:\n```\n{\n  tiltLR    :   'gamma -- the angle in degrees the device is tilted left-to-right.',\n  tiltFB    :   'beta -- the angle in degrees the device is tilted front-to-back',\n  dir       :   'alpha -- the direction the device is facing according to the compass',\n  motUD     :   'The angle's values increase as you tilt the device to the right or towards you.'\n}\n```\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// Get DeviceOrientation event normalized data.\nCrafty.device.deviceOrientation(function(data){\n    Crafty.log('data.tiltLR : '+Math.round(data.tiltLR)+', data.tiltFB : '+Math.round(data.tiltFB)+', data.dir : '+Math.round(data.dir)+', data.motUD : '+data.motUD+'');\n});\n```\n\nSee browser support at http://caniuse.com/#search=device orientation."
                    }
                ]
            }
        ],
        "name": "Crafty.device.deviceOrientation",
        "comp": "Crafty.device"
    },
    {
        "file": "src/controls/device.js",
        "startLine": 122,
        "endLine": 148,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.device.deviceMotion(Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Callback method executed once as soon as device motion is change"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Do something with normalized device motion data:\n```\n{\n    acceleration : 'Grab the acceleration including gravity from the results',\n    rawAcceleration : 'Display the raw acceleration data',\n    facingUp : 'Z is the acceleration in the Z axis, and if the device is facing up or down',\n    tiltLR : 'Convert the value from acceleration to degrees. acceleration.x is the acceleration according to gravity, we'll assume we're on Earth and divide by 9.81 (earth gravity) to get a percentage value, and then multiply that by 90 to convert to degrees.',\n    tiltFB : 'Convert the value from acceleration to degrees.'\n}\n```\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// Get DeviceMotion event normalized data.\nCrafty.device.deviceMotion(function(data){\n    Crafty.log('data.moAccel : '+data.rawAcceleration+', data.moCalcTiltLR : '+Math.round(data.tiltLR)+', data.moCalcTiltFB : '+Math.round(data.tiltFB)+'');\n});\n```\n\nSee browser support at http://caniuse.com/#search=motion."
                    }
                ]
            }
        ],
        "name": "Crafty.device.deviceMotion",
        "comp": "Crafty.device"
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 12,
        "endLine": 29,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Check which keys (referred by Unicode values) are currently down.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.c(\"Keyboard\", {\n  isDown: function (key) {\n    if (typeof key === \"string\") {\n      key = Crafty.keys[key];\n    }\n    return !!Crafty.keydown[key];\n  }\n});\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Keyboard",
                    "Crafty.keys"
                ]
            }
        ],
        "name": "Crafty.keydown",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 47,
        "endLine": 81,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .multitouch(Boolean bool)",
                "contents": [
                    {
                        "type": "param",
                        "name": "bool",
                        "description": "Turns multitouch on and off.  The initial state is off (false)."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Boolean .multitouch()",
                "contents": [
                    {
                        "type": "return",
                        "value": "Whether multitouch is currently enabled;"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Enables/disables support for multitouch feature.\n\nIf this is set to true, it is expected that your entities have the Touch component instead of Mouse component.\nIf false (default), then only entities with the Mouse component will respond to touch.\n\nIf no boolean is passed to the function call, it will just return whether multitouch is on or not.\n"
            },
            {
                "type": "note",
                "value": "The Touch component (and thus the multitouch feature) is currently incompatible with the Draggable component."
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.multitouch(true);\n\nvar myEntity1 = Crafty.e('2D, Canvas, Color, Touch')\n   .attr({x: 100, y: 100, w:200, h:200, z:1 })\n   .color('black')\n   .bind('TouchStart',function(e){ alert('big black box was touched', e); }),\n myEntity2 = Crafty.e('2D, Canvas, Color, Touch')\n   .attr({x: 40, y: 150, w:90, h:300, z:2 })\n   .color('green')\n   .bind('TouchStart',function(e){ alert('big GREEN box was touched', e); });\n\nCrafty.log(\"multitouch is \"+Crafty.multitouch());\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.touchDispatch"
                ]
            }
        ],
        "name": "Crafty.multitouch",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 100,
        "endLine": 131,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Internal method which dispatches mouse events received by Crafty (crafty.stage.elem).\nThe mouse events get dispatched to the closest entity to the source of the event (if available).\n\nYou can read more about the MouseEvent, which is the parameter passed to the callback.\nhttps://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n\nThis method also sets a global property Crafty.lastEvent, which holds the most recent event that\noccured (useful for determining mouse position in every frame).\n\n```"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar newestX = Crafty.lastEvent.realX,\n    newestY = Crafty.lastEvent.realY;\n```\n\nNotable properties of a MouseEvent e:\n```\n//(x,y) coordinates of mouse event in web browser screen space\ne.clientX, e.clientY\n//(x,y) coordinates of mouse event in world/viewport space\ne.realX, e.realY\n// Normalized mouse button according to Crafty.mouseButtons\ne.mouseButton\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.touchDispatch",
                    "Crafty.multitouch"
                ]
            }
        ],
        "name": "Crafty.mouseDispatch",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 202,
        "endLine": 227,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Internal method which dispatches touch events received by Crafty (crafty.stage.elem).\nThe touch events get dispatched to the closest entity to the source of the event (if available).\n\nBy default, touch events are treated as mouse events. To change this behaviour (and enable multitouch)\nyou must use Crafty.multitouch.\n\nIf using multitouch feature, this method sets the array Crafty.touchHandler.fingers, which holds data\nof the most recent touches that occured (useful for determining positions of fingers in every frame)\nas well as last entity touched by each finger. Data is lost as soon as the finger is raised.\n\nYou can read about the MouseEvent, which is the parameter passed to the Mouse entity's callback.\nhttps://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n\nYou can also read about the TouchEvent.\nhttps://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n\nAnd about the touch point interface, which is the parameter passed to the Touch entity's callback.\nhttp://www.w3.org/TR/touch-events/#dfn-active-touch-point\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.multitouch",
                    "Crafty.mouseDispatch"
                ]
            }
        ],
        "name": "Crafty.touchDispatch",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 395,
        "endLine": 422,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .findClosestEntityByComponent(String comp, Number x, Number y[, Object target])",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Finds closest entity with certain component at given coordinates."
                    },
                    {
                        "type": "param",
                        "name": "comp",
                        "description": "Component name"
                    },
                    {
                        "type": "param",
                        "name": "x",
                        "description": "`x` position where to look for entities"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "`y` position where to look for entities"
                    },
                    {
                        "type": "param",
                        "name": "target",
                        "description": "Target element wherein to look for entities"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This method is used internally by the .mouseDispatch and .touchDispatch methods, but can be used otherwise for\nCanvas entities.\n\nFinds the top most entity (with the highest z) with a given component at a given point (x, y).\nFor having a detection area specified for the enity, add the AreaMap component to the entity expected to be found.\n\nThe 'target' argument is only meant to be used by .mouseDispatch and touchDispatch; defaults to Crafty.stage.elem,\nthus using this function directly is only worth anything for canvas entities.\n\nReturns the found entity, or undefined if no entity was found.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar coords = { x: 455, y: 267 },\n    closestText = Crafty.findClosestEntityByComponent(\"Text\", coords.x, coords.y);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.findClosestEntityByComponent",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 477,
        "endLine": 501,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Mouse wheel event triggered by Crafty.\n"
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "MouseWheelScroll",
                        "description": "is triggered when mouse is scrolled on stage",
                        "objName": "Scroll direction (up | down)",
                        "objProp": "{ direction: +1 | -1}"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Internal method which dispatches mouse wheel events received by Crafty (crafty.stage.elem).\nThe mouse wheel events get dispatched to Crafty, as well as all entities.\n\nThe native event parameter is passed to the callback.\nYou can read more about the native `mousewheel` event (all browsers except Firefox) https://developer.mozilla.org/en-US/docs/Web/Events/mousewheel\nor the native `DOMMouseScroll` event (Firefox only) https://developer.mozilla.org/en-US/docs/Web/Events/DOMMouseScroll .\n\nNote that the wheel delta properties of the event vary in magnitude across browsers, thus it is recommended to check for `.direction` instead.\nThe `.direction` equals `+1` if wheel was scrolled up, `-1` if wheel was scrolled down.\nSee http://stackoverflow.com/questions/5527601/normalizing-mousewheel-speed-across-browsers .\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.bind(\"MouseWheelScroll\", function(evt) {\n    Crafty.viewport.scale(Crafty.viewport._scale * (1 + evt.direction * 0.1));\n});\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.mouseWheelDispatch",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 507,
        "endLine": 533,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Keyboard Event triggered by Crafty Core"
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "KeyDown",
                        "description": "is triggered for each entity when the DOM 'keydown' event is triggered.",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "KeyUp",
                        "description": "is triggered for each entity when the DOM 'keyup' event is triggered.",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Color\")\n  .attr({x: 100, y: 100, w: 50, h: 50})\n  .color(\"red\")\n  .bind('KeyDown', function(e) {\n    if(e.key == Crafty.keys.LEFT_ARROW) {\n      this.x = this.x-1;\n    } else if (e.key == Crafty.keys.RIGHT_ARROW) {\n      this.x = this.x+1;\n    } else if (e.key == Crafty.keys.UP_ARROW) {\n      this.y = this.y-1;\n    } else if (e.key == Crafty.keys.DOWN_ARROW) {\n      this.y = this.y+1;\n    }\n  });\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.keys"
                ]
            }
        ],
        "name": "KeyboardEvent",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 535,
        "endLine": 540,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Event Object used in Crafty for cross browser compatibility"
            }
        ],
        "name": "Crafty.eventObject",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 542,
        "endLine": 547,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Unicode of the key pressed"
            }
        ],
        "name": ".key",
        "comp": "Crafty.eventObject"
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 645,
        "endLine": 692,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Provides the entity with mouse related events\n"
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "MouseOver",
                        "description": "when the mouse enters",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "MouseOut",
                        "description": "when the mouse leaves",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "MouseDown",
                        "description": "when the mouse button is pressed on",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "MouseUp",
                        "description": "when the mouse button is released on",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "Click",
                        "description": "when the user clicks",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "DoubleClick",
                        "description": "when the user double clicks",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "MouseMove",
                        "description": "when the mouse is over and moves",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "If you do not add this component, mouse events will not be triggered on an entity.\n\nYou can read more about the MouseEvent, which is the parameter passed to the callback.\nhttps://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n\nCrafty will add the mouseButton property to MouseEvents that match one of\n\n- Crafty.mouseButtons.LEFT\n- Crafty.mouseButtons.RIGHT\n- Crafty.mouseButtons.MIDDLE\n"
            },
            {
                "type": "note",
                "value": "If you're targeting mobile, you should know that by default Crafty turns touch events into mouse events, making mouse dependent components work with touch. However, if you need multitouch, you'll have to make use of the Touch component instead, which can break compatibility with things which directly interact with the Mouse component."
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar myEntity = Crafty.e('2D, Canvas, Color, Mouse')\n.attr({x: 10, y: 10, w: 40, h: 40})\n.color('red')\n.bind('Click', function(MouseEvent){\n  alert('clicked', MouseEvent);\n});\n\nmyEntity.bind('MouseUp', function(e) {\n   if( e.mouseButton == Crafty.mouseButtons.RIGHT )\n       Crafty.log(\"Clicked right button\");\n})\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.mouseDispatch",
                    "Crafty.multitouch",
                    "Crafty.touchDispatch",
                    "Crafty.mouseButtons"
                ]
            }
        ],
        "name": "Mouse",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 703,
        "endLine": 740,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Provides the entity with touch related events"
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "TouchStart",
                        "description": "when entity is touched",
                        "objName": "Data",
                        "objProp": "TouchPoint"
                    },
                    {
                        "type": "trigger",
                        "event": "TouchMove",
                        "description": "when finger is moved over entity",
                        "objName": "Data",
                        "objProp": "TouchPoint"
                    },
                    {
                        "type": "trigger",
                        "event": "TouchCancel",
                        "description": "when a touch event has been disrupted in some way",
                        "objName": "Data",
                        "objProp": "TouchPoint"
                    },
                    {
                        "type": "trigger",
                        "event": "TouchEnd",
                        "description": "when the finger is raised over the entity, or when finger leaves entity.  (Passes no data)",
                        "objName": "Data",
                        "objProp": "null"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "To be able to use multitouch, you must enable it with  `Crafty.multitouch(true)`.\n\nIf you don't need multitouch, you can probably use the Mouse component instead, since by default Crafty will trigger mouse events for touch input.\n\nYou can read more about the TouchEvent.\n- [TouchEvent.touches and TouchEvent.changedTouches](https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent)\n- [TouchPoint](http://www.w3.org/TR/touch-events/#dfn-active-touch-point) is the parameter passed to the event callback in the related touch.\n\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.multitouch(true);\n\nvar myEntity = Crafty.e('2D, Canvas, Color, Touch')\n.attr({x: 10, y: 10, w: 40, h: 40})\n.color('green')\n.bind('TouchStart', function(TouchPoint){\n  Crafty.log('myEntity has been touched', TouchPoint);\n}).bind('TouchMove', function(TouchPoint) {\n  Crafty.log('Finger moved over myEntity at the { x: ' + TouchPoint.realX + ', y: ' + TouchPoint.realY + ' } coordinates.');\n}).bind('TouchEnd', function() {\n  Crafty.log('Touch over myEntity has finished.');\n});\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.multitouch",
                    "Crafty.touchDispatch",
                    "Crafty.mouseDispatch",
                    "Crafty.mouseButtons"
                ]
            }
        ],
        "name": "Touch",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 751,
        "endLine": 761,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Component used by Mouse and Touch.\nCan be added to other entities for use with the Crafty.findClosestEntityByComponent method.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.mouseDispatch",
                    "Crafty.touchDispatch",
                    "Crafty.mouseButtons",
                    "Crafty.polygon"
                ]
            }
        ],
        "name": "AreaMap",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 766,
        "endLine": 801,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewAreaMap",
                        "description": "when a new areaMap is assigned",
                        "objName": "Data",
                        "objProp": "Crafty.polygon"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .areaMap(Crafty.polygon polygon)",
                "contents": [
                    {
                        "type": "param",
                        "name": "polygon",
                        "description": "Instance of Crafty.polygon used to check if the mouse coordinates are inside this region"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .areaMap(Array coordinatePairs)",
                "contents": [
                    {
                        "type": "param",
                        "name": "coordinatePairs",
                        "description": "Array of `x`, `y` coordinate pairs to generate a polygon"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .areaMap(x1, y1,.., xN, yN)",
                "contents": [
                    {
                        "type": "param",
                        "name": "point#",
                        "description": "List of `x`, `y` coordinate pairs to generate a polygon"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Assign a polygon to the entity so that pointer (mouse or touch) events will only be triggered if\nthe coordinates are inside the given polygon.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Color, Mouse\")\n    .color(\"red\")\n    .attr({ w: 100, h: 100 })\n    .bind('MouseOver', function() {Crafty.log(\"over\")})\n    .areaMap(0, 0, 50, 0, 50, 50, 0, 50);\n\nCrafty.e(\"2D, Mouse\")\n    .areaMap([0, 0, 50, 0, 50, 50, 0, 50]);\n\nCrafty.e(\"2D, Mouse\").areaMap(\n    new Crafty.polygon([0, 0, 50, 0, 50, 50, 0, 50])\n);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.polygon"
                ]
            }
        ],
        "name": ".areaMap",
        "comp": "AreaMap"
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 822,
        "endLine": 829,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Provides the entity with touch or mouse functionality, depending on whether this is a pc\nor mobile device, and also on multitouch configuration.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.multitouch"
                ]
            }
        ],
        "name": "Button",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 837,
        "endLine": 846,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Provides the entity with drag and drop mouse events."
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Dragging",
                        "description": "is triggered each frame the entity is being dragged",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "StartDrag",
                        "description": "is triggered when dragging begins",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "StopDrag",
                        "description": "is triggered when dragging ends",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Mouse"
                ]
            }
        ],
        "name": "MouseDrag",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 879,
        "endLine": 887,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .startDrag(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Make the entity produce drag events, essentially making the entity follow the mouse positions.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".stopDrag"
                ]
            }
        ],
        "name": ".startDrag",
        "comp": "MouseDrag"
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 900,
        "endLine": 908,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .stopDrag(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Stop the entity from producing drag events, essentially reproducing the drop.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".startDrag"
                ]
            }
        ],
        "name": ".stopDrag",
        "comp": "MouseDrag"
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 922,
        "endLine": 936,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Give entities keyboard events (`Keydown` and `Keyup`).\n\nIn particular, changes to the key state are broadcasted by `KeyboardEvent`s; interested entities can bind to these events.\n\nThe current state (pressed/released) of a key can also be queried using the `.isDown` method.\n\nAll available key codes are described in `Crafty.keys`.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "KeyboardEvent",
                    "Crafty.keys"
                ]
            }
        ],
        "name": "Keyboard",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/inputs.js",
        "startLine": 938,
        "endLine": 954,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean isDown(String keyName)",
                "contents": [
                    {
                        "type": "param",
                        "name": "keyName",
                        "description": "Name of the key to check. See `Crafty.keys`."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Boolean isDown(Number keyCode)",
                "contents": [
                    {
                        "type": "param",
                        "name": "keyCode",
                        "description": "Key code in `Crafty.keys`."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Determine if a certain key is currently down.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nentity.requires('Keyboard').bind('KeyDown', function () { if (this.isDown('SPACE')) jump(); });\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.keys"
                ]
            }
        ],
        "name": ".isDown",
        "comp": "Keyboard"
    },
    {
        "file": "src/controls/keycodes.js",
        "startLine": 5,
        "endLine": 103,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Object of key names and the corresponding key code.\n\n```\nBACKSPACE: 8,\nTAB: 9,\nENTER: 13,\nPAUSE: 19,\nCAPS: 20,\nESC: 27,\nSPACE: 32,\nPAGE_UP: 33,\nPAGE_DOWN: 34,\nEND: 35,\nHOME: 36,\nLEFT_ARROW: 37,\nUP_ARROW: 38,\nRIGHT_ARROW: 39,\nDOWN_ARROW: 40,\nINSERT: 45,\nDELETE: 46,\n0: 48,\n1: 49,\n2: 50,\n3: 51,\n4: 52,\n5: 53,\n6: 54,\n7: 55,\n8: 56,\n9: 57,\nA: 65,\nB: 66,\nC: 67,\nD: 68,\nE: 69,\nF: 70,\nG: 71,\nH: 72,\nI: 73,\nJ: 74,\nK: 75,\nL: 76,\nM: 77,\nN: 78,\nO: 79,\nP: 80,\nQ: 81,\nR: 82,\nS: 83,\nT: 84,\nU: 85,\nV: 86,\nW: 87,\nX: 88,\nY: 89,\nZ: 90,\nNUMPAD_0: 96,\nNUMPAD_1: 97,\nNUMPAD_2: 98,\nNUMPAD_3: 99,\nNUMPAD_4: 100,\nNUMPAD_5: 101,\nNUMPAD_6: 102,\nNUMPAD_7: 103,\nNUMPAD_8: 104,\nNUMPAD_9: 105,\nMULTIPLY: 106,\nADD: 107,\nSUBSTRACT: 109,\nDECIMAL: 110,\nDIVIDE: 111,\nF1: 112,\nF2: 113,\nF3: 114,\nF4: 115,\nF5: 116,\nF6: 117,\nF7: 118,\nF8: 119,\nF9: 120,\nF10: 121,\nF11: 122,\nF12: 123,\nSHIFT: 16,\nCTRL: 17,\nALT: 18,\nPLUS: 187,\nCOMMA: 188,\nMINUS: 189,\nPERIOD: 190,\nPULT_UP: 29460,\nPULT_DOWN: 29461,\nPULT_LEFT: 4,\nPULT_RIGHT': 5\n```"
            }
        ],
        "name": "Crafty.keys",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls/keycodes.js",
        "startLine": 199,
        "endLine": 210,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "An object mapping mouseButton names to the corresponding button ID.\nIn all mouseEvents, we add the `e.mouseButton` property with a value normalized to match e.button of modern webkit browsers:\n\n```\nLEFT: 0,\nMIDDLE: 1,\nRIGHT: 2\n```"
            }
        ],
        "name": "Crafty.mouseButtons",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/core/animation.js",
        "startLine": 1,
        "endLine": 24,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "An object for tracking transitions.  Typically used indirectly through \"SpriteAnimation\", \"Tween\", or viewport animations.\n\nIf a method allows you to specify the type of easing, you can do so by providing a custom function or a string corresponding to the name of a built-in method.\n\nBuilt-in easing functions are \"linear\", \"smoothStep\", \"smootherStep\", \"easeInQuad\", \"easeOutQuad\", and \"easeInOutQuad\".\n\nA custom function will be passed a parameter `t` which will vary between 0 and 1, and should return the progress of the animation between 0 and 1."
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Here is how you might use easing functions with the \"Tween\" component.\n```~\nvar e = Crafty.e(\"2D, Tween\");\n// Use built-in easing functions\ne.tween({x:100}, 1000, \"smoothStep\");\ne.tween({y:100}, 1000, \"easeInQuad\");\n// Define a custom easing function: 2t^2 - t\ne.tween({w:0}, 1000, function(t){return 2*t*t - t;});\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Tween",
                    "SpriteAnimation"
                ]
            }
        ],
        "name": "Crafty.easing",
        "categories": [
            "Animation"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 3,
        "endLine": 51,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "`Crafty` is both an object, and a function for selecting entities.\nIts many methods and properties are discussed individually.\nBelow is the documentation for use as a selector.\n"
            },
            {
                "type": "method",
                "signature": "public EntitySelection Crafty( String selector)",
                "contents": [
                    {
                        "type": "param",
                        "name": "selector",
                        "description": "A string representing which entities to select"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Entity Crafty( Number selector )",
                "contents": [
                    {
                        "type": "param",
                        "name": "selector",
                        "description": "An entity's id"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Select a set of or single entities by components or an entity's ID.\n\nCrafty uses syntax similar to jQuery by having a selector engine to select entities by their components.\n\nIf there is more than one match, the return value is an Array-like object listing the ID numbers of each matching entity. If there is exactly one match, the entity itself is returned. If you're not sure how many matches to expect, check the number of matches via Crafty(...).length. Alternatively, use Crafty(...).each(...), which works in all cases.\n"
            },
            {
                "type": "note",
                "value": "You can treat an entity as if it was a selection of length 1 -- it implements all the same methods."
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n   Crafty(\"MyComponent\")\n   Crafty(\"Hello 2D Component\")\n   Crafty(\"Hello, 2D, Component\")\n```\n\nThe first selector will return all entities that have the component `MyComponent`. The second will return all entities that have `Hello` and `2D` and `Component` whereas the last will return all entities that have at least one of those components (or).\n\n```\n  Crafty(\"*\")\n```\nPassing `*` will select all entities.\n\n```\n  Crafty(1)\n```\nPassing an integer will select the entity with that `ID`.\n\nTo work directly with an array of entities, use the `get()` method on a selection.\nTo call a function in the context of each entity, use the `.each()` method.\n\nThe event related methods such as `bind` and `trigger` will work on selections of entities.\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty Core#.get",
                    "Crafty Core#.each"
                ]
            }
        ],
        "name": "Crafty",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 77,
        "endLine": 86,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewEntityName",
                        "description": "After setting new name for entity",
                        "objName": "entity name",
                        "objProp": "String"
                    },
                    {
                        "type": "trigger",
                        "event": "NewComponent",
                        "description": "when a new component is added to the entity",
                        "objName": "Component",
                        "objProp": "String"
                    },
                    {
                        "type": "trigger",
                        "event": "RemoveComponent",
                        "description": "when a component is removed from the entity",
                        "objName": "Component",
                        "objProp": "String"
                    },
                    {
                        "type": "trigger",
                        "event": "Remove",
                        "description": "when the entity is removed by calling .destroy()",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "A set of methods added to every single entity."
            }
        ],
        "name": "Crafty Core",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 190,
        "endLine": 200,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .setName(String name)",
                "contents": [
                    {
                        "type": "param",
                        "name": "name",
                        "description": "A human readable name for debugging purposes."
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.setName(\"Player\");\n```"
                    }
                ]
            }
        ],
        "name": ".setName",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 210,
        "endLine": 237,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .addComponent(String componentList)",
                "contents": [
                    {
                        "type": "param",
                        "name": "componentList",
                        "description": "A string of components to add separated by a comma `,`"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .addComponent(String Component1[, .., String ComponentN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "Component#",
                        "description": "Component ID to add."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Adds a component to the selected entities or entity.\n\nComponents are used to extend the functionality of entities.\nThis means it will copy properties and assign methods to\naugment the functionality of the entity.\n\nFor adding multiple components, you can either pass a string with\nall the component names (separated by commas), or pass each component name as\nan argument.\n\nIf the component has a function named `init` it will be called.\n\nIf the entity already has the component, the component is skipped (nothing happens).\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.addComponent(\"2D, Canvas\");\nthis.addComponent(\"2D\", \"Canvas\");\n```"
                    }
                ]
            }
        ],
        "name": ".addComponent",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 281,
        "endLine": 304,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .toggleComponent(String ComponentList)",
                "contents": [
                    {
                        "type": "param",
                        "name": "ComponentList",
                        "description": "A string of components to add or remove separated by a comma `,`"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .toggleComponent(String Component1[, .., String componentN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "Component#",
                        "description": "Component ID to add or remove."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Add or Remove Components from an entity.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar e = Crafty.e(\"2D,DOM,Test\");\ne.toggleComponent(\"Test,Test2\"); //Remove Test, add Test2\ne.toggleComponent(\"Test,Test2\"); //Add Test, remove Test2\n```\n\n```\nvar e = Crafty.e(\"2D,DOM,Test\");\ne.toggleComponent(\"Test\",\"Test2\"); //Remove Test, add Test2\ne.toggleComponent(\"Test\",\"Test2\"); //Add Test, remove Test2\ne.toggleComponent(\"Test\");         //Remove Test\n```"
                    }
                ]
            }
        ],
        "name": ".toggleComponent",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 342,
        "endLine": 358,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .requires(String componentList)",
                "contents": [
                    {
                        "type": "param",
                        "name": "componentList",
                        "description": "List of components that must be added"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Makes sure the entity has the components listed. If the entity does not\nhave the component, it will add it.\n\n(In the current version of Crafty, this function behaves exactly the same\nas `addComponent`. By convention, developers have used `requires` for\ncomponent dependencies -- i.e. to indicate specifically that one component\nwill only work properly if another component is present -- and used\n`addComponent` in all other situations.)\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".addComponent"
                ]
            }
        ],
        "name": ".requires",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 363,
        "endLine": 380,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .removeComponent(String Component[, soft])",
                "contents": [
                    {
                        "type": "param",
                        "name": "component",
                        "description": "Component to remove"
                    },
                    {
                        "type": "param",
                        "name": "soft",
                        "description": "Whether to soft remove it (defaults to `true`)"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Removes a component from an entity. A soft remove (the default) will only\nrefrain `.has()` from returning true. Hard will remove all\nassociated properties and methods.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar e = Crafty.e(\"2D,DOM,Test\");\ne.removeComponent(\"Test\");        //Soft remove Test component\ne.removeComponent(\"Test\", false); //Hard remove Test component\n```"
                    }
                ]
            }
        ],
        "name": ".removeComponent",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 405,
        "endLine": 420,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Number .getId(void)",
                "contents": [
                    {
                        "type": "return",
                        "value": "the ID of this entity."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "For better performance, simply use the this[0] property.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Finding out the `ID` of an entity can be done by returning the property `0`.\n```\n   var ent = Crafty.e(\"2D\");\n   ent[0]; //ID\n   ent.getId(); //also ID\n```"
                    }
                ]
            }
        ],
        "name": ".getId",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 425,
        "endLine": 436,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .has(String component)",
                "contents": [
                    {
                        "type": "param",
                        "name": "component",
                        "description": "The name of the component to check"
                    },
                    {
                        "type": "return",
                        "value": "`true` or `false` depending on if the entity has the given component."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "For better performance, simply use the `.__c` object\nwhich will be `true` if the entity has the component or\nwill not exist (or be `false`)."
            }
        ],
        "name": ".has",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 441,
        "endLine": 488,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Change",
                        "description": "when properties change",
                        "objName": "Data",
                        "objProp": "{key: value}"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .attr(String property, Any value[, Boolean silent[, Boolean recursive]])",
                "contents": [
                    {
                        "type": "param",
                        "name": "property",
                        "description": "Property of the entity to modify"
                    },
                    {
                        "type": "param",
                        "name": "value",
                        "description": "Value to set the property to"
                    },
                    {
                        "type": "param",
                        "name": "silent",
                        "description": "If you would like to supress events"
                    },
                    {
                        "type": "param",
                        "name": "recursive",
                        "description": "If you would like merge recursively"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Use this method to set any property of the entity.\n"
            },
            {
                "type": "method",
                "signature": "public this .attr(Object map[, Boolean silent[, Boolean recursive]])",
                "contents": [
                    {
                        "type": "param",
                        "name": "map",
                        "description": "Object where each key is the property to modify and the value as the property value"
                    },
                    {
                        "type": "param",
                        "name": "silent",
                        "description": "If you would like to supress events"
                    },
                    {
                        "type": "param",
                        "name": "recursive",
                        "description": "If you would like merge recursively"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Use this method to set multiple properties of the entity.\n\nSetter options:\n- `silent`: If you want to prevent it from firing events.\n- `recursive`: If you pass in an object you could overwrite sibling keys, this recursively merges instead of just merging it. This is `false` by default, unless you are using dot notation `name.first`.\n"
            },
            {
                "type": "method",
                "signature": "public Any .attr(String property)",
                "contents": [
                    {
                        "type": "param",
                        "name": "property",
                        "description": "Property of the entity to modify"
                    },
                    {
                        "type": "return",
                        "value": "Value - the value of the property"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Use this method to get any property of the entity. You can also retrieve the property using `this.property`.\n\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.attr({key: \"value\", prop: 5});\nthis.attr(\"key\"); // returns \"value\"\nthis.attr(\"prop\"); // returns 5\nthis.key; // \"value\"\nthis.prop; // 5\n\nthis.attr(\"key\", \"newvalue\");\nthis.attr(\"key\"); // returns \"newvalue\"\nthis.key; // \"newvalue\"\n\nthis.attr(\"parent.child\", \"newvalue\");\nthis.parent; // {child: \"newvalue\"};\nthis.attr('parent.child'); // \"newvalue\"\n```"
                    }
                ]
            }
        ],
        "name": ".attr",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 600,
        "endLine": 607,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .toArray(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "This method will simply return the found entities as an array of ids.  To get an array of the actual entities, use `get()`."
            },
            {
                "type": "xref",
                "xrefs": [
                    ".get"
                ]
            }
        ],
        "name": ".toArray",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 612,
        "endLine": 630,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .timeout(Function callback, Number delay)",
                "contents": [
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute after given amount of milliseconds"
                    },
                    {
                        "type": "param",
                        "name": "delay",
                        "description": "Amount of milliseconds to execute the method"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "The delay method will execute a function after a given amount of time in milliseconds.\n\nEssentially a wrapper for `setTimeout`.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Destroy itself after 100 milliseconds\n```\nthis.timeout(function() {\nthis.destroy();\n}, 100);\n```"
                    }
                ]
            }
        ],
        "name": ".timeout",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 641,
        "endLine": 675,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .bind(String eventName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to bind to"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute when the event is triggered"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Attach the current entity (or entities) to listen for an event.\n\nCallback will be invoked when an event with the event name passed\nis triggered. Depending on the event, some data may be passed\nvia an argument to the callback function.\n\nThe first argument is the event name (can be anything) whilst the\nsecond argument is the callback. If the event has data, the\ncallback should have an argument.\n\nEvents are arbitrary and provide communication between components.\nYou can trigger or bind an event even if it doesn't exist yet.\n\nUnlike DOM events, Crafty events are executed synchronously.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.attr(\"triggers\", 0); //set a trigger count\nthis.bind(\"myevent\", function() {\n    this.triggers++; //whenever myevent is triggered, increment\n});\nthis.bind(\"EnterFrame\", function() {\n    this.trigger(\"myevent\"); //trigger myevent on every frame\n});\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".trigger",
                    ".unbind"
                ]
            }
        ],
        "name": ".bind",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 692,
        "endLine": 703,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Number .uniqueBind(String eventName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to bind to"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute upon event triggered"
                    },
                    {
                        "type": "return",
                        "value": "ID of the current callback used to unbind"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Works like Crafty.bind, but prevents a callback from being bound multiple times.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".bind"
                ]
            }
        ],
        "name": ".uniqueBind",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 710,
        "endLine": 721,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Number one(String eventName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to bind to"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute upon event triggered"
                    },
                    {
                        "type": "return",
                        "value": "ID of the current callback used to unbind"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Works like Crafty.bind, but will be unbound once the event triggers.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".bind"
                ]
            }
        ],
        "name": ".one",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 732,
        "endLine": 745,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .unbind(String eventName[, Function callback])",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to unbind"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Function to unbind"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Removes binding with an event from current entity.\n\nPassing an event name will remove all events bound to\nthat event. Passing a reference to the callback will\nunbind only that callback."
            },
            {
                "type": "xref",
                "xrefs": [
                    ".bind",
                    ".trigger"
                ]
            }
        ],
        "name": ".unbind",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 758,
        "endLine": 774,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .trigger(String eventName[, Object data])",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Event to trigger"
                    },
                    {
                        "type": "param",
                        "name": "data",
                        "description": "Arbitrary data that will be passed into every callback as an argument"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Trigger an event with arbitrary data. Will invoke all callbacks with\nthe context (value of `this`) of the current entity object.\n\n*Note: This will only execute callbacks within the current entity, no other entity.*\n\nThe first argument is the event name to trigger and the optional\nsecond argument is the arbitrary event data. This can be absolutely anything.\n\nUnlike DOM events, Crafty events are exectued synchronously."
            }
        ],
        "name": ".trigger",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 791,
        "endLine": 812,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .each(Function method)",
                "contents": [
                    {
                        "type": "param",
                        "name": "method",
                        "description": "Method to call on each iteration"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Iterates over found entities, calling a function for every entity.\n\nThe function will be called for every entity and will pass the index\nin the iteration as an argument. The context (value of `this`) of the\nfunction will be the current entity in the iteration.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Destroy every second 2D entity\n```\nCrafty(\"2D\").each(function(i) {\n    if(i % 2 === 0) {\n        this.destroy();\n    }\n});\n```"
                    }
                ]
            }
        ],
        "name": ".each",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 824,
        "endLine": 850,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Array .get()",
                "contents": [
                    {
                        "type": "return",
                        "value": "An array of entities corresponding to the active selector"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Entity .get(Number index)",
                "contents": [
                    {
                        "type": "return",
                        "value": "an entity belonging to the current selection"
                    },
                    {
                        "type": "param",
                        "name": "index",
                        "description": "The index of the entity to return.  If negative, counts back from the end of the array."
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Get an array containing every \"2D\" entity\n```\nvar arr = Crafty(\"2D\").get()\n```\nGet the first entity matching the selector\n```\n// equivalent to Crafty(\"2D\").get()[0], but doesn't create a new array\nvar e = Crafty(\"2D\").get(0)\n```\nGet the last \"2D\" entity matching the selector\n```\nvar e = Crafty(\"2D\").get(-1)\n```\n"
                    }
                ]
            }
        ],
        "name": ".get",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 871,
        "endLine": 879,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Entity .clone(void)",
                "contents": [
                    {
                        "type": "return",
                        "value": "Cloned entity of the current entity"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Method will create another entity with the exact same\nproperties, components and methods as the current entity."
            }
        ],
        "name": ".clone",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 899,
        "endLine": 911,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .setter(String property, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "property",
                        "description": "Property to watch for modification"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute if the property is modified"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Will watch a property waiting for modification and will then invoke the\ngiven callback when attempting to modify.\n\nThis feature is deprecated; use .defineField() instead."
            },
            {
                "type": "xref",
                "xrefs": [
                    ".defineField"
                ]
            }
        ],
        "name": ".setter",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 916,
        "endLine": 942,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .defineField(String property, Function getCallback, Function setCallback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "property",
                        "description": "Property name to assign getter & setter to"
                    },
                    {
                        "type": "param",
                        "name": "getCallback",
                        "description": "Method to execute if the property is accessed"
                    },
                    {
                        "type": "param",
                        "name": "setCallback",
                        "description": "Method to execute if the property is mutated"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Assigns getters and setters to the property.\nA getter will watch a property waiting for access and will then invoke the\ngiven getCallback when attempting to retrieve.\nA setter will watch a property waiting for mutation and will then invoke the\ngiven setCallback when attempting to modify.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e(\"2D\");\nent.defineField(\"customData\", function() {\n   return this._customData;\n}, function(newValue) {\n   this._customData = newValue;\n});\n\nent.customData = \"2\" // set customData to 2\nCrafty.log(ent.customData) // prints 2\n```"
                    }
                ]
            }
        ],
        "name": ".defineField",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 948,
        "endLine": 953,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .destroy(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Will remove all event listeners and delete all properties as well as removing from the stage"
            }
        ],
        "name": ".destroy",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core/core.js",
        "startLine": 974,
        "endLine": 993,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.extend(Object obj)",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "An object whose fields will be copied onto Crafty.  This is a shallow copy."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Used to extend the Crafty namespace by passing in an object of properties and methods to add.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "``` *\nCrafty.extend({\n  isArray: function(arg){\n    return Object.prototype.toString.call(arg) === '[object Array]'\n  }\n});\n\nCrafty.isArray([4, 5, 6]);  // returns true\nCrafty.isArray('hi');       // returns false\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.extend",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1133,
        "endLine": 1153,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Load",
                        "description": "Just after the viewport is initialised. Before the EnterFrame loops is started",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this Crafty.init([Number width, Number height, String stage_elem])",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public this Crafty.init([Number width, Number height, HTMLElement stage_elem])",
                "contents": [
                    {
                        "type": "param",
                        "name": "Number width",
                        "description": "Width of the stage"
                    },
                    {
                        "type": "param",
                        "name": "Number height",
                        "description": "Height of the stage"
                    },
                    {
                        "type": "param",
                        "name": "String or HTMLElement stage_elem",
                        "description": "the element to use for the stage"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Sets the element to use as the stage, creating it if necessary.  By default a div with id 'cr-stage' is used, but if the 'stage_elem' argument is provided that will be used instead.  (see `Crafty.viewport.init`)\n\nStarts the `EnterFrame` interval. This will call the `EnterFrame` event for every frame.\n\nCan pass width and height values for the stage otherwise will default to window size.\n\nAll `Load` events will be executed.\n\nUses `requestAnimationFrame` to sync the drawing with the browser but will default to `setInterval` if the browser does not support it."
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.stop",
                    "Crafty.viewport"
                ]
            }
        ],
        "name": "Crafty.init",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1185,
        "endLine": 1197,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public String Crafty.getVersion()",
                "contents": [
                    {
                        "type": "return",
                        "value": "Current version of Crafty as a string"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Return current version of crafty\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.getVersion(); //'0.5.2'\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.getVersion",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1202,
        "endLine": 1213,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "CraftyStop",
                        "description": "when the game is stopped",
                        "objName": "Data",
                        "objProp": "{bool clearState}"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this Crafty.stop([bool clearState])",
                "contents": [
                    {
                        "type": "param",
                        "name": "clearState",
                        "description": "if true the stage and all game state is cleared."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Stops the EnterFrame interval and removes the stage element.\n\nTo restart, use `Crafty.init()`."
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.init"
                ]
            }
        ],
        "name": "Crafty.stop",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1244,
        "endLine": 1263,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Pause",
                        "description": "when the game is paused",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "Unpause",
                        "description": "when the game is unpaused",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this Crafty.pause(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Pauses the game by stopping the EnterFrame event from firing. If the game is already paused it is unpaused.\nYou can pass a boolean parameter if you want to pause or unpause no matter what the current state is.\nModern browsers pauses the game when the page is not visible to the user. If you want the Pause event\nto be triggered when that happens you can enable autoPause in `Crafty.settings`.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Have an entity pause the game when it is clicked.\n```\nbutton.bind(\"click\", function() {\n    Crafty.pause();\n});\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.pause",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1282,
        "endLine": 1292,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean Crafty.isPaused()",
                "contents": [
                    {
                        "type": "return",
                        "value": "Whether the game is currently paused."
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.isPaused();\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.isPaused",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1297,
        "endLine": 1301,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Handles game ticks"
            }
        ],
        "name": "Crafty.timer",
        "categories": [
            "Game Loop"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1379,
        "endLine": 1391,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.timer.steptype(mode [, maxTimeStep])",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Can be called to set the type of timestep the game loop uses"
                    },
                    {
                        "type": "param",
                        "name": "mode",
                        "description": "the type of time loop.  Allowed values are \"fixed\", \"semifixed\", and \"variable\".  Crafty defaults to \"fixed\"."
                    },
                    {
                        "type": "param",
                        "name": "maxTimeStep",
                        "description": "For \"fixed\", sets the max number of frames per step.   For \"variable\" and \"semifixed\", sets the maximum time step allowed."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "* In \"fixed\" mode, each frame is sent the same value of `dt`, and to achieve the target game speed, mulitiple frame events are triggered before each render.\n* In \"variable\" mode, there is only one frame triggered per render.  This recieves a value of `dt` equal to the actual elapsed time since the last frame.\n* In \"semifixed\" mode, multiple frames per render are processed, and the total time since the last frame is divided evenly between them.\n"
            }
        ],
        "name": "Crafty.timer.steptype",
        "comp": "Crafty.timer"
    },
    {
        "file": "src/core/core.js",
        "startLine": 1410,
        "endLine": 1427,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.timer.step()",
                "contents": []
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "EnterFrame",
                        "description": "Triggered on each frame.  Passes the frame number, and the amount of time since the last frame.  If the time is greater than maxTimestep, that will be used instead.  (The default value of maxTimestep is 50 ms.)",
                        "objName": "Data",
                        "objProp": "{ frame: Number, dt:Number }"
                    },
                    {
                        "type": "trigger",
                        "event": "ExitFrame",
                        "description": "Triggered after each frame.  Passes the frame number, and the amount of time since the last frame.  If the time is greater than maxTimestep, that will be used instead.  (The default value of maxTimestep is 50 ms.)",
                        "objName": "Data",
                        "objProp": "{ frame: Number, dt:Number }"
                    },
                    {
                        "type": "trigger",
                        "event": "PreRender",
                        "description": "Triggered every time immediately before a scene should be rendered",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "RenderScene",
                        "description": "Triggered every time a scene should be rendered",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "PostRender",
                        "description": "Triggered every time immediately after a scene should be rendered",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "MeasureWaitTime",
                        "description": "Triggered at the beginning of each step after the first.  Passes the time the game loop waited between steps.",
                        "objName": "Data",
                        "objProp": "Number"
                    },
                    {
                        "type": "trigger",
                        "event": "MeasureFrameTime",
                        "description": "Triggered after each frame.  Passes the time it took to advance one frame.",
                        "objName": "Data",
                        "objProp": "Number"
                    },
                    {
                        "type": "trigger",
                        "event": "MeasureRenderTime",
                        "description": "Triggered after each render. Passes the time it took to render the scene",
                        "objName": "Data",
                        "objProp": "Number"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Advances the game by performing a step. A step consists of one/multiple frames followed by a render. The amount of frames depends on the timer's steptype.\nSpecifically it triggers `EnterFrame` & `ExitFrame` events for each frame and `PreRender`, `RenderScene` & `PostRender` events for each render.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.timer.steptype"
                ]
            }
        ],
        "name": "Crafty.timer.step",
        "comp": "Crafty.timer"
    },
    {
        "file": "src/core/core.js",
        "startLine": 1498,
        "endLine": 1509,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.timer.FPS()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Returns the target frames per second. This is not an actual frame rate."
            },
            {
                "type": "method",
                "signature": "public void Crafty.timer.FPS(Number value)",
                "contents": [
                    {
                        "type": "param",
                        "name": "value",
                        "description": "the target rate"
                    }
                ]
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "FPSChange",
                        "description": "Triggered when the target FPS is changed by user",
                        "objName": "new target FPS",
                        "objProp": "Number"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Sets the target frames per second. This is not an actual frame rate.\nThe default rate is 50."
            }
        ],
        "name": "Crafty.timer.FPS",
        "comp": "Crafty.timer"
    },
    {
        "file": "src/core/core.js",
        "startLine": 1520,
        "endLine": 1527,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.timer.simulateFrames(Number frames[, Number timestep])",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Advances the game state by a number of frames and draws the resulting stage at the end. Useful for tests and debugging."
                    },
                    {
                        "type": "param",
                        "name": "frames",
                        "description": "number of frames to simulate"
                    },
                    {
                        "type": "param",
                        "name": "timestep",
                        "description": "the duration to pass each frame.  Defaults to milliSecPerFrame (20 ms) if not specified."
                    }
                ]
            }
        ],
        "name": "Crafty.timer.simulateFrames",
        "comp": "Crafty.timer"
    },
    {
        "file": "src/core/core.js",
        "startLine": 1547,
        "endLine": 1568,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewEntity",
                        "description": "When the entity is created and all components are added",
                        "objName": "Data",
                        "objProp": "{ id:Number }"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Entity Crafty.e(String componentList)",
                "contents": [
                    {
                        "type": "param",
                        "name": "componentList",
                        "description": "List of components to assign to new entity"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Entity Crafty.e(String component1[, .., String componentN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "component#",
                        "description": "Component to add"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Creates an entity. Any arguments will be applied in the same\nway `.addComponent()` is applied as a quick way to add components.\n\nAny component added will augment the functionality of\nthe created entity by assigning the properties and methods from the component to the entity.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar myEntity = Crafty.e(\"2D, DOM, Color\");\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.c"
                ]
            }
        ],
        "name": "Crafty.e",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1587,
        "endLine": 1658,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.c(String name, Object component)",
                "contents": [
                    {
                        "type": "param",
                        "name": "name",
                        "description": "Name of the component"
                    },
                    {
                        "type": "param",
                        "name": "component",
                        "description": "Object with the component's properties and methods"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Creates a component where the first argument is the ID and the second\nis the object that will be inherited by entities.\n\nSpecifically, each time a component is added to an entity, the component properties are copied over to the entity.\n* In the case of primitive datatypes (booleans, numbers, strings) the property is copied by value.\n* In the case of complex datatypes (objects, arrays, functions) the property is copied by reference and will thus reference the components' original property.\n* (See the two examples below for further explanation)\nNote that when a component method gets called, the `this` keyword will refer to the current entity the component was added to.\n\nA handful of methods or properties are treated specially. They are invoked in partiular contexts, and (in those contexts) cannot be overridden by other components.\n\n- `required`: A string listing required components, which will be added to the component before `init()` runs.\n- `init`: A function to be called when the component is added to an entity\n- `remove`: A function which will be called just before a component is removed, or before an entity is destroyed. It is passed a single boolean parameter that is `true` if the entity is being destroyed.\n- `events`: An object whose properties represent functions bound to events equivalent to the property names.  (See the example below.)  The binding occurs directly after the call to `init`, and will be removed directly before `remove` is called.\n\nIn addition to these hardcoded special methods, there are some conventions for writing components.\n\n- Properties or methods that start with an underscore are considered private.\n- A method with the same name as the component is considered to be a constructor\nand is generally used when you need to pass configuration data to the component on a per entity basis.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.c(\"Annoying\", {\n    _message: \"HiHi\",\n    init: function() {\n        this.bind(\"EnterFrame\", function() { alert(this.message); });\n    },\n    annoying: function(message) { this.message = message; }\n});\n\nCrafty.e(\"Annoying\").annoying(\"I'm an orange...\");\n```\nTo attach to the \"EnterFrame\" event using the `events` property instead:\n```\nCrafty.c(\"Annoying\", {\n    _message: \"HiHi\",\n    events: {\n        \"EnterFrame\": function(){alert(this.message);}\n    }\n    annoying: function(message) { this.message = message; }\n});\n```\n\n"
                    }
                ]
            },
            {
                "type": "warning",
                "value": "In the examples above the field _message is local to the entity. That is, if you create many entities with the Annoying component, they can all have different values for _message. That is because it is a simple value, and simple values are copied by value. If however the field had been an object or array, the value would have been shared by all entities with the component, because complex types are copied by reference in javascript. This is probably not what you want and the following example demonstrates how to work around it."
            },
            {
                "type": "raw",
                "value": "```\nCrafty.c(\"MyComponent\", {\n    _iAmShared: { a: 3, b: 4 },\n    init: function() {\n        this._iAmNotShared = { a: 3, b: 4 };\n    },\n});\n```\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.e"
                ]
            }
        ],
        "name": "Crafty.c",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1663,
        "endLine": 1674,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.trigger(String eventName, * data)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to trigger"
                    },
                    {
                        "type": "param",
                        "name": "data",
                        "description": "Arbitrary data to pass into the callback as an argument"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This method will trigger every single callback attached to the event name. This means\nevery global event and every entity that has a callback.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.bind"
                ]
            }
        ],
        "name": "Crafty.trigger",
        "categories": [
            "Core",
            "Events"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1691,
        "endLine": 1703,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Function bind(String eventName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to bind to"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute upon event triggered"
                    },
                    {
                        "type": "return",
                        "value": "callback function which can be used for unbind"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Binds to a global event. Method will be executed when `Crafty.trigger` is used\nwith the event name.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.trigger",
                    "Crafty.unbind"
                ]
            }
        ],
        "name": "Crafty.bind",
        "categories": [
            "Core",
            "Events"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1712,
        "endLine": 1723,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Function uniqueBind(String eventName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to bind to"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute upon event triggered"
                    },
                    {
                        "type": "return",
                        "value": "callback function which can be used for unbind"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Works like Crafty.bind, but prevents a callback from being bound multiple times.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.bind"
                ]
            }
        ],
        "name": "Crafty.uniqueBind",
        "categories": [
            "Core",
            "Events"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1729,
        "endLine": 1740,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Function one(String eventName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to bind to"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute upon event triggered"
                    },
                    {
                        "type": "return",
                        "value": "callback function which can be used for unbind"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Works like Crafty.bind, but will be unbound once the event triggers.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.bind"
                ]
            }
        ],
        "name": "Crafty.one",
        "categories": [
            "Core",
            "Events"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1750,
        "endLine": 1775,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean Crafty.unbind(String eventName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to unbind"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Function to unbind"
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n   var play_gameover_sound = function () {...};\n   Crafty.bind('GameOver', play_gameover_sound);\n   ...\n   Crafty.unbind('GameOver', play_gameover_sound);\n```\n\nThe first line defines a callback function. The second line binds that\nfunction so that `Crafty.trigger('GameOver')` causes that function to\nrun. The third line unbinds that function.\n\n```\n   Crafty.unbind('GameOver');\n```\n\nThis unbinds ALL global callbacks for the event 'GameOver'. That\nincludes all callbacks attached by `Crafty.bind('GameOver', ...)`, but\nnone of the callbacks attached by `some_entity.bind('GameOver', ...)`."
                    }
                ]
            }
        ],
        "name": "Crafty.unbind",
        "categories": [
            "Core",
            "Events"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1781,
        "endLine": 1786,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.frame(void)",
                "contents": [
                    {
                        "type": "return",
                        "value": "the current frame number"
                    }
                ]
            }
        ],
        "name": "Crafty.frame",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1807,
        "endLine": 1811,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Modify the inner workings of Crafty through the settings."
            }
        ],
        "name": "Crafty.settings",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1817,
        "endLine": 1827,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.settings.register(String settingName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "settingName",
                        "description": "Name of the setting"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Function to execute when use modifies setting"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Use this to register custom settings. Callback will be executed when `Crafty.settings.modify` is used.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.settings.modify"
                ]
            }
        ],
        "name": "Crafty.settings.register",
        "comp": "Crafty.settings"
    },
    {
        "file": "src/core/core.js",
        "startLine": 1832,
        "endLine": 1842,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.settings.modify(String settingName, * value)",
                "contents": [
                    {
                        "type": "param",
                        "name": "settingName",
                        "description": "Name of the setting"
                    },
                    {
                        "type": "param",
                        "name": "value",
                        "description": "Value to set the setting to"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Modify settings through this method.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.settings.register",
                    "Crafty.settings.get"
                ]
            }
        ],
        "name": "Crafty.settings.modify",
        "comp": "Crafty.settings"
    },
    {
        "file": "src/core/core.js",
        "startLine": 1849,
        "endLine": 1859,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public * Crafty.settings.get(String settingName)",
                "contents": [
                    {
                        "type": "param",
                        "name": "settingName",
                        "description": "Name of the setting"
                    },
                    {
                        "type": "return",
                        "value": "Current value of the setting"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Returns the current value of the setting.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.settings.register",
                    "Crafty.settings.get"
                ]
            }
        ],
        "name": "Crafty.settings.get",
        "comp": "Crafty.settings"
    },
    {
        "file": "src/core/core.js",
        "startLine": 1866,
        "endLine": 1894,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.defineField(Object object, String property, Function getCallback, Function setCallback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "object",
                        "description": "Object to define property on"
                    },
                    {
                        "type": "param",
                        "name": "property",
                        "description": "Property name to assign getter & setter to"
                    },
                    {
                        "type": "param",
                        "name": "getCallback",
                        "description": "Method to execute if the property is accessed"
                    },
                    {
                        "type": "param",
                        "name": "setCallback",
                        "description": "Method to execute if the property is mutated"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Assigns getters and setters to the property in the given object.\nA getter will watch a property waiting for access and will then invoke the\ngiven getCallback when attempting to retrieve.\nA setter will watch a property waiting for mutation and will then invoke the\ngiven setCallback when attempting to modify.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e(\"2D\");\nCrafty.defineField(ent, \"customData\", function() {\n   return this._customData;\n}, function(newValue) {\n   this._customData = newValue;\n});\n\nent.customData = \"2\" // set customData to 2\nCrafty.log(ent.customData) // prints 2\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty Core#.defineField"
                ]
            }
        ],
        "name": "Crafty.defineField",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/core.js",
        "startLine": 1920,
        "endLine": 1957,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object .clone(Object obj)",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "an object"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Deep copy (a.k.a clone) of an object.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// Null or Primitive types\nCrafty.clone(null); // returns null\nCrafty.clone(4);    // returns 4\n\n// Objects\nvar globalCount = 0;\nvar obj1 = {\n  count: 0,\n  inc: function(){\n     this.count++;\n     globalCount++;\n  },\n  log: function(){\n    console.log(this.count + '/' + globalCount);\n  }\n};\n\nobj1.inc();\nobj1.log(); // prints \"1/1\" to the log\n\nvar obj2 = Crafty.clone(obj1);\nobj2.log(); // prints \"1/1\" to the log\n\nobj1.inc();\nobj1.log(); // prints \"2/2\" to the log\nobj2.log(); // prints \"1/2\" to the log\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.clone",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 4,
        "endLine": 8,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Determines feature support for what Crafty can do."
            }
        ],
        "name": "Crafty.support",
        "categories": [
            "Misc",
            "Core"
        ]
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 19,
        "endLine": 33,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Determines if Crafty is running on mobile device.\n\nIf Crafty.mobile is equal true Crafty does some things under hood:\n```\n- set viewport on max device width and height\n- set Crafty.stage.fullscreen on true\n- hide window scrollbars\n```\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.viewport"
                ]
            }
        ],
        "name": "Crafty.mobile",
        "comp": "Crafty.device"
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 36,
        "endLine": 40,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Is `Object.defineProperty` supported?"
            }
        ],
        "name": "Crafty.support.defineProperty",
        "comp": "Crafty.support"
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 51,
        "endLine": 55,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Is HTML5 `Audio` supported?"
            }
        ],
        "name": "Crafty.support.audio",
        "comp": "Crafty.support"
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 58,
        "endLine": 62,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Returns the browser specific prefix (`Moz`, `O`, `ms`, `webkit`, `node`)."
            }
        ],
        "name": "Crafty.support.prefix",
        "comp": "Crafty.support"
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 71,
        "endLine": 75,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Version of the browser"
            }
        ],
        "name": "Crafty.support.versionName",
        "comp": "Crafty.support"
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 78,
        "endLine": 82,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Version number of the browser as an Integer (first number)"
            }
        ],
        "name": "Crafty.support.version",
        "comp": "Crafty.support"
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 86,
        "endLine": 90,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Is the `canvas` element supported?"
            }
        ],
        "name": "Crafty.support.canvas",
        "comp": "Crafty.support"
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 93,
        "endLine": 97,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Is WebGL supported on the canvas element?"
            }
        ],
        "name": "Crafty.support.webgl",
        "comp": "Crafty.support"
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 111,
        "endLine": 115,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Is css3Dtransform supported by browser."
            }
        ],
        "name": "Crafty.support.css3dtransform",
        "comp": "Crafty.support"
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 118,
        "endLine": 122,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Is deviceorientation event supported by browser."
            }
        ],
        "name": "Crafty.support.deviceorientation",
        "comp": "Crafty.support"
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 125,
        "endLine": 129,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Is devicemotion event supported by browser."
            }
        ],
        "name": "Crafty.support.devicemotion",
        "comp": "Crafty.support"
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 137,
        "endLine": 170,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.addEvent(Object ctx, HTMLElement obj, String event, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "ctx",
                        "description": "Context of the callback or the value of `this`"
                    },
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "Element to add the DOM event to"
                    },
                    {
                        "type": "param",
                        "name": "event",
                        "description": "Event name to bind to"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute when triggered"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Adds DOM level 3 events to elements. The arguments it accepts are the call\ncontext (the value of `this`), the DOM element to attach the event to,\nthe event name (without `on` (`click` rather than `onclick`)) and\nfinally the callback method.\n\nIf no element is passed, the default element will be `window.document`.\n\nCallbacks are passed with event data.\n"
            },
            {
                "type": "note",
                "value": "This is related to DOM events only,  not Crafty's own event system. Of course, you can trigger Crafty events in the callback function!"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Normally you'd use Crafty's built-in mouse component, but for the sake of an example let's pretend that doesn't exist.\nThe following code will add a stage-wide MouseDown event listener to the player, and log both which button was pressed\nand the (x,y) coordinates in viewport/world/game space.\n```\nvar player = Crafty.e(\"2D\");\n    player.onMouseDown = function(e) {\n        Crafty.log(e.mouseButton, e.realX, e.realY);\n    };\nCrafty.addEvent(player, Crafty.stage.elem, \"mousedown\", player.onMouseDown);\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.removeEvent"
                ]
            }
        ],
        "name": "Crafty.addEvent",
        "categories": [
            "Events",
            "Misc"
        ]
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 194,
        "endLine": 208,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.removeEvent(Object ctx, HTMLElement obj, String event, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "ctx",
                        "description": "Context of the callback or the value of `this`"
                    },
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "Element the event is on"
                    },
                    {
                        "type": "param",
                        "name": "event",
                        "description": "Name of the event"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method executed when triggered"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Removes events attached by `Crafty.addEvent()`. All parameters must\nbe the same that were used to attach the event including a reference\nto the callback method.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.addEvent"
                ]
            }
        ],
        "name": "Crafty.removeEvent",
        "categories": [
            "Events",
            "Misc"
        ]
    },
    {
        "file": "src/core/extensions.js",
        "startLine": 226,
        "endLine": 242,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.background(String style)",
                "contents": [
                    {
                        "type": "param",
                        "name": "style",
                        "description": "Modify the background with a color or image"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This method is a shortcut for adding a background\nstyle to the stage element, i.e.\n`Crafty.stage.elem.style.background = ...`\n\nFor example, if you want the background to be white,\nwith an image in the center, you might use:\n```\nCrafty.background('#FFFFFF url(landscape.png) no-repeat center center');\n```\n"
            }
        ],
        "name": "Crafty.background",
        "categories": [
            "Graphics",
            "Stage"
        ]
    },
    {
        "file": "src/core/loader.js",
        "startLine": 4,
        "endLine": 17,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "An object containing every asset used in the current Crafty game.\nThe key is the URL and the value is the `Audio` or `Image` object.\n\nIf loading an asset, check that it is in this object first to avoid loading twice.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar isLoaded = !!Crafty.assets[\"images/sprite.png\"];\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.load"
                ]
            }
        ],
        "name": "Crafty.assets",
        "categories": [
            "Assets"
        ]
    },
    {
        "file": "src/core/loader.js",
        "startLine": 20,
        "endLine": 52,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.paths([Object paths])",
                "contents": [
                    {
                        "type": "param",
                        "name": "paths",
                        "description": "Object containing paths for audio and images folders"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Function to define custom folder for audio and images. You should use\nthis function to avoid typing the same paths again and again when\nloading assets with the Crafty.load() function.\n\nIf you do not give a object you get the current paths for both audio\nand images back.\n\nYou do not have to define paths.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Setting folders:\n```\nCrafty.paths({ audio: \"custom/audio/path/\", images: \"custom/images/path/\" });\n\nCrafty.load({\n  \"audio\": {\n    \"ray\": ['ray.mp3'] // This loads ray.mp3 from custom/audio/path/ray.mp3\n  }\n}, function() {\n  Crafty.log('loaded');\n});\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.load"
                ]
            }
        ],
        "name": "Crafty.paths",
        "categories": [
            "Assets"
        ]
    },
    {
        "file": "src/core/loader.js",
        "startLine": 64,
        "endLine": 87,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewAsset",
                        "description": "After setting new asset",
                        "objName": "key and value of new added asset.",
                        "objProp": "Object"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public void Crafty.asset(String key, Object asset)",
                "contents": [
                    {
                        "type": "param",
                        "name": "key",
                        "description": "asset url."
                    },
                    {
                        "type": "param",
                        "name": "asset",
                        "description": "`Audio` or `Image` object."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Add new asset to assets object.\n"
            },
            {
                "type": "method",
                "signature": "public void Crafty.asset(String key)",
                "contents": [
                    {
                        "type": "param",
                        "name": "key",
                        "description": "asset url."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Get asset from assets object.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.asset(key, value);\nvar asset = Crafty.asset(key); //object with key and value fields\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.assets"
                ]
            }
        ],
        "name": "Crafty.asset",
        "categories": [
            "Assets"
        ]
    },
    {
        "file": "src/core/loader.js",
        "startLine": 102,
        "endLine": 142,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A list of file extensions that can be loaded as images by Crafty.load\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// add tif extension to list of supported image files\nCrafty.image_whitelist.push(\"tif\");\n\nvar assets = {\n    \"sprites\": {\n        \"sprite.tif\": {   //set a tif sprite\n           \"tile\": 64,\n           \"tileh\": 32,\n           \"map\": { \"sprite_car\": [0, 0] }\n        }\n    },\n    \"audio\": {\n        \"jump\": \"jump.mp3\";\n    }\n};\n\nCrafty.load( assets, // preload the assets\n    function() {     //when loaded\n        Crafty.audio.play(\"jump\"); //Play the audio file\n        Crafty.e('2D, DOM, sprite_car'); // create entity with sprite\n    },\n\n    function(e) { //progress\n    },\n\n    function(e) { //uh oh, error loading\n    }\n);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.asset",
                    "Crafty.load"
                ]
            }
        ],
        "name": "Crafty.image_whitelist",
        "categories": [
            "Assets"
        ]
    },
    {
        "file": "src/core/loader.js",
        "startLine": 144,
        "endLine": 228,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.load(Object assets, Function onLoad[, Function onProgress[, Function onError]])",
                "contents": [
                    {
                        "type": "param",
                        "name": "assets",
                        "description": "Object JSON formatted (or JSON string), with assets to load (accepts sounds, images and sprites)"
                    },
                    {
                        "type": "param",
                        "name": "onLoad",
                        "description": "Callback when the assets are loaded"
                    },
                    {
                        "type": "param",
                        "name": "onProgress",
                        "description": "Callback when an asset is loaded. Contains information about assets loaded"
                    },
                    {
                        "type": "param",
                        "name": "onError",
                        "description": "Callback when an asset fails to load"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Preloader for all assets. Takes a JSON formatted object (or JSON string) of files and adds them to the\n`Crafty.assets` object, as well as setting sprites accordingly.\n\nFormat must follow the pattern shown in the example below, but it's not required to pass all \"audio\",\n\"images\" and \"sprites\" properties, only those you'll need. For example, if you don't need to preload\nsprites, you can omit that property.\n\nBy default, Crafty will assume all files are in the current path.  For changing these,\nuse the function `Crafty.paths`.\n\nFiles with suffixes in `image_whitelist` (case insensitive) will be loaded.\n\nIt's possible to pass the full file path(including protocol), instead of just the filename.ext, in case\nyou want some asset to be loaded from another domain.\n\nIf `Crafty.support.audio` is `true`, files with the following suffixes `mp3`, `wav`, `ogg` and\n`mp4` (case insensitive) can be loaded.\n\nThe `onProgress` function will be passed on object with information about\nthe progress including how many assets loaded, total of all the assets to\nload and a percentage of the progress.\n```\n{ loaded: j, total: total, percent: (j / total * 100), src:src }\n```\n\n`onError` will be passed with the asset that couldn't load.\n\nWhen `onError` is not provided, the onLoad is loaded even when some assets are not successfully loaded.\nOtherwise, onLoad will be called no matter whether there are errors or not.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar assetsObj = {\n    \"audio\": {\n        \"beep\": [\"beep.wav\", \"beep.mp3\", \"beep.ogg\"],\n        \"boop\": \"boop.wav\",\n        \"slash\": \"slash.wav\"\n    },\n    \"images\": [\"badguy.bmp\", \"goodguy.png\"],\n    \"sprites\": {\n        \"animals.png\": {\n            \"tile\": 50,\n            \"tileh\": 40,\n            \"map\": { \"ladybug\": [0,0], \"lazycat\": [0,1], \"ferociousdog\": [0,2] }\n            \"paddingX\": 5,\n            \"paddingY\": 5,\n            \"paddingAroundBorder\": 10\n        },\n        \"vehicles.png\": {\n            \"tile\": 150,\n            \"tileh\": 75,\n            \"map\": { \"car\": [0,0], \"truck\": [0,1] }\n        }\n    },\n};\n\nCrafty.load(assetsObj, // preload assets\n    function() { //when loaded\n        Crafty.scene(\"main\"); //go to main scene\n        Crafty.audio.play(\"boop\"); //Play the audio file\n        Crafty.e('2D, DOM, lazycat'); // create entity with sprite\n    },\n\n    function(e) { //progress\n    },\n\n    function(e) { //uh oh, error loading\n    }\n);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.paths",
                    "Crafty.assets",
                    "Crafty.image_whitelist",
                    "Crafty.removeAssets"
                ]
            }
        ],
        "name": "Crafty.load",
        "categories": [
            "Assets"
        ]
    },
    {
        "file": "src/core/loader.js",
        "startLine": 357,
        "endLine": 404,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.removeAssets(Object assets)",
                "contents": [
                    {
                        "type": "param",
                        "name": "data",
                        "description": "Object JSON formatted (or JSON string), with assets to remove (accepts sounds, images and sprites)"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Removes assets (audio, images, sprites - and related sprite components) in order to allow the browser\nto free memory.\n\nRecieves a JSON fomatted object (or JSON string) containing 'audio', 'images' and/or 'sprites'\nproperties with assets to be deleted. Follows a similar format as Crafty.load 'data' argument. If\nyou pass the exact same object passed to Crafty.load, that will delete everything loaded that way.\nFor sprites, if you want to keep some specific component, just don't pass that component's name in\nthe sprite 'map'.\n\nNote that in order to remove the sprite components related to a given sprite, it's required to\npass the 'map' property of that sprite, and although its own properties's values (the properties refer\nto sprite components) are not used in the removing process, omitting them will cause an error (since\n'map' is an object, thus it's properties can NOT omitted - however, they can be null, or undefined).\nIt will work as long as the 'map' objects' properties have any value. Or if you define 'map' itself\nas an array, like:\n\"map\": [ \"car\", \"truck\" ] instead of \"map\": { \"car\": [0,0], \"truck\": [0,1] }.\nThis is examplified below (\"animals.png\" VS. \"vehicles.png\" sprites).\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar assetsToRemoveObj = {\n    \"audio\": {\n        \"beep\": [\"beep.wav\", \"beep.mp3\", \"beep.ogg\"],\n        \"boop\": \"boop.wav\"\n    },\n    \"images\": [\"badguy.bmp\", \"goodguy.png\"],\n    \"sprites\": {\n        \"animals.png\": {\n            \"map\": { \"ladybug\": [0,0], \"lazycat\": [0,1] },\n        },\n        \"vehicles.png\": {\n            \"map\": [ \"car\", \"truck\" ]\n        }\n    }\n}\n\nCrafty.removeAssets(assetsToRemoveObj);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.load"
                ]
            }
        ],
        "name": "Crafty.removeAssets",
        "categories": [
            "Assets"
        ]
    },
    {
        "file": "src/core/model.js",
        "startLine": 1,
        "endLine": 34,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Model is a component that offers new features for isolating business\nlogic in your application. It offers default values, dirty values,\nand deep events on your data.\n\nAll data should be accessed via the appropriate methods `.get`, `.set`,\nand `.data` for the proper events to be triggered. It is not encouraged\nto access them directly.\n\nDirty values make it simple to inspect a model and see what values have changed.\n\nDeep events allow you to bind to specific fields, like `name` or even deep fields\nlike `contact.email` and get notified when those specific fields are updated.\n"
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Change",
                        "description": "When any data on the model has changed.",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "Change[key]",
                        "description": "When the specific key on the model has changed.",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "Change[key.key]",
                        "description": "The nested key value has changed.",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.c('Person', {\n  name: 'Fox',\n  init: function() { this.requires('Model'); }\n});\nperson = Crafty.e('Person').attr({name: 'blaine'});\nperson.bind('Change[name]', function() {\n  Crafty.log('name changed!');\n});\nperson.attr('name', 'blainesch'); // Triggers event\nperson.is_dirty('name'); // true\nperson.changed // name\n```"
                    }
                ]
            }
        ],
        "name": "Model",
        "categories": [
            "Model"
        ]
    },
    {
        "file": "src/core/model.js",
        "startLine": 73,
        "endLine": 90,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Helps determine when data or the entire component is \"dirty\" or has changed attributes.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nperson = Crafty.e('Person').attr({name: 'Fox', age: 24})\nperson.is_dirty() // false\nperson.is_dirty('name') // false\n\nperson.attr('name', 'Lucky');\nperson.is_dirty(); // true\nperson.is_dirty('name'); // true\nperson.is_dirty('age'); // false\nperson.changed; // ['name']\n```"
                    }
                ]
            }
        ],
        "name": ".is_dirty",
        "comp": "Model"
    },
    {
        "file": "src/core/scenes.js",
        "startLine": 8,
        "endLine": 83,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "SceneChange",
                        "description": "just before a new scene is initialized",
                        "objName": "Data",
                        "objProp": "{ oldScene:String, newScene:String }"
                    },
                    {
                        "type": "trigger",
                        "event": "SceneDestroy",
                        "description": "just before the current scene is destroyed",
                        "objName": "Data",
                        "objProp": "{ newScene:String  }"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public void Crafty.scene(String sceneName, Function init[, Function uninit])",
                "contents": [
                    {
                        "type": "param",
                        "name": "sceneName",
                        "description": "Name of the scene to add"
                    },
                    {
                        "type": "param",
                        "name": "init",
                        "description": "Function to execute when scene is played"
                    },
                    {
                        "type": "param",
                        "name": "uninit",
                        "description": "Function to execute before next scene is played, after entities with `2D` are destroyed"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This is equivalent to calling `Crafty.defineScene`.\n"
            },
            {
                "type": "method",
                "signature": "public void Crafty.scene(String sceneName[, Data])",
                "contents": [
                    {
                        "type": "param",
                        "name": "sceneName",
                        "description": "Name of scene to play"
                    },
                    {
                        "type": "param",
                        "name": "Data",
                        "description": "The init function of the scene will be called with this data as its parameter.  Can be of any type other than a function."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This is equivalent to calling `Crafty.enterScene`.\n\nMethod to create scenes on the stage. Pass an ID and function to register a scene.\n\nTo play a scene, just pass the ID. When a scene is played, all\npreviously-created entities with the `2D` component are destroyed. The\nviewport is also reset.\n\nYou can optionally specify an arugment that will be passed to the scene's init function.\n\nIf you want some entities to persist over scenes (as in, not be destroyed)\nsimply add the component `Persist`.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.defineScene(\"loading\", function() {\n    Crafty.background(\"#000\");\n    Crafty.e(\"2D, DOM, Text\")\n          .attr({ w: 100, h: 20, x: 150, y: 120 })\n          .text(\"Loading\")\n          .css({ \"text-align\": \"center\"})\n          .textColor(\"#FFFFFF\");\n});\n\nCrafty.defineScene(\"UFO_dance\",\n             function() {Crafty.background(\"#444\"); Crafty.e(\"UFO\");},\n             function() {...send message to server...});\n\n// An example of an init function which accepts arguments, in this case an object.\nCrafty.defineScene(\"square\", function(attributes) {\n    Crafty.background(\"#000\");\n    Crafty.e(\"2D, DOM, Color\")\n          .attr(attributes)\n          .color(\"red\");\n\n});\n\n```\nThis defines (but does not play) two scenes as discussed below.\n```\nCrafty.enterScene(\"loading\");\n```\nThis command will clear the stage by destroying all `2D` entities (except\nthose with the `Persist` component). Then it will set the background to\nblack and display the text \"Loading\".\n```\nCrafty.enterScene(\"UFO_dance\");\n```\nThis command will clear the stage by destroying all `2D` entities (except\nthose with the `Persist` component). Then it will set the background to\ngray and create a UFO entity. Finally, the next time the game encounters\nanother command of the form `Crafty.scene(scene_name)` (if ever), then the\ngame will send a message to the server.\n```\nCrafty.enterScene(\"square\", {x:10, y:10, w:20, h:20});\n```\nThis will clear the stage, set the background black, and create a red square with the specified position and dimensions.\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.scene",
        "categories": [
            "Scenes",
            "Stage"
        ]
    },
    {
        "file": "src/core/storage.js",
        "startLine": 4,
        "endLine": 10,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Very simple way to get and set values, which will persist when the browser is closed also.\nStorage wraps around HTML5 Web Storage, which is well-supported across browsers and platforms, but limited to 5MB total storage per domain.\nStorage is also available for node, which is permanently persisted to the `./localStorage` folder - take care of removing entries. Note that multiple Crafty instances use the same storage, so care has to be taken not to overwrite existing entries."
            }
        ],
        "name": "Storage",
        "categories": [
            "Utilities"
        ]
    },
    {
        "file": "src/core/storage.js",
        "startLine": 11,
        "endLine": 56,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "Crafty.storage(String key)",
                "contents": [
                    {
                        "type": "param",
                        "name": "key",
                        "description": "a key you would like to get from the storage."
                    },
                    {
                        "type": "return",
                        "value": "The stored value, or `null` if none saved under that key exists"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "Crafty.storage(String key, String value)",
                "contents": [
                    {
                        "type": "param",
                        "name": "key",
                        "description": "the key you would like to save the data under."
                    },
                    {
                        "type": "param",
                        "name": "value",
                        "description": "the value you would like to save."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "Crafty.storage(String key, [Object value, Array value, Boolean value])",
                "contents": [
                    {
                        "type": "param",
                        "name": "key",
                        "description": "the key you would like to save the data under."
                    },
                    {
                        "type": "param",
                        "name": "value",
                        "description": "the value you would like to save, can be an Object or an Array."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "`Crafty.storage` is used synchronously to either get or set values.\n\nYou can store booleans, strings, objects and arrays.\n"
            },
            {
                "type": "note",
                "value": "Because the underlying method is synchronous, it can cause slowdowns if used frequently during gameplay. You should aim to load or save data at reasonable times such as on level load, or in response to specific user actions."
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Get an already stored value\n```\nvar playername = Crafty.storage('playername');\n```\n"
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Save a value\n```\nCrafty.storage('playername', 'Hero');\n```\n"
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Test to see if a value is already there.\n```\nvar heroname = Crafty.storage('name');\nif(!heroname){\n  // Maybe ask the player what their name is here\n  heroname = 'Guest';\n}\n// Do something with heroname\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.storage",
        "comp": "Storage"
    },
    {
        "file": "src/core/storage.js",
        "startLine": 82,
        "endLine": 98,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "Crafty.storage.remove(String key)",
                "contents": [
                    {
                        "type": "param",
                        "name": "key",
                        "description": "a key where you will like to delete the value of."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Generally you do not need to remove values from localStorage, but if you do\nstore large amount of text, or want to unset something you can do that with\nthis function.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Get an already stored value\n```\nCrafty.storage.remove('playername');\n```\n"
                    }
                ]
            }
        ],
        "name": "Crafty.storage.remove",
        "comp": "Storage"
    },
    {
        "file": "src/core/systems.js",
        "startLine": 7,
        "endLine": 33,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Registers a system.\n"
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "SystemLoaded",
                        "description": "When the system has initialized itself",
                        "objName": "system object",
                        "objProp": "obj"
                    },
                    {
                        "type": "trigger",
                        "event": "SystemDestroyed",
                        "description": "Right before the system is destroyed",
                        "objName": "system object",
                        "objProp": "obj"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "void Crafty.s(String name, Obj template[, Boolean lazy])",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Register a system"
                    },
                    {
                        "type": "param",
                        "name": "name",
                        "description": "The name of the system"
                    },
                    {
                        "type": "param",
                        "name": "template",
                        "description": "an object whose methods and properties will be copied to the new system"
                    },
                    {
                        "type": "param",
                        "name": "lazy",
                        "description": "a flag that indicates whether the system should be initialized right away or the first time it is referenced"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "System Crafty.s(String name)",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Access the named system"
                    },
                    {
                        "type": "param",
                        "name": "name",
                        "description": "The system to return"
                    },
                    {
                        "type": "return",
                        "value": "The referenced system.  If the system has not been initialized, it will be before it is returned."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Objects which handle entities might want to subscribe to the event system without being entities themselves.\nWhen you declare a system with a template object, all the methods and properties of that template are copied to a new object.\nThis new system will automatically have the following event related methods, which function like those of components: `.bind()`, `unbind()`, `trigger()`, `one()`, `uniqueBind()`, `destroy()`.\nMuch like components, you can also provide `init()` and `remove()` methods, as well as an `events` parameter for automatically binding to events.\n\n*Note*: The `init()` method is for setting up the internal state of the system -- if you create entities in it that then reference the system, that'll create an infinite loop."
            }
        ],
        "name": "Crafty.s",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core/time.js",
        "startLine": 1,
        "endLine": 8,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A component for triggering functions after a given amount of time.\n\nThis syncs with Crafty's internal clock, and so should generally be preferred to using methods such as `setTimeout`."
            }
        ],
        "name": "Delay",
        "categories": [
            "Utilities"
        ]
    },
    {
        "file": "src/core/time.js",
        "startLine": 38,
        "endLine": 79,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this.delay(Function callback, Number delay[, Number repeat[, Function callbackOff]])",
                "contents": [
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute after given amount of milliseconds. If reference of a method is passed, there's possibility to cancel the delay."
                    },
                    {
                        "type": "param",
                        "name": "delay",
                        "description": "Amount of milliseconds to execute the method."
                    },
                    {
                        "type": "param",
                        "name": "repeat",
                        "description": "(optional) How often to repeat the delayed function. A value of 0 triggers the delayed function exactly once. A value n > 0 triggers the delayed function exactly n+1 times. A value of -1 triggers the delayed function indefinitely. Defaults to one execution."
                    },
                    {
                        "type": "param",
                        "name": "callbackOff",
                        "description": "(optional) Method to execute after delay ends(after all iterations are executed). If repeat value equals -1, callbackOff will never be triggered."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "The delay method will execute a function after a given amount of time in milliseconds.\n\nIt is not a wrapper for `setTimeout`.\n\nIf Crafty is paused, the delay is interrupted with the pause and then resume when unpaused\n\nIf the entity is destroyed, the delay is also destroyed and will not have effect.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "The simplest delay\n```\nCrafty.log(\"start\");\nCrafty.e(\"Delay\").delay(function() {\n  Crafty.log(\"100ms later\");\n}, 100, 0);\n```\n\nDelay with callbackOff to be executed after all delay iterations\n```\nCrafty.log(\"start\");\nCrafty.e(\"Delay\").delay(function() {\n  Crafty.log(\"100ms later\");\n}, 100, 3, function() {\n  Crafty.log(\"delay finished\");\n});\n```\n"
                    }
                ]
            }
        ],
        "name": ".delay",
        "comp": "Delay"
    },
    {
        "file": "src/core/time.js",
        "startLine": 90,
        "endLine": 110,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this.cancelDelay(Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method reference passed to .delay"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "The cancelDelay method will cancel a delay set previously.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar doSomething = function(){\n  Crafty.log(\"doing something\");\n};\n\n// execute doSomething each 100 miliseconds indefinetely\nvar ent = Crafty.e(\"Delay\").delay(doSomething, 100, -1);\n\n// and some time later, cancel further execution of doSomething\nent.cancelDelay(doSomething);\n```"
                    }
                ]
            }
        ],
        "name": ".cancelDelay",
        "comp": "Delay"
    },
    {
        "file": "src/core/tween.js",
        "startLine": 1,
        "endLine": 7,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "TweenEnd",
                        "description": "when a tween finishes",
                        "objName": "property",
                        "objProp": "String"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Component to animate the change in 2D properties over time."
            }
        ],
        "name": "Tween",
        "categories": [
            "Animation"
        ]
    },
    {
        "file": "src/core/tween.js",
        "startLine": 40,
        "endLine": 71,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .tween(Object properties, Number duration[, String|function easingFn])",
                "contents": [
                    {
                        "type": "param",
                        "name": "properties",
                        "description": "Object of numeric properties and what they should animate to"
                    },
                    {
                        "type": "param",
                        "name": "duration",
                        "description": "Duration to animate the properties over, in milliseconds."
                    },
                    {
                        "type": "param",
                        "name": "easingFn",
                        "description": "A string or custom function specifying an easing.  (Defaults to linear behavior.)  See Crafty.easing for more information."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This method will animate numeric properties over the specified duration.\nThese include `x`, `y`, `w`, `h`, `alpha` and `rotation`.\n\nThe object passed should have the properties as keys and the value should be the resulting\nvalues of the properties.  The passed object might be modified if later calls to tween animate the same properties.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Move an object to 100,100 and fade out over 200 ms.\n```\nCrafty.e(\"2D, Tween\")\n   .attr({alpha: 1.0, x: 0, y: 0})\n   .tween({alpha: 0.0, x: 100, y: 100}, 200)\n```"
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Rotate an object over 2 seconds, using the \"smootherStep\" easing function.\n```\nCrafty.e(\"2D, Tween\")\n   .attr({rotation:0})\n   .tween({rotation:180}, 2000, \"smootherStep\")\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.easing"
                ]
            }
        ],
        "name": ".tween",
        "comp": "Tween"
    },
    {
        "file": "src/core/tween.js",
        "startLine": 95,
        "endLine": 106,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .cancelTween(String target)",
                "contents": [
                    {
                        "type": "param",
                        "name": "target",
                        "description": "The property to cancel"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .cancelTween(Object target)",
                "contents": [
                    {
                        "type": "param",
                        "name": "target",
                        "description": "An object containing the properties to cancel."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Stops tweening the specified property or properties.\nPassing the object used to start the tween might be a typical use of the second signature."
            }
        ],
        "name": ".cancelTween",
        "comp": "Tween"
    },
    {
        "file": "src/core/tween.js",
        "startLine": 120,
        "endLine": 126,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .pauseTweens()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Pauses all tweens associated with the entity"
            }
        ],
        "name": ".pauseTweens",
        "comp": "Tween"
    },
    {
        "file": "src/core/tween.js",
        "startLine": 131,
        "endLine": 137,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .resumeTweens()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Resumes all paused tweens associated with the entity"
            }
        ],
        "name": ".resumeTWeens",
        "comp": "Tween"
    },
    {
        "file": "src/debug/debug-layer.js",
        "startLine": 4,
        "endLine": 16,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Draw",
                        "description": "when the entity is ready to be drawn to the stage",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "NoCanvas",
                        "description": "if the browser does not support canvas",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "When this component is added to an entity it will be drawn by the DebugCanvas layer.\n\nCrafty.debugCanvas.init() will be automatically called if it is not called already to initialize the canvas element.\n\nTo visualise an object's MBR, use \"VisibleMBR\".  To visualise a \"Collision\" object's hitbox, use \"WiredHitBox\" or \"SolidHitBox\"."
            },
            {
                "type": "xref",
                "xrefs": [
                    "DebugPolygon",
                    "DebugRectangle"
                ]
            }
        ],
        "name": "DebugCanvas",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/debug/debug-layer.js",
        "startLine": 43,
        "endLine": 48,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public  .debugAlpha(Number alpha)",
                "contents": [
                    {
                        "type": "param",
                        "name": "alpha",
                        "description": "The alpha level the component will be drawn with"
                    }
                ]
            }
        ],
        "name": ".debugAlpha",
        "comp": "DebugCanvas"
    },
    {
        "file": "src/debug/debug-layer.js",
        "startLine": 54,
        "endLine": 63,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public  .debugFill([String fillStyle])",
                "contents": [
                    {
                        "type": "param",
                        "name": "fillStyle",
                        "description": "The color the component will be filled with.  Defaults to \"red\". Pass the boolean false to turn off filling."
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar myEntity = Crafty.e(\"2D, Collision, SolidHitBox \").debugFill(\"purple\")\n```"
                    }
                ]
            }
        ],
        "name": ".debugFill",
        "comp": "DebugCanvas"
    },
    {
        "file": "src/debug/debug-layer.js",
        "startLine": 71,
        "endLine": 80,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public  .debugStroke([String strokeStyle])",
                "contents": [
                    {
                        "type": "param",
                        "name": "strokeStyle",
                        "description": "The color the component will be outlined with.  Defaults to \"red\".  Pass the boolean false to turn this off."
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar myEntity = Crafty.e(\"2D, Collision, WiredHitBox \").debugStroke(\"white\")\n```"
                    }
                ]
            }
        ],
        "name": ".debugStroke",
        "comp": "DebugCanvas"
    },
    {
        "file": "src/debug/debug-layer.js",
        "startLine": 115,
        "endLine": 129,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A component for rendering an object with a position and dimensions to the debug canvas.\n\n\n```\nvar myEntity = Crafty.e(\"2D, DebugRectangle\")\n                     .attr({x: 13, y: 37, w: 42, h: 42})\n                     .debugStroke(\"green\");\nmyEntity.debugRectangle(myEntity)\n```"
            },
            {
                "type": "xref",
                "xrefs": [
                    "DebugCanvas"
                ]
            }
        ],
        "name": "DebugRectangle",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/debug/debug-layer.js",
        "startLine": 135,
        "endLine": 143,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public  .debugRectangle(Object rect)",
                "contents": [
                    {
                        "type": "param",
                        "name": "rect",
                        "description": "an object with _x, _y, _w, and _h to draw"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Sets the rectangle that this component draws to the debug canvas.\n"
            }
        ],
        "name": ".debugRectangle",
        "comp": "DebugRectangle"
    },
    {
        "file": "src/debug/debug-layer.js",
        "startLine": 173,
        "endLine": 181,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Adding this component to an entity will cause it's MBR to be drawn to the debug canvas.\n\nThe methods of DebugCanvas can be used to control this component's appearance."
            },
            {
                "type": "xref",
                "xrefs": [
                    "2D",
                    "DebugRectangle",
                    "DebugCanvas"
                ]
            }
        ],
        "name": "VisibleMBR",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/debug/debug-layer.js",
        "startLine": 202,
        "endLine": 213,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "For drawing a polygon to the debug canvas\n\nThe methods of DebugCanvas can be used to control this component's appearance -- by default it is neither filled nor outlined\n\nFor debugging hitboxes, use WiredHitBox or SolidHitBox.  For debugging MBR, use VisibleMBR\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "DebugCanvas"
                ]
            }
        ],
        "name": "DebugPolygon",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/debug/debug-layer.js",
        "startLine": 220,
        "endLine": 228,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public  .debugPolygon(Polygon poly)",
                "contents": [
                    {
                        "type": "param",
                        "name": "poly",
                        "description": "a polygon to render"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Sets the polygon that this component renders to the debug canvas.\n"
            }
        ],
        "name": ".debugPolygon",
        "comp": "DebugPolygon"
    },
    {
        "file": "src/debug/debug-layer.js",
        "startLine": 256,
        "endLine": 264,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Adding this component to an entity with a Collision component will cause its collision polygon to be drawn to the debug canvas as an outline\n\nThe methods of DebugCanvas can be used to control this component's appearance."
            },
            {
                "type": "xref",
                "xrefs": [
                    "DebugPolygon",
                    "DebugCanvas"
                ]
            }
        ],
        "name": "WiredHitBox",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/debug/debug-layer.js",
        "startLine": 277,
        "endLine": 285,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Adding this component to an entity with a Collision component will cause its collision polygon to be drawn to the debug canvas, with a default alpha level of 0.7.\n\nThe methods of DebugCanvas can be used to control this component's appearance."
            },
            {
                "type": "xref",
                "xrefs": [
                    "DebugPolygon",
                    "DebugCanvas"
                ]
            }
        ],
        "name": "SolidHitBox",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/debug/debug-layer.js",
        "startLine": 298,
        "endLine": 307,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Adding this component to an entity with an AreaMap component will cause its click polygon to be drawn to the debug canvas as an outline.\nFollowing click areas exist for an entity (in decreasing order of priority): AreaMap, Hitbox, MBR. Use the appropriate debug components to display them.\n\nThe methods of DebugCanvas can be used to control this component's appearance."
            },
            {
                "type": "xref",
                "xrefs": [
                    "DebugPolygon",
                    "DebugCanvas"
                ]
            }
        ],
        "name": "WiredAreaMap",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/debug/debug-layer.js",
        "startLine": 320,
        "endLine": 329,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Adding this component to an entity with an AreaMap component will cause its click polygon to be drawn to the debug canvas, with a default alpha level of 0.7.\nFollowing click areas exist for an entity (in decreasing order of priority): AreaMap, Hitbox, MBR. Use the appropriate debug components to display them.\n\nThe methods of DebugCanvas can be used to control this component's appearance."
            },
            {
                "type": "xref",
                "xrefs": [
                    "DebugPolygon",
                    "DebugCanvas"
                ]
            }
        ],
        "name": "SolidAreaMap",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/debug/logging.js",
        "startLine": 4,
        "endLine": 13,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "Crafty.log( arguments )",
                "contents": [
                    {
                        "type": "param",
                        "name": "arguments",
                        "description": "arguments which are passed to `console.log`"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This is a simple wrapper for `console.log`.  You can disable logging messages by setting `Crafty.loggingEnabled` to false.\nIt is recommended to use `Crafty.log`, as `console.log` can crash on IE9."
            }
        ],
        "name": "Crafty.log",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/debug/logging.js",
        "startLine": 14,
        "endLine": 23,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "Crafty.error( arguments )",
                "contents": [
                    {
                        "type": "param",
                        "name": "arguments",
                        "description": "arguments which are passed to `console.error`"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This is a simple wrapper for `console.error`.  You can disable logging messages by setting `Crafty.loggingEnabled` to false.\nIt is recommended to use `Crafty.error`, as `console.error` can crash on IE9."
            }
        ],
        "name": "Crafty.error",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/graphics/canvas-layer.js",
        "startLine": 4,
        "endLine": 9,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Collection of mostly private methods to draw entities on a canvas element."
            }
        ],
        "name": "Crafty.canvasLayer",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/canvas-layer.js",
        "startLine": 22,
        "endLine": 29,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.canvasLayer.add(ent)",
                "contents": [
                    {
                        "type": "param",
                        "name": "ent",
                        "description": "The entity to add"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Add an entity to the list of Canvas objects to draw"
            }
        ],
        "name": "Crafty.canvasLayer.add",
        "comp": "Crafty.canvasLayer"
    },
    {
        "file": "src/graphics/canvas-layer.js",
        "startLine": 33,
        "endLine": 39,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "This will return the 2D context of the main canvas element.\nThe value returned from `Crafty.canvasLayer._canvas.getContext('2d')`."
            }
        ],
        "name": "Crafty.canvasLayer.context",
        "comp": "Crafty.canvasLayer"
    },
    {
        "file": "src/graphics/canvas-layer.js",
        "startLine": 41,
        "endLine": 46,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Main Canvas element"
            }
        ],
        "name": "Crafty.canvasLayer._canvas",
        "comp": "Crafty.canvasLayer"
    },
    {
        "file": "src/graphics/canvas-layer.js",
        "startLine": 49,
        "endLine": 60,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.canvasLayer.init(void)",
                "contents": []
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NoCanvas",
                        "description": "triggered if `Crafty.support.canvas` is false",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Creates a `canvas` element inside `Crafty.stage.elem`. Must be called\nbefore any entities with the Canvas component can be drawn.\n\nThis method will automatically be called if no `Crafty.canvasLayer.context` is\nfound."
            }
        ],
        "name": "Crafty.canvasLayer.init",
        "comp": "Crafty.canvasLayer"
    },
    {
        "file": "src/graphics/canvas-layer.js",
        "startLine": 135,
        "endLine": 146,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.canvasLayer.drawDirty()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "- Triggered by the \"RenderScene\" event\n- If the number of rects is over 60% of the total number of objects\n do the naive method redrawing `Crafty.canvasLayer.drawAll` instead\n- Otherwise, clear the dirty regions, and redraw entities overlapping the dirty regions.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Canvas#.draw"
                ]
            }
        ],
        "name": "Crafty.canvasLayer.drawDirty",
        "comp": "Crafty.canvasLayer"
    },
    {
        "file": "src/graphics/canvas-layer.js",
        "startLine": 236,
        "endLine": 244,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.canvasLayer.drawAll([Object rect])",
                "contents": [
                    {
                        "type": "param",
                        "name": "rect",
                        "description": "a rectangular region {_x: x_val, _y: y_val, _w: w_val, _h: h_val}"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "- If rect is omitted, redraw within the viewport\n- If rect is provided, redraw within the rect"
            }
        ],
        "name": "Crafty.canvasLayer.drawAll",
        "comp": "Crafty.canvasLayer"
    },
    {
        "file": "src/graphics/canvas.js",
        "startLine": 4,
        "endLine": 20,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Draw",
                        "description": "when the entity is ready to be drawn to the stage",
                        "objName": "Data",
                        "objProp": "{type: \"canvas\", pos, co, ctx}"
                    },
                    {
                        "type": "trigger",
                        "event": "NoCanvas",
                        "description": "if the browser does not support canvas",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "When this component is added to an entity it will be drawn to the global canvas element. The canvas element (and hence all Canvas entities) is always rendered below any DOM entities.\n\nCrafty.canvasLayer.init() will be automatically called if it is not called already to initialize the canvas element.\n\nCreate a canvas entity like this\n```\nvar myEntity = Crafty.e(\"2D, Canvas, Color\")\n     .color(\"green\")\n     .attr({x: 13, y: 37, w: 42, h: 42});\n```"
            }
        ],
        "name": "Canvas",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/canvas.js",
        "startLine": 55,
        "endLine": 66,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .draw([[Context ctx, ]Number x, Number y, Number w, Number h])",
                "contents": [
                    {
                        "type": "param",
                        "name": "ctx",
                        "description": "Canvas 2D context if drawing on another canvas is required"
                    },
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X offset for drawing a segment"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y offset for drawing a segment"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "Width of the segment to draw"
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "Height of the segment to draw"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Method to draw the entity on the canvas element. Can pass rect values for redrawing a segment of the entity."
            }
        ],
        "name": ".draw",
        "comp": "Canvas"
    },
    {
        "file": "src/graphics/color.js",
        "startLine": 7,
        "endLine": 16,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "Crafty.assignColor(color[, assignee])",
                "contents": [
                    {
                        "type": "param",
                        "name": "color",
                        "description": "a string represenation of the color to assign, in any valid HTML format"
                    },
                    {
                        "type": "param",
                        "name": "assignee",
                        "description": "an object to use instead of creating one from scratch"
                    },
                    {
                        "type": "return",
                        "value": "An object with `_red`, `_green`, and `_blue` properties assigned.           Potentially with `_strength` representing the alpha channel.           If the assignee parameter is passed, that object will be assigned those values and returned."
                    }
                ]
            }
        ],
        "name": "Crafty.assignColor",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/color.js",
        "startLine": 149,
        "endLine": 153,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Draw a colored rectangle."
            }
        ],
        "name": "Color",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/color.js",
        "startLine": 197,
        "endLine": 231,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "description": "when the color changes",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Will assign the color and opacity, either through a string shorthand, or through explicit rgb values."
            },
            {
                "type": "method",
                "signature": "public this .color(String color[, Float strength])",
                "contents": [
                    {
                        "type": "param",
                        "name": "color",
                        "description": "Color of the rectangle"
                    },
                    {
                        "type": "param",
                        "name": "strength",
                        "description": "the opacity of the rectangle"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .color(r, g, b[, strength])",
                "contents": [
                    {
                        "type": "param",
                        "name": "r",
                        "description": "value for the red channel"
                    },
                    {
                        "type": "param",
                        "name": "g",
                        "description": "value for the green channel"
                    },
                    {
                        "type": "param",
                        "name": "b",
                        "description": "value for the blue channel"
                    },
                    {
                        "type": "param",
                        "name": "strength",
                        "description": "the opacity of the rectangle"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public String .color()",
                "contents": [
                    {
                        "type": "return",
                        "value": "A string representing the current color as a CSS property."
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar c = Crafty.e(\"2D, DOM, Color\");\nc.color(\"#FF0000\");\nc.color(\"red\");\nc.color(255, 0, 0);\nc.color(\"rgb(255, 0, 0\")\n```\nThree different ways of assign the color red.\n```\nvar c = Crafty.e(\"2D, DOM, Color\");\nc.color(\"#00FF00\", 0.5);\nc.color(\"rgba(0, 255, 0, 0.5)\");\n```\nTwo ways of assigning a transparent green color."
                    }
                ]
            }
        ],
        "name": ".color",
        "comp": "Color"
    },
    {
        "file": "src/graphics/dom-helper.js",
        "startLine": 5,
        "endLine": 10,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Collection of utilities for using the DOM."
            }
        ],
        "name": "Crafty.domHelper",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/dom-helper.js",
        "startLine": 12,
        "endLine": 21,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.domHelper.innerPosition(HTMLElement obj)",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "HTML element to calculate the position"
                    },
                    {
                        "type": "return",
                        "value": "Object with `x` key being the `x` position, `y` being the `y` position"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Find a DOM elements position including\npadding and border."
            }
        ],
        "name": "Crafty.domHelper.innerPosition",
        "comp": "Crafty.domHelper"
    },
    {
        "file": "src/graphics/dom-helper.js",
        "startLine": 40,
        "endLine": 49,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.domHelper.getStyle(HTMLElement obj, String property)",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "HTML element to find the style"
                    },
                    {
                        "type": "param",
                        "name": "property",
                        "description": "Style to return"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Determine the value of a style on an HTML element. Notation can be\nin either CSS or JS."
            }
        ],
        "name": "Crafty.domHelper.getStyle",
        "comp": "Crafty.domHelper"
    },
    {
        "file": "src/graphics/dom-helper.js",
        "startLine": 79,
        "endLine": 91,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.domHelper.translate(Number clientX, Number clientY)",
                "contents": [
                    {
                        "type": "param",
                        "name": "clientX",
                        "description": "clientX position in the browser screen"
                    },
                    {
                        "type": "param",
                        "name": "clientY",
                        "description": "clientY position in the browser screen"
                    },
                    {
                        "type": "return",
                        "value": "Object `{x: ..., y: ...}` with Crafty coordinates."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "The parameters clientX and clientY are pixel coordinates within the visible\nbrowser window. This function translates those to Crafty coordinates (i.e.,\nthe coordinates that you might apply to an entity), by taking into account\nwhere the stage is within the screen, what the current viewport is, etc."
            }
        ],
        "name": "Crafty.domHelper.translate",
        "comp": "Crafty.domHelper"
    },
    {
        "file": "src/graphics/dom-layer.js",
        "startLine": 5,
        "endLine": 10,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Collection of mostly private methods to represent entities using the DOM."
            }
        ],
        "name": "Crafty.domLayer",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/dom-layer.js",
        "startLine": 64,
        "endLine": 68,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.domLayer.debug()",
                "contents": []
            }
        ],
        "name": "Crafty.domLayer.debug",
        "comp": "Crafty.domLayer"
    },
    {
        "file": "src/graphics/dom-layer.js",
        "startLine": 74,
        "endLine": 82,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.domLayer.render()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "When \"RenderScene\" is triggered, draws all DOM entities that have been flagged\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "DOM#.draw"
                ]
            }
        ],
        "name": "Crafty.domLayer._render",
        "comp": "Crafty.domLayer"
    },
    {
        "file": "src/graphics/dom-layer.js",
        "startLine": 107,
        "endLine": 114,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.domLayer.add(ent)",
                "contents": [
                    {
                        "type": "param",
                        "name": "ent",
                        "description": "The entity to add"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Add an entity to the list of DOM object to draw"
            }
        ],
        "name": "Crafty.domLayer.add",
        "comp": "Crafty.domLayer"
    },
    {
        "file": "src/graphics/dom.js",
        "startLine": 4,
        "endLine": 9,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A component which renders entities as DOM nodes, specifically `<div>`s."
            }
        ],
        "name": "DOM",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/dom.js",
        "startLine": 11,
        "endLine": 15,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The DOM element used to represent the entity."
            }
        ],
        "name": "._element",
        "comp": "DOM"
    },
    {
        "file": "src/graphics/dom.js",
        "startLine": 20,
        "endLine": 24,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Avoids using of CSS 3D Transform for positioning when true. Default value is false."
            }
        ],
        "name": ".avoidCss3dTransforms",
        "comp": "DOM"
    },
    {
        "file": "src/graphics/dom.js",
        "startLine": 65,
        "endLine": 71,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .getId()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Get the Id of the DOM element used to represent the entity."
            }
        ],
        "name": ".getDomId",
        "comp": "DOM"
    },
    {
        "file": "src/graphics/dom.js",
        "startLine": 109,
        "endLine": 117,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Draw",
                        "description": "when the entity is ready to be drawn to the stage",
                        "objName": "Data",
                        "objProp": "{ style:String, type:\"DOM\", co}"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .DOM(HTMLElement elem)",
                "contents": [
                    {
                        "type": "param",
                        "name": "elem",
                        "description": "HTML element that will replace the dynamically created one"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Pass a DOM element to use rather than one created. Will set `._element` to this value. Removes the old element."
            }
        ],
        "name": ".DOM",
        "comp": "DOM"
    },
    {
        "file": "src/graphics/dom.js",
        "startLine": 127,
        "endLine": 133,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .draw(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Updates the CSS properties of the node to draw on the stage."
            }
        ],
        "name": ".draw",
        "comp": "DOM"
    },
    {
        "file": "src/graphics/dom.js",
        "startLine": 219,
        "endLine": 225,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .undraw(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Removes the element from the stage."
            }
        ],
        "name": ".undraw",
        "comp": "DOM"
    },
    {
        "file": "src/graphics/dom.js",
        "startLine": 234,
        "endLine": 263,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public css(String property, String value)",
                "contents": [
                    {
                        "type": "param",
                        "name": "property",
                        "description": "CSS property to modify"
                    },
                    {
                        "type": "param",
                        "name": "value",
                        "description": "Value to give the CSS property"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public  css(Object map)",
                "contents": [
                    {
                        "type": "param",
                        "name": "map",
                        "description": "Object where the key is the CSS property and the value is CSS value"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Apply CSS styles to the element.\n\nCan pass an object where the key is the style property and the value is style value.\n\nFor setting one style, simply pass the style as the first argument and the value as the second.\n\nThe notation can be CSS or JS (e.g. `text-align` or `textAlign`).\n\nTo return a value, pass the property.\n\nNote: For entities with \"Text\" component, some css properties are controlled by separate functions\n`.textFont()` and `.textColor()`, and ignore `.css()` settings. See Text component for details.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.css({'text-align': 'center', 'text-decoration': 'line-through'});\nthis.css(\"textAlign\", \"center\");\nthis.css(\"text-align\"); //returns center\n```"
                    }
                ]
            }
        ],
        "name": ".css",
        "comp": "DOM"
    },
    {
        "file": "src/graphics/drawing.js",
        "startLine": 4,
        "endLine": 39,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.pixelart(Boolean enabled)",
                "contents": [
                    {
                        "type": "param",
                        "name": "enabled",
                        "description": "whether to preserve sharp edges when rendering images"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Sets the image smoothing for drawing images (for all layer types).\n\nSetting this to true disables smoothing for images, which is the preferred\nway for drawing pixel art. Defaults to false.\n\nThis feature is experimental and you should be careful with cross-browser compatibility.\nThe best way to disable image smoothing is to use the Canvas render method and the Sprite component for drawing your entities.\n\nIf you want to switch modes in the middle of a scene,\nbe aware that canvas entities won't be drawn in the new style until something else invalidates them.\n(You can manually invalidate all canvas entities with `Crafty(\"Canvas\").trigger(\"Invalidate\");`)\n"
            },
            {
                "type": "note",
                "value": "Firefox_26 currently has a [bug](https://bugzilla.mozilla.org/show_bug.cgi?id=696630) which prevents disabling image smoothing for Canvas entities that use the Image component. Use the Sprite component instead."
            },
            {
                "type": "note",
                "value": "Webkit (Chrome & Safari) currently has a bug [link1](http://code.google.com/p/chromium/issues/detail?id=134040) [link2](http://code.google.com/p/chromium/issues/detail?id=106662) that prevents disabling image smoothing for DOM entities."
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "This is the preferred way to draw pixel art with the best cross-browser compatibility.\n```\nCrafty.canvasLayer.init();\nCrafty.pixelart(true);\n\nCrafty.sprite(imgWidth, imgHeight, \"spriteMap.png\", {sprite1:[0,0]});\nCrafty.e(\"2D, Canvas, sprite1\");\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.pixelart",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/html.js",
        "startLine": 4,
        "endLine": 11,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A component which allows for the insertion of arbitrary HTML into a DOM entity.\n\nAdding this to an entity will automatically add the `DOM` component."
            }
        ],
        "name": "HTML",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/html.js",
        "startLine": 19,
        "endLine": 34,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .replace(String html)",
                "contents": [
                    {
                        "type": "param",
                        "name": "html",
                        "description": "arbitrary html"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This method will replace the content of this entity with the supplied html\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Create a link\n```\nCrafty.e(\"HTML\")\n   .attr({x:20, y:20, w:100, h:100})\n   .replace(\"<a href='index.html'>Index</a>\");\n```"
                    }
                ]
            }
        ],
        "name": ".replace",
        "comp": "HTML"
    },
    {
        "file": "src/graphics/html.js",
        "startLine": 41,
        "endLine": 56,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .append(String html)",
                "contents": [
                    {
                        "type": "param",
                        "name": "html",
                        "description": "arbitrary html"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This method will add the supplied html in the end of the entity\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Create a link\n```\nCrafty.e(\"HTML\")\n   .attr({x:20, y:20, w:100, h:100})\n   .append(\"<a href='index.html'>Index</a>\");\n```"
                    }
                ]
            }
        ],
        "name": ".append",
        "comp": "HTML"
    },
    {
        "file": "src/graphics/html.js",
        "startLine": 63,
        "endLine": 78,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .prepend(String html)",
                "contents": [
                    {
                        "type": "param",
                        "name": "html",
                        "description": "arbitrary html"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This method will add the supplied html in the beginning of the entity\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Create a link\n```\nCrafty.e(\"HTML\")\n   .attr({x:20, y:20, w:100, h:100})\n   .prepend(\"<a href='index.html'>Index</a>\");\n```"
                    }
                ]
            }
        ],
        "name": ".prepend",
        "comp": "HTML"
    },
    {
        "file": "src/graphics/image.js",
        "startLine": 16,
        "endLine": 20,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Draw an image with or without repeating (tiling)."
            }
        ],
        "name": "Image",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/image.js",
        "startLine": 37,
        "endLine": 69,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "description": "when the image is loaded",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .image(String url[, String repeat])",
                "contents": [
                    {
                        "type": "param",
                        "name": "url",
                        "description": "URL of the image"
                    },
                    {
                        "type": "param",
                        "name": "repeat",
                        "description": "If the image should be repeated to fill the entity.  This follows CSS syntax: (`\"no-repeat\", \"repeat\", \"repeat-x\", \"repeat-y\"`), but defaults to `no-repeat`."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Draw the specified image.\n"
            },
            {
                "type": "note",
                "value": "The default value of repeat is `no-repeat`, which is different than the standard CSS default"
            },
            {
                "type": "raw",
                "value": "If the width and height are `0` and repeat is set to `no-repeat` the width and\nheight will automatically assume that of the image. This is an\neasy way to create an image without needing sprites.\n\nIf set to `no-repeat` and given dimensions larger than that of the image,\nthe exact appearance will depend on what renderer (WebGL, DOM, or Canvas) is used.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Will default to no-repeat. Entity width and height will be set to the images width and height\n```\nvar ent = Crafty.e(\"2D, DOM, Image\").image(\"myimage.png\");\n```\nCreate a repeating background.\n```\nvar bg = Crafty.e(\"2D, DOM, Image\")\n             .attr({w: Crafty.viewport.width, h: Crafty.viewport.height})\n             .image(\"bg.png\", \"repeat\");\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.sprite"
                ]
            }
        ],
        "name": ".image",
        "comp": "Image"
    },
    {
        "file": "src/graphics/particles.js",
        "startLine": 4,
        "endLine": 14,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "ParticleEnd",
                        "description": "when the particle animation has finished",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Based on Parcycle by Mr. Speaker, licensed under the MIT, Ported by Leo Koppelkamm\n"
            },
            {
                "type": "note",
                "value": "This requires the canvas element, and won't do anything if the browser doesn't support it!"
            },
            {
                "type": "raw",
                "value": "For implementation details, check out the source code."
            }
        ],
        "name": "Particles",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/particles.js",
        "startLine": 22,
        "endLine": 64,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .particles(Object options)",
                "contents": [
                    {
                        "type": "param",
                        "name": "options",
                        "description": "Map of options that specify the behavior and look of the particles."
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar options = {\n  maxParticles: 150,\n  size: 18,\n  sizeRandom: 4,\n  speed: 1,\n  speedRandom: 1.2,\n  // Lifespan in frames\n  lifeSpan: 29,\n  lifeSpanRandom: 7,\n  // Angle is calculated clockwise: 12pm is 0deg, 3pm is 90deg etc.\n  angle: 65,\n  angleRandom: 34,\n  startColour: [255, 131, 0, 1],\n  startColourRandom: [48, 50, 45, 0],\n  endColour: [245, 35, 0, 0],\n  endColourRandom: [60, 60, 60, 0],\n  // Only applies when fastMode is off, specifies how sharp the gradients are drawn\n  sharpness: 20,\n  sharpnessRandom: 10,\n  // Random spread from origin\n  spread: 10,\n  // How many frames should this last\n  duration: -1,\n  // Will draw squares instead of circle gradients\n  fastMode: false,\n  gravity: { x: 0, y: 0.1 },\n  // sensible values are 0-3\n  jitter: 0,\n  // Offset for the origin of the particles\n  originOffset: {x: 0, y: 0}\n};\n\nCrafty.e(\"2D,Canvas,Particles\").particles(options);\n```"
                    }
                ]
            }
        ],
        "name": ".particles",
        "comp": "Particles"
    },
    {
        "file": "src/graphics/sprite-animation.js",
        "startLine": 4,
        "endLine": 27,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "StartAnimation",
                        "description": "When an animation starts playing, or is resumed from the paused state",
                        "objName": "Data",
                        "objProp": "{Reel}"
                    },
                    {
                        "type": "trigger",
                        "event": "AnimationEnd",
                        "description": "When the animation finishes",
                        "objName": "Data",
                        "objProp": "{ Reel }"
                    },
                    {
                        "type": "trigger",
                        "event": "FrameChange",
                        "description": "Each time the frame of the current reel changes",
                        "objName": "Data",
                        "objProp": "{ Reel }"
                    },
                    {
                        "type": "trigger",
                        "event": "ReelChange",
                        "description": "When the reel changes",
                        "objName": "Data",
                        "objProp": "{ Reel }"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Used to animate sprites by treating a sprite map as a set of animation frames.\nMust be applied to an entity that has a sprite-map component.\n\nTo define an animation, see the `reel` method.  To play an animation, see the `animate` method.\n\nA reel is an object that contains the animation frames and current state for an animation.  The reel object has the following properties:"
            },
            {
                "type": "param",
                "name": "id: (String)",
                "description": "the name of the reel"
            },
            {
                "type": "param",
                "name": "frames: (Array)",
                "description": "A list of frames in the format [xpos, ypos]"
            },
            {
                "type": "param",
                "name": "currentFrame: (Number)",
                "description": "The index of the current frame"
            },
            {
                "type": "param",
                "name": "easing: (Crafty.easing object)",
                "description": "The object that handles the internal progress of the animation."
            },
            {
                "type": "param",
                "name": "duration: (Number)",
                "description": "The duration in milliseconds."
            },
            {
                "type": "raw",
                "value": "Many animation related events pass a reel object as data.  As typical with events, this should be treated as read only data that might be later altered by the entity.  If you wish to preserve the data, make a copy of it.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.sprite"
                ]
            }
        ],
        "name": "SpriteAnimation",
        "categories": [
            "Animation"
        ]
    },
    {
        "file": "src/graphics/sprite-animation.js",
        "startLine": 55,
        "endLine": 60,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The playback rate of the animation.  This property defaults to 1."
            }
        ],
        "name": ".animationSpeed",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/graphics/sprite-animation.js",
        "startLine": 68,
        "endLine": 117,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Used to define reels, to change the active reel, and to fetch the id of the active reel.\n"
            },
            {
                "type": "method",
                "signature": "public this .reel(String reelId, Duration duration, Number fromX, Number fromY, Number frameCount)",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Defines a reel by starting and ending position on the sprite sheet."
                    },
                    {
                        "type": "param",
                        "name": "reelId",
                        "description": "ID of the animation reel being created"
                    },
                    {
                        "type": "param",
                        "name": "duration",
                        "description": "The length of the animation in milliseconds."
                    },
                    {
                        "type": "param",
                        "name": "fromX",
                        "description": "Starting `x` position on the sprite map (x's unit is the horizontal size of the sprite in the sprite map)."
                    },
                    {
                        "type": "param",
                        "name": "fromY",
                        "description": "`y` position on the sprite map (y's unit is the horizontal size of the sprite in the sprite map). Remains constant through the animation."
                    },
                    {
                        "type": "param",
                        "name": "frameCount",
                        "description": "The number of sequential frames in the animation.  If negative, the animation will play backwards."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .reel(String reelId, Duration duration, Array frames)",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Defines a reel by an explicit list of frames"
                    },
                    {
                        "type": "param",
                        "name": "reelId",
                        "description": "ID of the animation reel being created"
                    },
                    {
                        "type": "param",
                        "name": "duration",
                        "description": "The length of the animation in milliseconds."
                    },
                    {
                        "type": "param",
                        "name": "frames",
                        "description": "An array of arrays containing the `x` and `y` values of successive frames: [[x1,y1],[x2,y2],...] (the values are in the unit of the sprite map's width/height respectively)."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .reel(String reelId)",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Switches to the specified reel.  The sprite will be updated to that reel's current frame"
                    },
                    {
                        "type": "param",
                        "name": "reelID",
                        "description": "the ID to switch to"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Reel .reel()",
                "contents": [
                    {
                        "type": "return",
                        "value": "The id of the current reel"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "A method to handle animation reels.  Only works for sprites built with the Crafty.sprite methods.\nSee the Tween component for animation of 2D properties.\n\nTo setup an animation reel, pass the name of the reel (used to identify the reel later), and either an\narray of absolute sprite positions or the start x on the sprite map, the y on the sprite map and then the end x on the sprite map.\n\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// Define a sprite-map component\nCrafty.sprite(16, \"images/sprite.png\", {\n    PlayerSprite: [0,0]\n});\n\n// Define an animation on the second row of the sprite map (fromY = 1)\n// from the left most sprite (fromX = 0) to the fourth sprite\n// on that row (frameCount = 4), with a duration of 1 second\nCrafty.e(\"2D, DOM, SpriteAnimation, PlayerSprite\").reel('PlayerRunning', 1000, 0, 1, 4);\n\n// This is the same animation definition, but using the alternative method\nCrafty.e(\"2D, DOM, SpriteAnimation, PlayerSprite\").reel('PlayerRunning', 1000, [[0, 1], [1, 1], [2, 1], [3, 1]]);\n```"
                    }
                ]
            }
        ],
        "name": ".reel",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/graphics/sprite-animation.js",
        "startLine": 180,
        "endLine": 210,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .animate([String reelId] [, Number loopCount])",
                "contents": [
                    {
                        "type": "param",
                        "name": "reelId",
                        "description": "ID of the animation reel to play.  Defaults to the current reel if none is specified."
                    },
                    {
                        "type": "param",
                        "name": "loopCount",
                        "description": "Number of times to repeat the animation. Use -1 to repeat indefinitely.  Defaults to 1."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Play one of the reels previously defined through `.reel(...)`. Simply pass the name of the reel. If you wish the\nanimation to play multiple times in succession, pass in the amount of times as an additional parameter.\nTo have the animation repeat indefinitely, pass in `-1`.\n\nIf another animation is currently playing, it will be paused.\n\nThis will always play an animation from the beginning.  If you wish to resume from the current state of a reel, use `resumeAnimation()`.\n\nOnce an animation ends, it will remain at its last frame.\n\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// Define a sprite-map component\nCrafty.sprite(16, \"images/sprite.png\", {\n    PlayerSprite: [0,0]\n});\n\n// Play the animation across 20 frames (so each sprite in the 4 sprite animation should be seen for 5 frames) and repeat indefinitely\nCrafty.e(\"2D, DOM, SpriteAnimation, PlayerSprite\")\n    .reel('PlayerRunning', 20, 0, 0, 3) // setup animation\n    .animate('PlayerRunning', -1); // start animation\n```"
                    }
                ]
            }
        ],
        "name": ".animate",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/graphics/sprite-animation.js",
        "startLine": 252,
        "endLine": 259,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .resumeAnimation()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "This will resume animation of the current reel from its current state.\nIf a reel is already playing, or there is no current reel, there will be no effect."
            }
        ],
        "name": ".resumeAnimation",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/graphics/sprite-animation.js",
        "startLine": 270,
        "endLine": 276,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .pauseAnimation(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Pauses the currently playing animation, or does nothing if no animation is playing."
            }
        ],
        "name": ".pauseAnimation",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/graphics/sprite-animation.js",
        "startLine": 286,
        "endLine": 294,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .resetAnimation()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Resets the current animation to its initial state.  Resets the number of loops to the last specified value, which defaults to 1.\n\nNeither pauses nor resumes the current animation."
            }
        ],
        "name": ".resetAnimation",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/graphics/sprite-animation.js",
        "startLine": 305,
        "endLine": 316,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .loops(Number loopCount)",
                "contents": [
                    {
                        "type": "param",
                        "name": "loopCount",
                        "description": "The number of times to play the animation"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Sets the number of times the animation will loop for.\nIf called while an animation is in progress, the current state will be considered the first loop.\n"
            },
            {
                "type": "method",
                "signature": "public Number .loops()",
                "contents": [
                    {
                        "type": "return",
                        "value": "The number of loops left.  Returns 0 if no reel is active."
                    }
                ]
            }
        ],
        "name": ".loops",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/graphics/sprite-animation.js",
        "startLine": 335,
        "endLine": 353,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .reelPosition(Integer position)",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Sets the position of the current reel by frame number."
                    },
                    {
                        "type": "param",
                        "name": "position",
                        "description": "the frame to jump to.  This is zero-indexed.  A negative values counts back from the last frame."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .reelPosition(Number position)",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Sets the position of the current reel by percent progress."
                    },
                    {
                        "type": "param",
                        "name": "position",
                        "description": "a non-integer number between 0 and 1"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .reelPosition(String position)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Jumps to the specified position.  The only currently accepted value is \"end\", which will jump to the end of the reel.\n"
            },
            {
                "type": "method",
                "signature": "public Number .reelPosition()",
                "contents": [
                    {
                        "type": "return",
                        "value": "The current frame number"
                    }
                ]
            }
        ],
        "name": ".reelPosition",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/graphics/sprite-animation.js",
        "startLine": 434,
        "endLine": 449,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .isPlaying([String reelId])",
                "contents": [
                    {
                        "type": "param",
                        "name": "reelId",
                        "description": "The reelId of the reel we wish to examine"
                    },
                    {
                        "type": "return",
                        "value": "The current animation state"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Determines if the specified animation is currently playing. If no reelId is specified,\nchecks if any animation is playing.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nmyEntity.isPlaying() // is any animation playing\nmyEntity.isPlaying('PlayerRunning') // is the PlayerRunning animation playing\n```"
                    }
                ]
            }
        ],
        "name": ".isPlaying",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/graphics/sprite-animation.js",
        "startLine": 457,
        "endLine": 467,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Reel .getReel()",
                "contents": [
                    {
                        "type": "return",
                        "value": "The current reel, or null if there is no active reel"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Reel .getReel(reelId)",
                "contents": [
                    {
                        "type": "param",
                        "name": "reelId",
                        "description": "The id of the reel to fetch."
                    },
                    {
                        "type": "return",
                        "value": "The specified reel, or `undefined` if no such reel exists."
                    }
                ]
            }
        ],
        "name": ".getReel",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/graphics/sprite.js",
        "startLine": 17,
        "endLine": 68,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.sprite([Number tile, [Number tileh]], String url, Object map[, Number paddingX[, Number paddingY[, Boolean paddingAroundBorder]]])",
                "contents": [
                    {
                        "type": "param",
                        "name": "tile",
                        "description": "Tile size of the sprite map, defaults to 1"
                    },
                    {
                        "type": "param",
                        "name": "tileh",
                        "description": "Height of the tile; if provided, tile is interpreted as the width"
                    },
                    {
                        "type": "param",
                        "name": "url",
                        "description": "URL of the sprite image"
                    },
                    {
                        "type": "param",
                        "name": "map",
                        "description": "Object where the key is what becomes a new component and the value points to a position on the sprite map"
                    },
                    {
                        "type": "param",
                        "name": "paddingX",
                        "description": "Horizontal space in between tiles. Defaults to 0."
                    },
                    {
                        "type": "param",
                        "name": "paddingY",
                        "description": "Vertical space in between tiles. Defaults to paddingX."
                    },
                    {
                        "type": "param",
                        "name": "paddingAroundBorder",
                        "description": "If padding should be applied around the border of the sprite sheet. If enabled the first tile starts at (paddingX,paddingY) instead of (0,0). Defaults to false."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Generates components based on positions in a sprite image to be applied to entities.\n\nAccepts a tile size, URL and map for the name of the sprite and its position.\n\nThe position must be an array containing the position of the sprite where index `0`\nis the `x` position, `1` is the `y` position and optionally `2` is the width and `3`\nis the height. If the sprite map has padding, pass the values for the `x` padding\nor `y` padding. If they are the same, just add one value.\n\nIf the sprite image has no consistent tile size, `1` or no argument need be\npassed for tile size.\n\nEntities that add the generated components are also given the `2D` component, and\na component called `Sprite`.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.sprite(\"imgs/spritemap6.png\", {flower:[0,0,20,30]});\nvar flower_entity = Crafty.e(\"2D, DOM, flower\");\n```\nThe first line creates a component called `flower` associated with the sub-image of\nspritemap6.png with top-left corner (0,0), width 20 pixels, and height 30 pixels.\nThe second line creates an entity with that image. (Note: The `2D` is not really\nnecessary here, because adding the `flower` component automatically also adds the\n`2D` component.)\n```\nCrafty.sprite(50, \"imgs/spritemap6.png\", {flower:[0,0], grass:[0,1,3,1]});\n```\nIn this case, the `flower` component is pixels 0 <= x < 50, 0 <= y < 50, and the\n`grass` component is pixels 0 <= x < 150, 50 <= y < 100. (The `3` means grass has a\nwidth of 3 tiles, i.e. 150 pixels.)\n```\nCrafty.sprite(50, 100, \"imgs/spritemap6.png\", {flower:[0,0], grass:[0,1]}, 10);\n```\nIn this case, each tile is 50x100, and there is a spacing of 10 pixels between\nconsecutive tiles. So `flower` is pixels 0 <= x < 50, 0 <= y < 100, and `grass` is\npixels 0 <= x < 50, 110 <= y < 210.\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Sprite"
                ]
            }
        ],
        "name": "Crafty.sprite",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/sprite.js",
        "startLine": 160,
        "endLine": 171,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "description": "when the sprites change",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "A component for using tiles in a sprite map.\n\nThis is automatically added to entities which use the components created by `Crafty.sprite` or `Crafty.load`.\nSince these are also used to define tile size, you'll rarely need to use this components methods directly.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.sprite",
                    "Crafty.load"
                ]
            }
        ],
        "name": "Sprite",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/sprite.js",
        "startLine": 256,
        "endLine": 274,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .sprite(Number x, Number y[, Number w, Number h])",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X cell position"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y cell position"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "Width in cells. Optional."
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "Height in cells. Optional."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Uses a new location on the sprite map as its sprite. If w or h are ommitted, the width and height are not changed.\n\nValues should be in tiles or cells (not pixels).\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Sprite\")\n  .sprite(0, 0, 2, 2);\n```"
                    }
                ]
            }
        ],
        "name": ".sprite",
        "comp": "Sprite"
    },
    {
        "file": "src/graphics/sprite.js",
        "startLine": 276,
        "endLine": 281,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The coordinate of the slide within the sprite in the format of [x, y, w, h]."
            }
        ],
        "name": ".__coord",
        "comp": "Sprite"
    },
    {
        "file": "src/graphics/sprite.js",
        "startLine": 296,
        "endLine": 314,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .crop(Number x, Number y, Number w, Number h)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "Offset x position"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Offset y position"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "New width"
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "New height"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "If the entity needs to be smaller than the tile size, use this method to crop it.\n\nThe values should be in pixels rather than tiles.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Sprite\")\n  .crop(40, 40, 22, 23);\n```"
                    }
                ]
            }
        ],
        "name": ".crop",
        "comp": "Sprite"
    },
    {
        "file": "src/graphics/text.js",
        "startLine": 4,
        "endLine": 26,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "description": "when the text is changed",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "By default, text will have the style \"10px sans-serif\".\n"
            },
            {
                "type": "note",
                "value": "An entity with the text component is just text! If you want to write text inside an image, you need one entity for the text and another entity for the image. More tips for writing text inside an image: (1) Use the z-index (from 2D component) to ensure that the text is on top of the image, not the other way around; (2) use .attach() (from 2D component) to glue the text to the image so they move and rotate together."
            },
            {
                "type": "note",
                "value": "For DOM (but not canvas) text entities, various font settings (like text-decoration and text-align) can be set using `.css()` (see DOM component). But you cannot use `.css()` to set the properties which are controlled by `.textFont()` or `.textColor()` -- the settings will be ignored."
            },
            {
                "type": "note",
                "value": "If you use canvas text with glyphs that are taller than standard letters, portions of the glyphs might be cut off."
            }
        ],
        "name": "Text",
        "categories": [
            "Graphics"
        ],
        "requires": "Canvas or DOM Component to make a text entity."
    },
    {
        "file": "src/graphics/text.js",
        "startLine": 98,
        "endLine": 124,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .text(String text)",
                "contents": [
                    {
                        "type": "param",
                        "name": "text",
                        "description": "String of text that will be inserted into the DOM or Canvas element."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .text(Function textGenerator)",
                "contents": [
                    {
                        "type": "param",
                        "name": "textGenerator",
                        "description": "A function that returns a string.        It will be immediately invoked in the context of the entity, with the result used as the text to display."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This method will update the text inside the entity.\n\nIf you need to reference attributes on the entity itself you can pass a function instead of a string.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Text\").attr({ x: 100, y: 100 }).text(\"Look at me!!\");\n\nCrafty.e(\"2D, DOM, Text\").attr({ x: 100, y: 100 })\n    .text(function () { return \"My position is \" + this._x });\n\nCrafty.e(\"2D, Canvas, Text\").attr({ x: 100, y: 100 }).text(\"Look at me!!\");\n\nCrafty.e(\"2D, Canvas, Text\").attr({ x: 100, y: 100 })\n    .text(function () { return \"My position is \" + this._x });\n```"
                    }
                ]
            }
        ],
        "name": ".text",
        "comp": "Text"
    },
    {
        "file": "src/graphics/text.js",
        "startLine": 155,
        "endLine": 177,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .textColor(String color)",
                "contents": [
                    {
                        "type": "param",
                        "name": "color",
                        "description": "The color in name, hex, rgb or rgba"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Change the color of the text. You can use HEX, rgb and rgba colors.\n\nIf you want the text to be transparent, you should use rgba where you can define alphaChannel.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Text\").attr({ x: 100, y: 100 }).text(\"Look at me!!\")\n  .textColor('#FF0000');\n\nCrafty.e(\"2D, Canvas, Text\").attr({ x: 100, y: 100 }).text('Look at me!!')\n  .textColor('rgba(0, 255, 0, 0.5)');\n\nCrafty.e(\"2D, Canvas, Text\").attr({ x: 100, y: 100 }).text('Look at me!!')\n  .textColor('white');\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.assignColor"
                ]
            }
        ],
        "name": ".textColor",
        "comp": "Text"
    },
    {
        "file": "src/graphics/text.js",
        "startLine": 185,
        "endLine": 208,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .textFont(String key, * value)",
                "contents": [
                    {
                        "type": "param",
                        "name": "key",
                        "description": "Property of the entity to modify"
                    },
                    {
                        "type": "param",
                        "name": "value",
                        "description": "Value to set the property to"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .textFont(Object map)",
                "contents": [
                    {
                        "type": "param",
                        "name": "map",
                        "description": "Object where the key is the property to modify and the value as the property value"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Use this method to set font property of the text entity.  Possible values are: type, weight, size, family, lineHeight, and variant.\n\nWhen rendered by the canvas, lineHeight and variant will be ignored.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Text\").textFont({ type: 'italic', family: 'Arial' });\nCrafty.e(\"2D, Canvas, Text\").textFont({ size: '20px', weight: 'bold' });\n\nCrafty.e(\"2D, Canvas, Text\").textFont(\"type\", \"italic\");\nCrafty.e(\"2D, Canvas, Text\").textFont(\"type\"); // italic\n```"
                    }
                ]
            }
        ],
        "name": ".textFont",
        "comp": "Text"
    },
    {
        "file": "src/graphics/text.js",
        "startLine": 235,
        "endLine": 251,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .unselectable()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "This method sets the text so that it cannot be selected (highlighted) by dragging.\n(Canvas text can never be highlighted, so this only matters for DOM text.)\nWorks by changing the css property \"user-select\" and its variants.\n\nLikewise, this sets the mouseover cursor to be \"default\" (arrow), not \"text\" (I-beam)\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Text\").text('This text cannot be highlighted!').unselectable();\n```"
                    }
                ]
            }
        ],
        "name": ".unselectable",
        "comp": "Text"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 5,
        "endLine": 43,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "ViewportScroll",
                        "description": "when the viewport's x or y coordinates change",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "ViewportScale",
                        "description": "when the viewport's scale changes",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "ViewportResize",
                        "description": "when the viewport's dimension's change",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "InvalidateViewport",
                        "description": "when the viewport changes",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "StopCamera",
                        "description": "when any camera animations should stop, such as at the start of a new animation.",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "CameraAnimationDone",
                        "description": "when a camera animation reaches completion",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Viewport is essentially a 2D camera looking at the stage. Can be moved or zoomed, which\nin turn will react just like a camera moving in that direction.\n\nThere are multiple camera animation methods available - these are the viewport methods with an animation time parameter and the `follow` method.\nOnly one animation can run at a time. Starting a new animation will cancel the previous one and the appropriate events will be fired.\n\nTip: At any given moment, the stuff that you can see is...\n\n`x` between `(-Crafty.viewport._x)` and `(-Crafty.viewport._x + (Crafty.viewport._width / Crafty.viewport._scale))`\n\n`y` between `(-Crafty.viewport._y)` and `(-Crafty.viewport._y + (Crafty.viewport._height / Crafty.viewport._scale))`\n\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Prevent viewport from adjusting itself when outside the game world.\nScale the viewport so that entities appear twice as large.\nThen center the viewport on an entity over the duration of 3 seconds.\nAfter that animation finishes, start following the entity.\n```\nvar ent = Crafty.e('2D, DOM').attr({x: 250, y: 250, w: 100, h: 100});\n\nCrafty.viewport.clampToEntities = false;\nCrafty.viewport.scale(2);\nCrafty.one(\"CameraAnimationDone\", function() {\n    Crafty.viewport.follow(ent, 0, 0);\n});\nCrafty.viewport.centerOn(ent, 3000);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.viewport",
        "categories": [
            "Stage"
        ]
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 45,
        "endLine": 53,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Decides if the viewport functions should clamp to game entities.\nWhen set to `true` functions such as Crafty.viewport.mouselook() will not allow you to move the\nviewport over areas of the game that has no entities.\nFor development it can be useful to set this to false."
            }
        ],
        "name": "Crafty.viewport.clampToEntities",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 57,
        "endLine": 67,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Will move the stage and therefore every visible entity along the `x`\naxis in the opposite direction.\n\nWhen this value is set, it will shift the entire stage. This means that entity\npositions are not exactly where they are on screen. To get the exact position,\nsimply add `Crafty.viewport.x` onto the entities `x` position."
            }
        ],
        "name": "Crafty.viewport.x",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 69,
        "endLine": 79,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Will move the stage and therefore every visible entity along the `y`\naxis in the opposite direction.\n\nWhen this value is set, it will shift the entire stage. This means that entity\npositions are not exactly where they are on screen. To get the exact position,\nsimply add `Crafty.viewport.y` onto the entities `y` position."
            }
        ],
        "name": "Crafty.viewport.y",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 82,
        "endLine": 92,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "This value is the current scale (zoom) of the viewport. When the value is bigger than 1, everything\nlooks bigger (zoomed in). When the value is less than 1, everything looks smaller (zoomed out). This\ndoes not alter the size of the stage itself, just the magnification of what it shows.\n\nThis is a read-only property: Do not set it directly. Instead, use `Crafty.viewport.scale(...)`\nor `Crafty.viewport.zoom(...)`"
            }
        ],
        "name": "Crafty.viewport._scale",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 96,
        "endLine": 117,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A rectangle which defines the bounds of the viewport.\nIt should be an object with two properties, `max` and `min`,\nwhich are each an object with `x` and `y` properties.\n\nIf this property is null, Crafty uses the bounding box of all the items\non the stage.  This is the initial value.  (To prevent this behavior, set `Crafty.viewport.clampToEntities` to `false`)\n\nIf you wish to bound the viewport along one axis but not the other, you can use `-Infinity` and `+Infinity` as bounds.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.viewport.clampToEntities"
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Set the bounds to a 500 by 500 square:\n\n```\nCrafty.viewport.bounds = {min:{x:0, y:0}, max:{x:500, y:500}};\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.viewport.bounds",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 120,
        "endLine": 136,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "Crafty.viewport.scroll(String axis, Number val)",
                "contents": [
                    {
                        "type": "param",
                        "name": "axis",
                        "description": "'x' or 'y'"
                    },
                    {
                        "type": "param",
                        "name": "val",
                        "description": "The new absolute position on the axis"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Will move the viewport to the position given on the specified axis\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Will move the camera 500 pixels right of its initial position, in effect\nshifting everything in the viewport 500 pixels to the left.\n\n```\nCrafty.viewport.scroll('_x', 500);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.viewport.scroll",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 153,
        "endLine": 170,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.viewport.pan(Number dx, Number dy, Number time[, String|function easingFn])",
                "contents": [
                    {
                        "type": "param",
                        "name": "Number dx",
                        "description": "The distance along the x axis"
                    },
                    {
                        "type": "param",
                        "name": "Number dy",
                        "description": "The distance along the y axis"
                    },
                    {
                        "type": "param",
                        "name": "Number time",
                        "description": "The duration in ms for the entire camera movement"
                    },
                    {
                        "type": "param",
                        "name": "easingFn",
                        "description": "A string or custom function specifying an easing.  (Defaults to linear behavior.)  See Crafty.easing for more information."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Pans the camera a given number of pixels over the specified time\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// pan the camera 100 px right and down over the duration of 2 seconds using linear easing behaviour\nCrafty.viewport.pan(100, 100, 2000);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.viewport.pan",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 216,
        "endLine": 232,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.viewport.follow(Object target, Number offsetx, Number offsety)",
                "contents": [
                    {
                        "type": "param",
                        "name": "Object target",
                        "description": "An entity with the 2D component"
                    },
                    {
                        "type": "param",
                        "name": "Number offsetx",
                        "description": "Follow target's center should be offsetx pixels away from viewport's center. Positive values puts target to the right of the screen."
                    },
                    {
                        "type": "param",
                        "name": "Number offsety",
                        "description": "Follow target's center should be offsety pixels away from viewport's center. Positive values puts target to the bottom of the screen."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Follows a given entity with the 2D component. If following target will take a portion of\nthe viewport out of bounds of the world, following will stop until the target moves away.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e('2D, DOM').attr({w: 100, h: 100});\nCrafty.viewport.follow(ent, 0, 0);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.viewport.follow",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 269,
        "endLine": 283,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.viewport.centerOn(Object target, Number time)",
                "contents": [
                    {
                        "type": "param",
                        "name": "Object target",
                        "description": "An entity with the 2D component"
                    },
                    {
                        "type": "param",
                        "name": "Number time",
                        "description": "The duration in ms of the camera motion"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Centers the viewport on the given entity.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e('2D, DOM').attr({x: 250, y: 250, w: 100, h: 100});\nCrafty.viewport.centerOn(ent, 3000);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.viewport.centerOn",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 297,
        "endLine": 316,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.viewport.zoom(Number amt, Number cent_x, Number cent_y, Number time[, String|function easingFn])",
                "contents": [
                    {
                        "type": "param",
                        "name": "Number amt",
                        "description": "amount to zoom in on the target by (eg. 2, 4, 0.5)"
                    },
                    {
                        "type": "param",
                        "name": "Number cent_x",
                        "description": "the center to zoom on"
                    },
                    {
                        "type": "param",
                        "name": "Number cent_y",
                        "description": "the center to zoom on"
                    },
                    {
                        "type": "param",
                        "name": "Number time",
                        "description": "the duration in ms of the entire zoom operation"
                    },
                    {
                        "type": "param",
                        "name": "easingFn",
                        "description": "A string or custom function specifying an easing.  (Defaults to linear behavior.)  See Crafty.easing for more information."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Zooms the camera in on a given point. amt > 1 will bring the camera closer to the subject\namt < 1 will bring it farther away. amt = 0 will reset to the default zoom level\nZooming is multiplicative. To reset the zoom amount, pass 0.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// Make the entities appear twice as large by zooming in on the specified coordinates over the duration of 3 seconds using linear easing behavior\nCrafty.viewport.zoom(2, 100, 100, 3000);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.viewport.zoom",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 393,
        "endLine": 414,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.viewport.scale(Number amt)",
                "contents": [
                    {
                        "type": "param",
                        "name": "Number amt",
                        "description": "amount to zoom/scale in on the elements"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Adjusts the scale (zoom). When `amt` is 1, it is set to the normal scale,\ne.g. an entity with `this.w == 20` would appear exactly 20 pixels wide.\nWhen `amt` is 10, that same entity would appear 200 pixels wide (i.e., zoomed in\nby a factor of 10), and when `amt` is 0.1, that same entity would be 2 pixels wide\n(i.e., zoomed out by a factor of `(1 / 0.1)`).\n\nIf you pass an `amt` of 0, it is treated the same as passing 1, i.e. the scale is reset.\n\nThis method sets the absolute scale, while `Crafty.viewport.zoom` sets the scale relative to the existing value."
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.viewport.zoom"
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.viewport.scale(2); // Zoom in -- all entities will appear twice as large.\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.viewport.scale",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 423,
        "endLine": 434,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.viewport.mouselook(Boolean active)",
                "contents": [
                    {
                        "type": "param",
                        "name": "Boolean active",
                        "description": "Activate or deactivate mouselook"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Toggle mouselook on the current viewport.\nSimply call this function and the user will be able to\ndrag the viewport around.\n\nIf the user starts a drag, \"StopCamera\" will be triggered, which will cancel any existing camera animations."
            }
        ],
        "name": "Crafty.viewport.mouselook",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 513,
        "endLine": 527,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.viewport.init([Number width, Number height, String stage_elem])",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public void Crafty.viewport.init([Number width, Number height, HTMLElement stage_elem])",
                "contents": [
                    {
                        "type": "param",
                        "name": "Number width",
                        "description": "Width of the viewport"
                    },
                    {
                        "type": "param",
                        "name": "Number height",
                        "description": "Height of the viewport"
                    },
                    {
                        "type": "param",
                        "name": "String or HTMLElement stage_elem",
                        "description": "the element to use as the stage (either its id or the actual element)."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Initialize the viewport. If the arguments 'width' or 'height' are missing, use `window.innerWidth` and `window.innerHeight` (full screen model).\n\nThe argument 'stage_elem' is used to specify a stage element other than the default, and can be either a string or an HTMLElement.  If a string is provided, it will look for an element with that id and, if none exists, create a div.  If an HTMLElement is provided, that is used directly.  Omitting this argument is the same as passing an id of 'cr-stage'.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.device",
                    "Crafty.domHelper",
                    "Crafty.stage"
                ]
            }
        ],
        "name": "Crafty.viewport.init",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 554,
        "endLine": 558,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The stage where all the DOM entities will be placed."
            }
        ],
        "name": "Crafty.stage",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 560,
        "endLine": 564,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The `#cr-stage` div element."
            }
        ],
        "name": "Crafty.stage.elem",
        "comp": "Crafty.stage"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 566,
        "endLine": 578,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "`Crafty.domLayer._div` is a div inside the `#cr-stage` div that holds all DOM entities.\nIf you use canvas, a `canvas` element is created at the same level in the dom\nas the the `Crafty.domLayer._div` div. So the hierarchy in the DOM is\n\n```\nCrafty.stage.elem\n - Crafty.domLayer._div (a div HTMLElement)\n - Crafty.canvasLayer._canvas (a canvas HTMLElement)\n```"
            }
        ],
        "name": "Crafty.domLayer._div",
        "comp": "Crafty.domLayer"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 727,
        "endLine": 737,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.viewport.reload()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Recalculate and reload stage width, height and position.\nUseful when browser return wrong results on init (like safari on Ipad2).\nYou should also call this method if you insert custom DOM elements that affect Crafty's stage offset.\n"
            }
        ],
        "name": "Crafty.viewport.reload",
        "comp": "Crafty.stage"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 755,
        "endLine": 764,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "StopCamera",
                        "description": "called to cancel camera animations",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Crafty.viewport.reset()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Resets the viewport to starting values, and cancels any existing camera animations.\nCalled when scene() is run."
            }
        ],
        "name": "Crafty.viewport.reset",
        "comp": "Crafty.stage"
    },
    {
        "file": "src/graphics/viewport.js",
        "startLine": 774,
        "endLine": 781,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.viewport.onScreen(Object rect)",
                "contents": [
                    {
                        "type": "param",
                        "name": "rect",
                        "description": "A rectangle with field {_x: x_val, _y: y_val, _w: w_val, _h: h_val}"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Test if a rectangle is completely in viewport"
            }
        ],
        "name": "Crafty.viewport.onScreen",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/graphics/webgl.js",
        "startLine": 175,
        "endLine": 195,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Draw",
                        "description": "when the entity is ready to be drawn to the stage",
                        "objName": "Data",
                        "objProp": "{type: \"canvas\", pos, co, ctx}"
                    },
                    {
                        "type": "trigger",
                        "event": "NoCanvas",
                        "description": "if the browser does not support canvas",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "When this component is added to an entity it will be drawn to the global webgl canvas element. Its canvas element (and hence any WebGL entity) is always rendered below any DOM entities.\n\nSprite, Image, SpriteAnimation, and Color all support WebGL rendering.  Text entities will need to use DOM or Canvas for now.\n\nIf a webgl context does not yet exist, a WebGL entity will automatically create one by calling `Crafty.webgl.init()` before rendering.\n"
            },
            {
                "type": "note",
                "value": "For better performance, minimize the number of spritesheets used, and try to arrange it so that entities with different spritesheets are on different z-levels.  This is because entities are rendered in z order, and only entities sharing the same texture can be efficiently batched."
            },
            {
                "type": "raw",
                "value": "Create a webgl entity like this\n```\nvar myEntity = Crafty.e(\"2D, WebGL, Color\")\n     .color(1, 1, 0, 0.5)\n     .attr({x: 13, y: 37, w: 42, h: 42});\n```"
            }
        ],
        "name": "WebGL",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/webgl.js",
        "startLine": 198,
        "endLine": 203,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The webgl context this entity will be rendered to."
            }
        ],
        "name": ".context",
        "comp": "WebGL"
    },
    {
        "file": "src/graphics/webgl.js",
        "startLine": 242,
        "endLine": 253,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .draw([[Context ctx, ]Number x, Number y, Number w, Number h])",
                "contents": [
                    {
                        "type": "param",
                        "name": "ctx",
                        "description": "Optionally supply a different r 2D context if drawing on another canvas is required"
                    },
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X offset for drawing a segment"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y offset for drawing a segment"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "Width of the segment to draw"
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "Height of the segment to draw"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "An internal method to draw the entity on the webgl canvas element. Rather then rendering directly, it writes relevent information into a buffer to allow batch rendering."
            }
        ],
        "name": ".draw",
        "comp": "WebGL"
    },
    {
        "file": "src/graphics/webgl.js",
        "startLine": 338,
        "endLine": 343,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A collection of methods to handle webgl contexts."
            }
        ],
        "name": "Crafty.webgl",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/graphics/webgl.js",
        "startLine": 347,
        "endLine": 352,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "This will return the context of the webgl canvas element."
            }
        ],
        "name": "Crafty.webgl.context",
        "comp": "Crafty.webgl"
    },
    {
        "file": "src/graphics/webgl.js",
        "startLine": 422,
        "endLine": 432,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.webgl.init(void)",
                "contents": []
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NoWebGL",
                        "description": "triggered if `Crafty.support.webgl` is false",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This will create a `canvas` element inside `Crafty.stage.elem`, used for displaying \"WebGL\" components.\n\nThis method will automatically be called by any \"WebGL\" component if no `Crafty.webgl.context` is\nfound, so it is not neccessary to call this manually."
            }
        ],
        "name": "Crafty.webgl.init",
        "comp": "Crafty.webgl"
    },
    {
        "file": "src/isometric/diamond-iso.js",
        "startLine": 5,
        "endLine": 11,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Place entities in a 45deg diamond isometric fashion. It is similar to isometric but has another grid locations\nIn this mode, the x axis and y axis are aligned to the edges of tiles with x increasing being down and to the\nright and y being down and to the left."
            }
        ],
        "name": "Crafty.diamondIso",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/isometric/diamond-iso.js",
        "startLine": 32,
        "endLine": 53,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.diamondIso.init(Number tileWidth,Number tileHeight,Number mapWidth,Number mapHeight)",
                "contents": [
                    {
                        "type": "param",
                        "name": "tileWidth",
                        "description": "The size of base tile width's grid space in Pixel"
                    },
                    {
                        "type": "param",
                        "name": "tileHeight",
                        "description": "The size of base tile height grid space in Pixel"
                    },
                    {
                        "type": "param",
                        "name": "mapWidth",
                        "description": "The width of whole map in Tiles"
                    },
                    {
                        "type": "param",
                        "name": "mapHeight",
                        "description": "The height of whole map in Tiles"
                    },
                    {
                        "type": "param",
                        "name": "x",
                        "description": "the x coordinate of the TOP corner of the 0,0 tile"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "the y coordinate of the TOP corner of the 0,0, tile"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Method used to initialize the size of the isometric placement.\nRecommended to use a size alues in the power of `2` (128, 64 or 32).\nThis makes it easy to calculate positions and implement zooming.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.diamondIso.init(64,128,20,20);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.diamondIso.place"
                ]
            }
        ],
        "name": "Crafty.diamondIso.init",
        "comp": "Crafty.diamondIso"
    },
    {
        "file": "src/isometric/diamond-iso.js",
        "startLine": 72,
        "endLine": 90,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.diamondIso.place(Entity tile,Number x, Number y, Number layer)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "The `x` position to place the tile"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "The `y` position to place the tile"
                    },
                    {
                        "type": "param",
                        "name": "layer",
                        "description": "The `z` position to place the tile"
                    },
                    {
                        "type": "param",
                        "name": "tile",
                        "description": "The entity that should be position in the isometric fashion"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Use this method to place an entity in an isometric grid.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.diamondIso.init(64,128,20,20);\nisos.place(Crafty.e('2D, DOM, Color').color('red').attr({w:128, h:128}),1,1,2);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.diamondIso.size"
                ]
            }
        ],
        "name": "Crafty.diamondIso.place",
        "comp": "Crafty.diamondIso"
    },
    {
        "file": "src/isometric/isometric.js",
        "startLine": 5,
        "endLine": 12,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Place entities in a 45deg isometric fashion. The alignment of this\ngrid's axes for tile placement is 90 degrees.  If you are looking\nto have the grid of tile indicies for this.place aligned to the tiles\nthemselves, use DiamondIso instead."
            }
        ],
        "name": "Crafty.isometric",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/isometric/isometric.js",
        "startLine": 24,
        "endLine": 40,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.isometric.size(Number tileSize)",
                "contents": [
                    {
                        "type": "param",
                        "name": "tileSize",
                        "description": "The size of the tiles to place."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Method used to initialize the size of the isometric placement.\nRecommended to use a size values in the power of `2` (128, 64 or 32).\nThis makes it easy to calculate positions and implement zooming.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.isometric.size(128);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.isometric.place"
                ]
            }
        ],
        "name": "Crafty.isometric.size",
        "comp": "Crafty.isometric"
    },
    {
        "file": "src/isometric/isometric.js",
        "startLine": 46,
        "endLine": 64,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.isometric.place(Number x, Number y, Number z, Entity tile)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "The `x` position to place the tile"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "The `y` position to place the tile"
                    },
                    {
                        "type": "param",
                        "name": "z",
                        "description": "The `z` position or height to place the tile"
                    },
                    {
                        "type": "param",
                        "name": "tile",
                        "description": "The entity that should be position in the isometric fashion"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Use this method to place an entity in an isometric grid.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.isometric.size(128);\niso.place(2, 1, 0, Crafty.e('2D, DOM, Color').color('red').attr({w:128, h:128}));\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.isometric.size"
                ]
            }
        ],
        "name": "Crafty.isometric.place",
        "comp": "Crafty.isometric"
    },
    {
        "file": "src/isometric/isometric.js",
        "startLine": 74,
        "endLine": 89,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.isometric.pos2px(Number x,Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "A position along the x axis"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "A position along the y axis"
                    },
                    {
                        "type": "return",
                        "value": "An object with `left` and `top` fields {left Number,top Number}"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This method converts a position in x and y coordinates to one in pixels\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.isometric.size(128,96);\nvar position = iso.pos2px(100,100); //Object { left=12800, top=4800}\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.isometric.pos2px",
        "comp": "Crafty.isometric"
    },
    {
        "file": "src/isometric/isometric.js",
        "startLine": 96,
        "endLine": 112,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.isometric.px2pos(Number left,Number top)",
                "contents": [
                    {
                        "type": "param",
                        "name": "top",
                        "description": "Offset from the top in pixels"
                    },
                    {
                        "type": "param",
                        "name": "left",
                        "description": "Offset from the left in pixels"
                    },
                    {
                        "type": "return",
                        "value": "An object with `x` and `y` fields representing the position"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This method converts a position in pixels to x,y coordinates\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.isometric.size(128,96);\nvar px = iso.pos2px(12800,4800);\nCrafty.log(px); //Object { x=100, y=100}\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.isometric.px2pos",
        "comp": "Crafty.isometric"
    },
    {
        "file": "src/isometric/isometric.js",
        "startLine": 119,
        "endLine": 138,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Obect Crafty.isometric.centerAt()",
                "contents": [
                    {
                        "type": "return",
                        "value": "An object with `top` and `left` fields represneting the viewport's current center"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this Crafty.isometric.centerAt(Number x, Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "The x position to center at"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "The y position to center at"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This method centers the Viewport at an `x,y` location or gives the current centerpoint of the viewport\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.isometric.size(128,96).centerAt(10,10); //Viewport is now moved\n//After moving the viewport by another event you can get the new center point\nCrafty.log(iso.centerAt());\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.isometric.centerAt",
        "comp": "Crafty.isometric"
    },
    {
        "file": "src/isometric/isometric.js",
        "startLine": 152,
        "endLine": 171,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.isometric.area()",
                "contents": [
                    {
                        "type": "return",
                        "value": "An obect with `x` and `y` fields, each of which have a start and end field. In other words, the object has this structure: `{x:{start Number,end Number},y:{start Number,end Number}}`"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This method returns an object representing the bounds of the viewport\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.isometric.size(128,96).centerAt(10,10); //Viewport is now moved\nvar area = iso.area(); //get the area\nfor(var y = area.y.start;y <= area.y.end;y++){\n  for(var x = area.x.start ;x <= area.x.end;x++){\n      iso.place(x,y,0,Crafty.e(\"2D,DOM,gras\")); //Display tiles in the Screen\n  }\n}\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.isometric.area",
        "comp": "Crafty.isometric"
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 5,
        "endLine": 16,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Add sound files and play them. Chooses best format for browser support.\nDue to the nature of HTML5 audio, three types of audio files will be\nrequired for cross-browser capabilities. These formats are MP3, Ogg and WAV.\nWhen sound was not muted on before pause, sound will be unmuted after unpause.\nWhen sound is muted Crafty.pause() does not have any effect on sound\n\nThe maximum number of sounds that can be played simultaneously is defined by Crafty.audio.maxChannels.  The default value is 7."
            }
        ],
        "name": "Crafty.audio",
        "categories": [
            "Audio"
        ]
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 53,
        "endLine": 60,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.supports(String extension)",
                "contents": [
                    {
                        "type": "param",
                        "name": "extension",
                        "description": "A file extension to check audio support for"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Return true if the browser thinks it can play the given file type, otherwise false"
            }
        ],
        "name": "Crafty.audio.supports",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 80,
        "endLine": 90,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.create(String id, String url)",
                "contents": [
                    {
                        "type": "param",
                        "name": "id",
                        "description": "A string to refer to sounds"
                    },
                    {
                        "type": "param",
                        "name": "url",
                        "description": "A string pointing to the sound file"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Creates an audio asset with the given id and resource.  `Crafty.audio.add` is a more flexible interface that allows cross-browser compatibility.\n\nIf the sound file extension is not supported, returns false; otherwise, returns the audio asset."
            }
        ],
        "name": "Crafty.audio.create",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 115,
        "endLine": 156,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.add(String id, String url)",
                "contents": [
                    {
                        "type": "param",
                        "name": "id",
                        "description": "A string to refer to sounds"
                    },
                    {
                        "type": "param",
                        "name": "url",
                        "description": "A string pointing to the sound file"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this Crafty.audio.add(String id, Array urls)",
                "contents": [
                    {
                        "type": "param",
                        "name": "urls",
                        "description": "Array of urls pointing to different format of the same sound, selecting the first that is playable"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this Crafty.audio.add(Object map)",
                "contents": [
                    {
                        "type": "param",
                        "name": "map",
                        "description": "key-value pairs where the key is the `id` and the value is either a `url` or `urls`"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Loads a sound to be played. Due to the nature of HTML5 audio,\nthree types of audio files will be required for cross-browser capabilities.\nThese formats are MP3, Ogg and WAV.\n\nPassing an array of URLs will determine which format the browser can play and select it over any other.\n\nAccepts an object where the key is the audio name and\neither a URL or an Array of URLs (to determine which type to use).\n\nThe ID you use will be how you refer to that sound when using `Crafty.audio.play`.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n//adding audio from an object\nCrafty.audio.add({\n  shoot: [\"sounds/shoot.wav\",\n          \"sounds/shoot.mp3\",\n          \"sounds/shoot.ogg\"]\n});\n\n//adding a single sound\nCrafty.audio.add(\"walk\", [\n\"sounds/walk.mp3\",\n\"sounds/walk.ogg\",\n\"sounds/walk.wav\"\n]);\n\n//only one format\nCrafty.audio.add(\"jump\", \"sounds/jump.mp3\");\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.add",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 190,
        "endLine": 214,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.play(String id)",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public this Crafty.audio.play(String id, Number repeatCount)",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public this Crafty.audio.play(String id, Number repeatCount, Number volume)",
                "contents": [
                    {
                        "type": "param",
                        "name": "id",
                        "description": "A string to refer to sounds"
                    },
                    {
                        "type": "param",
                        "name": "repeatCount",
                        "description": "Repeat count for the file, where -1 stands for repeat forever."
                    },
                    {
                        "type": "param",
                        "name": "volume",
                        "description": "volume can be a number between 0.0 and 1.0"
                    },
                    {
                        "type": "return",
                        "value": "The audio element used to play the sound.  Null if the call failed due to a lack of open channels."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Will play a sound previously added by using the ID that was used in `Crafty.audio.add`.\nHas a default maximum of 5 channels so that the same sound can play simultaneously unless all of the channels are playing.\n\n*Note that the implementation of HTML5 Audio is buggy at best.*\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.audio.play(\"walk\");\n\n//play and repeat forever\nCrafty.audio.play(\"backgroundMusic\", -1);\nCrafty.audio.play(\"explosion\",1,0.5); //play sound once with volume of 50%\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.play",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 260,
        "endLine": 265,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.setChannels(Number n)",
                "contents": [
                    {
                        "type": "param",
                        "name": "n",
                        "description": "The maximum number of channels"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.setChannels",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 305,
        "endLine": 320,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.remove([String id])",
                "contents": [
                    {
                        "type": "param",
                        "name": "id",
                        "description": "A string to refer to sounds"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Will stop the sound and remove all references to the audio object allowing the browser to free the memory.\nIf no id is given, all sounds will be removed.\n\nThis function uses audio path set in Crafty.path in order to remove sound from the assets object.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.audio.remove(\"walk\");\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.remove",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 348,
        "endLine": 361,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.stop([Number ID])",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Stops any playing sound. if id is not set, stop all sounds which are playing\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n//all sounds stopped playing now\nCrafty.audio.stop();\n\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.stop",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 391,
        "endLine": 404,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.toggleMute()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Mute or unmute every Audio instance that is playing. Toggles between\npausing or playing depending on the state.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n//toggle mute and unmute depending on current state\nCrafty.audio.toggleMute();\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.toggleMute",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 413,
        "endLine": 424,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.mute()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Mute every Audio instance that is playing.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.audio.mute();\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.mute",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 428,
        "endLine": 439,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.unmute()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Unmute every Audio instance that is playing.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.audio.unmute();\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.unmute",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 444,
        "endLine": 457,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.pause(string ID)",
                "contents": [
                    {
                        "type": "param",
                        "name": "{string} id",
                        "description": "The id of the audio object to pause"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Pause the Audio instance specified by id param.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.audio.pause('music');\n```\n"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.pause",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 470,
        "endLine": 483,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.unpause(string ID)",
                "contents": [
                    {
                        "type": "param",
                        "name": "{string} id",
                        "description": "The id of the audio object to unpause"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Resume playing the Audio instance specified by id param.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.audio.unpause('music');\n```\n"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.unpause",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 495,
        "endLine": 508,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.togglePause(string ID)",
                "contents": [
                    {
                        "type": "param",
                        "name": "{string} id",
                        "description": "The id of the audio object to pause/"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Toggle the pause status of the Audio instance specified by id param.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.audio.togglePause('music');\n```\n"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.togglePause",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound/sound.js",
        "startLine": 525,
        "endLine": 539,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean Crafty.audio.isPlaying(string ID)",
                "contents": [
                    {
                        "type": "param",
                        "name": "{string} id",
                        "description": "The id of the audio object"
                    },
                    {
                        "type": "return",
                        "value": "a Boolean indicating whether the audio is playing or not"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Check if audio with the given ID is playing or not (on at least one channel).\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar isPlaying = Crafty.audio.isPlaying('music');\n```\n"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.isPlaying",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 6,
        "endLine": 11,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Functions related with querying entities."
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.HashMap"
                ]
            }
        ],
        "name": "Crafty.map",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 19,
        "endLine": 27,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Component for any entity that has a position on the stage."
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Move",
                        "description": "when the entity has moved",
                        "objName": "Old position",
                        "objProp": "{ _x:Number, _y:Number, _w:Number, _h:Number }"
                    },
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "description": "when the entity needs to be redrawn",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "Rotate",
                        "description": "when the entity is rotated",
                        "objName": "Data",
                        "objProp": "{ cos:Number, sin:Number, deg:Number, rad:Number, o: {x:Number, y:Number}}"
                    },
                    {
                        "type": "trigger",
                        "event": "Reorder",
                        "description": "when the entity's z index has changed",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            }
        ],
        "name": "2D",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 29,
        "endLine": 36,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The `x` position on the stage. When modified, will automatically be redrawn.\nIs actually a getter/setter so when using this value for calculations and not modifying it,\nuse the `._x` property."
            },
            {
                "type": "xref",
                "xrefs": [
                    "._attr"
                ]
            }
        ],
        "name": ".x",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 38,
        "endLine": 45,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The `y` position on the stage. When modified, will automatically be redrawn.\nIs actually a getter/setter so when using this value for calculations and not modifying it,\nuse the `._y` property."
            },
            {
                "type": "xref",
                "xrefs": [
                    "._attr"
                ]
            }
        ],
        "name": ".y",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 47,
        "endLine": 56,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The width of the entity. When modified, will automatically be redrawn.\nIs actually a getter/setter so when using this value for calculations and not modifying it,\nuse the `._w` property.\n\nChanging this value is not recommended as canvas has terrible resize quality and DOM will just clip the image."
            },
            {
                "type": "xref",
                "xrefs": [
                    "._attr"
                ]
            }
        ],
        "name": ".w",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 58,
        "endLine": 67,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The height of the entity. When modified, will automatically be redrawn.\nIs actually a getter/setter so when using this value for calculations and not modifying it,\nuse the `._h` property.\n\nChanging this value is not recommended as canvas has terrible resize quality and DOM will just clip the image."
            },
            {
                "type": "xref",
                "xrefs": [
                    "._attr"
                ]
            }
        ],
        "name": ".h",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 69,
        "endLine": 82,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The `z` index on the stage. When modified, will automatically be redrawn.\nIs actually a getter/setter so when using this value for calculations and not modifying it,\nuse the `._z` property.\n\nA higher `z` value will be closer to the front of the stage. A smaller `z` value will be closer to the back.\nA global Z index is produced based on its `z` value as well as the GID (which entity was created first).\nTherefore entities will naturally maintain order depending on when it was created if same z value.\n\n`z` is required to be an integer, e.g. `z=11.2` is not allowed."
            },
            {
                "type": "xref",
                "xrefs": [
                    "._attr"
                ]
            }
        ],
        "name": ".z",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 84,
        "endLine": 105,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The rotation state of the entity, in clockwise degrees.\n`this.rotation = 0` sets it to its original orientation; `this.rotation = 10`\nsets it to 10 degrees clockwise from its original orientation;\n`this.rotation = -10` sets it to 10 degrees counterclockwise from its\noriginal orientation, etc.\n\nWhen modified, will automatically be redrawn. Is actually a getter/setter\nso when using this value for calculations and not modifying it,\nuse the `._rotation` property.\n\n`this.rotation = 0` does the same thing as `this.rotation = 360` or `720` or\n`-360` or `36000` etc. So you can keep increasing or decreasing the angle for continuous\nrotation. (Numerical errors do not occur until you get to millions of degrees.)\n\nThe default is to rotate the entity around its (initial) top-left corner; use\n`.origin()` to change that.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "._attr",
                    ".origin"
                ]
            }
        ],
        "name": ".rotation",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 107,
        "endLine": 111,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Transparency of an entity. Must be a decimal value between 0.0 being fully transparent to 1.0 being fully opaque."
            }
        ],
        "name": ".alpha",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 113,
        "endLine": 120,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "If the entity is visible or not. Accepts a true or false value.\nCan be used for optimization by setting an entities visibility to false when not needed to be drawn.\n\nThe entity will still exist and can be collided with but just won't be drawn."
            }
        ],
        "name": ".visible",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 123,
        "endLine": 127,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "When two entities overlap, the one with the larger `_globalZ` will be on top of the other."
            }
        ],
        "name": "._globalZ",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 316,
        "endLine": 332,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Extends the MBR of the entity by a specified amount.\n"
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "BoundaryOffset",
                        "description": "when the MBR offset changes",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .offsetBoundary(Number dx1, Number dy1, Number dx2, Number dy2)",
                "contents": [
                    {
                        "type": "param",
                        "name": "dx1",
                        "description": "Extends the MBR to the left by this amount"
                    },
                    {
                        "type": "param",
                        "name": "dy1",
                        "description": "Extends the MBR upward by this amount"
                    },
                    {
                        "type": "param",
                        "name": "dx2",
                        "description": "Extends the MBR to the right by this amount"
                    },
                    {
                        "type": "param",
                        "name": "dy2",
                        "description": "Extends the MBR downward by this amount"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .offsetBoundary(Number offset)",
                "contents": [
                    {
                        "type": "param",
                        "name": "offset",
                        "description": "Extend the MBR in all directions by this amount"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "You would most likely use this function to ensure that custom canvas rendering beyond the extent of the entity's normal bounds is not clipped."
            }
        ],
        "name": ".offsetBoundary",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 450,
        "endLine": 455,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Number .area(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Calculates the area of the entity"
            }
        ],
        "name": ".area",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 460,
        "endLine": 472,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .intersect(Number x, Number y, Number w, Number h)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X position of the rect"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y position of the rect"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "Width of the rect"
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "Height of the rect"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Boolean .intersect(Object rect)",
                "contents": [
                    {
                        "type": "param",
                        "name": "rect",
                        "description": "An object that must have the `_x, _y, _w, _h` values as properties"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Determines if this entity intersects a rectangle.  If the entity is rotated, its MBR is used for the test."
            }
        ],
        "name": ".intersect",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 490,
        "endLine": 502,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .within(Number x, Number y, Number w, Number h)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X position of the rect"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y position of the rect"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "Width of the rect"
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "Height of the rect"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Boolean .within(Object rect)",
                "contents": [
                    {
                        "type": "param",
                        "name": "rect",
                        "description": "An object that must have the `_x, _y, _w, _h` values as properties"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Determines if this current entity is within another rectangle."
            }
        ],
        "name": ".within",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 520,
        "endLine": 532,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .contains(Number x, Number y, Number w, Number h)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X position of the rect"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y position of the rect"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "Width of the rect"
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "Height of the rect"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Boolean .contains(Object rect)",
                "contents": [
                    {
                        "type": "param",
                        "name": "rect",
                        "description": "An object that must have the `_x, _y, _w, _h` values as properties."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Determines if the rectangle is within the current entity.  If the entity is rotated, its MBR is used for the test."
            }
        ],
        "name": ".contains",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 550,
        "endLine": 561,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object .pos([Object pos])",
                "contents": [
                    {
                        "type": "param",
                        "name": "pos",
                        "description": "an object to use as output"
                    },
                    {
                        "type": "return",
                        "value": "An object with this entity's `_x`, `_y`, `_w`, and `_h` values.          If an object is passed in, it will be reused rather than creating a new object."
                    }
                ]
            },
            {
                "type": "note",
                "value": "The keys have an underscore prefix. This is due to the x, y, w, h properties being setters and getters that wrap the underlying properties with an underscore (_x, _y, _w, _h)."
            }
        ],
        "name": ".pos",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 571,
        "endLine": 577,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object .mbr()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Returns the minimum bounding rectangle. If there is no rotation\non the entity it will return the rect."
            }
        ],
        "name": ".mbr",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 591,
        "endLine": 602,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .isAt(Number x, Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X position of the point"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y position of the point"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Determines whether a point is contained by the entity. Unlike other methods,\nan object can't be passed. The arguments require the x and y value.\n\nThe given point is tested against the first of the following that exists: a mapArea associated with \"Mouse\", the hitarea associated with \"Collision\", or the object's MBR."
            }
        ],
        "name": ".isAt",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 614,
        "endLine": 622,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .move(String dir, Number by)",
                "contents": [
                    {
                        "type": "param",
                        "name": "dir",
                        "description": "Direction to move (n,s,e,w,ne,nw,se,sw)"
                    },
                    {
                        "type": "param",
                        "name": "by",
                        "description": "Amount to move in the specified direction"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Quick method to move the entity in a direction (n, s, e, w, ne, nw, se, sw) by an amount of pixels."
            }
        ],
        "name": ".move",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 632,
        "endLine": 643,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .shift(Number x, Number y, Number w, Number h)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "Amount to move X"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Amount to move Y"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "Amount to widen"
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "Amount to increase height"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Shift or move the entity by an amount. Use negative values\nfor an opposite direction."
            }
        ],
        "name": ".shift",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 653,
        "endLine": 663,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void ._cascade(e)",
                "contents": [
                    {
                        "type": "param",
                        "name": "e",
                        "description": "An object describing the motion"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Move or rotate the entity's children according to a certain motion.\nThis method is part of a function bound to \"Move\": It is used\ninternally for ensuring that when a parent moves, the child also\nmoves in the same way."
            }
        ],
        "name": "._cascade",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 690,
        "endLine": 707,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .attach(Entity obj[, .., Entity objN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "Child entity(s) to attach"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Sets one or more entities to be children, with the current entity (`this`)\nas the parent. When the parent moves or rotates, its children move or\nrotate by the same amount. (But not vice-versa: If you move a child, it\nwill not move the parent.) When the parent is destroyed, its children are\ndestroyed.\n\nFor any entity, `this._children` is the array of its children entity\nobjects (if any), and `this._parent` is its parent entity object (if any).\n\nAs many objects as wanted can be attached, and a hierarchy of objects is\npossible by attaching."
            }
        ],
        "name": ".attach",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 725,
        "endLine": 733,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .detach([Entity obj])",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "The entity to detach. Left blank will remove all attached entities"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Stop an entity from following the current entity. Passing no arguments will stop\nevery entity attached."
            }
        ],
        "name": ".detach",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 756,
        "endLine": 778,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .origin(Number x, Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "Pixel value of origin offset on the X axis"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Pixel value of origin offset on the Y axis"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .origin(String offset)",
                "contents": [
                    {
                        "type": "param",
                        "name": "offset",
                        "description": "Combination of center, top, bottom, middle, left and right"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Set the origin point of an entity for it to rotate around.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.origin(\"top left\")\nthis.origin(\"center\")\nthis.origin(\"bottom right\")\nthis.origin(\"middle right\")\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".rotation"
                ]
            }
        ],
        "name": ".origin",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 803,
        "endLine": 816,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "description": "when the entity has flipped",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .flip(String dir)",
                "contents": [
                    {
                        "type": "param",
                        "name": "dir",
                        "description": "Flip direction"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Flip entity on passed direction\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.flip(\"X\")\n```"
                    }
                ]
            }
        ],
        "name": ".flip",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 826,
        "endLine": 839,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "description": "when the entity has unflipped",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .unflip(String dir)",
                "contents": [
                    {
                        "type": "param",
                        "name": "dir",
                        "description": "Unflip direction"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Unflip entity on passed direction (if it's flipped)\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.unflip(\"X\")\n```"
                    }
                ]
            }
        ],
        "name": ".unflip",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 861,
        "endLine": 866,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Setter method for all 2D properties including\nx, y, w, h, alpha, rotation and visible."
            }
        ],
        "name": "._attr",
        "comp": "2D"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 935,
        "endLine": 944,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "LandedOnGround",
                        "description": "When entity has landed. This event is triggered with the object the entity landed on.",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "LiftedOffGround",
                        "description": "When entity has lifted off. This event is triggered with the object the entity stood on before lift-off.",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "CheckLanding",
                        "description": "When entity is about to land. This event is triggered with the object the entity is about to land on. Third parties can respond to this event and prevent the entity from being able to land.",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Component that detects if the entity collides with the ground. This component is automatically added and managed by the Gravity component.\nThe appropriate events are fired when the entity state changes (lands on ground / lifts off ground). The current ground entity can also be accessed with `.ground`."
            }
        ],
        "name": "Supportable",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 946,
        "endLine": 952,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Access the ground entity (which may be the actual ground entity if it exists, or `null` if it doesn't exist) and thus whether this entity is currently on the ground or not.\nThe ground entity is also available through the events, when the ground entity changes."
            }
        ],
        "name": ".ground",
        "comp": "Supportable"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 956,
        "endLine": 973,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The canLand boolean determines if the entity is allowed to land or not (e.g. perhaps the entity should not land if it's not falling).\nThe Supportable component will trigger a \"CheckLanding\" event.\nInterested parties can listen to this event and prevent the entity from landing by setting `canLand` to false.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar player = Crafty.e(\"2D, Gravity\");\nplayer.bind(\"CheckLanding\", function(ground) {\n    if (player.y + player.h > ground.y + player.dy) { // forbid landing, if player's feet are not above ground\n        player.canLand = false;\n    }\n});\n```"
                    }
                ]
            }
        ],
        "name": ".canLand",
        "comp": "Supportable"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1078,
        "endLine": 1092,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Component that attaches the entity to the ground when it lands. Useful for platformers with moving platforms.\nRemove the component to disable the functionality.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Supportable",
                    "Gravity"
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, Gravity, GroundAttacher\")\n    .gravity(\"Platform\"); // entity will land on and move with entites that have the \"Platform\" component\n```"
                    }
                ]
            }
        ],
        "name": "GroundAttacher",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1114,
        "endLine": 1123,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Moved",
                        "description": "When entity has moved due to velocity/acceleration on either x or y axis a Moved event is triggered. If the entity has moved on both axes for diagonal movement the event is triggered twice.",
                        "objName": "Old position",
                        "objProp": "{ axis: 'x' | 'y', oldValue: Number }"
                    },
                    {
                        "type": "trigger",
                        "event": "NewDirection",
                        "description": "When entity has changed direction due to velocity on either x or y axis a NewDirection event is triggered. The event is triggered once, if direction is different from last frame.",
                        "objName": "New direction",
                        "objProp": "{ x: -1 | 0 | 1, y: -1 | 0 | 1 }"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Adds gravitational pull to the entity.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Supportable",
                    "Motion"
                ]
            }
        ],
        "name": "Gravity",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1143,
        "endLine": 1164,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .gravity([comp])",
                "contents": [
                    {
                        "type": "param",
                        "name": "comp",
                        "description": "The name of a component that will stop this entity from falling"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Enable gravity for this entity no matter whether comp parameter is specified or not.\nIf comp parameter is specified all entities with that component will stop this entity from falling.\nFor a player entity in a platform game this would be a component that is added to all entities\nthat the player should be able to walk on.\nSee the Supportable component documentation for additional methods & events that are available.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Color, Gravity\")\n  .color(\"red\")\n  .attr({ w: 100, h: 100 })\n  .gravity(\"platform\");\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Supportable",
                    "Motion"
                ]
            }
        ],
        "name": ".gravity",
        "comp": "Gravity"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1172,
        "endLine": 1177,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .antigravity()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Disable gravity for this component. It can be reenabled by calling .gravity()"
            }
        ],
        "name": ".antigravity",
        "comp": "Gravity"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1186,
        "endLine": 1202,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .gravityConst(g)",
                "contents": [
                    {
                        "type": "param",
                        "name": "g",
                        "description": "gravitational constant in pixels per second squared"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Set the gravitational constant to g for this entity. The default is 500. The greater g, the stronger the downwards acceleration.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Color, Gravity\")\n  .color(\"red\")\n  .attr({ w: 100, h: 100 })\n  .gravityConst(5)\n  .gravity(\"platform\");\n```"
                    }
                ]
            }
        ],
        "name": ".gravityConst",
        "comp": "Gravity"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1280,
        "endLine": 1289,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Rotated",
                        "description": "When entity has rotated due to angular velocity/acceleration a Rotated event is triggered.",
                        "objName": "Old rotation",
                        "objProp": "Number"
                    },
                    {
                        "type": "trigger",
                        "event": "NewRotationDirection",
                        "description": "When entity has changed rotational direction due to rotational velocity a NewRotationDirection event is triggered. The event is triggered once, if direction is different from last frame.",
                        "objName": "New direction",
                        "objProp": "-1 | 0 | 1"
                    },
                    {
                        "type": "trigger",
                        "event": "MotionChange",
                        "description": "When a motion property has changed a MotionChange event is triggered.",
                        "objName": "Motion property name and old value",
                        "objProp": "{ key: String, oldValue: Number }"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Component that allows rotating an entity by applying angular velocity and acceleration.\nAll angular motion values are expressed in degrees per second (e.g. an entity with `vrotation` of 10 will rotate 10 degrees each second)."
            }
        ],
        "name": "AngularMotion",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1291,
        "endLine": 1306,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A property for accessing/modifying the angular(rotational) velocity.\nThe velocity remains constant over time, unless the acceleration increases the velocity.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e(\"2D, AngularMotion\");\n\nvar vrotation = ent.vrotation; // retrieve the angular velocity\nent.vrotation += 1; // increase the angular velocity\nent.vrotation = 0; // reset the angular velocity\n```"
                    }
                ]
            }
        ],
        "name": ".vrotation",
        "comp": "AngularMotion"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1309,
        "endLine": 1324,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A property for accessing/modifying the angular(rotational) acceleration.\nThe acceleration increases the velocity over time, resulting in ever increasing speed.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e(\"2D, AngularMotion\");\n\nvar arotation = ent.arotation; // retrieve the angular acceleration\nent.arotation += 1; // increase the angular acceleration\nent.arotation = 0; // reset the angular acceleration\n```"
                    }
                ]
            }
        ],
        "name": ".arotation",
        "comp": "AngularMotion"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1327,
        "endLine": 1339,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A number that reflects the change in rotation (difference between the old & new rotation) that was applied in the last frame.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e(\"2D, AngularMotion\");\n\nvar drotation = ent.drotation; // the change of rotation in the last frame\n```"
                    }
                ]
            }
        ],
        "name": ".drotation",
        "comp": "AngularMotion"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1357,
        "endLine": 1363,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .resetAngularMotion()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Reset all motion (resets velocity, acceleration, motionDelta)."
            }
        ],
        "name": ".resetAngularMotion",
        "comp": "AngularMotion"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1404,
        "endLine": 1415,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Moved",
                        "description": "When entity has moved due to velocity/acceleration on either x or y axis a Moved event is triggered. If the entity has moved on both axes for diagonal movement the event is triggered twice.",
                        "objName": "Old position",
                        "objProp": "{ axis: 'x' | 'y', oldValue: Number }"
                    },
                    {
                        "type": "trigger",
                        "event": "NewDirection",
                        "description": "When entity has changed direction due to velocity on either x or y axis a NewDirection event is triggered. The event is triggered once, if direction is different from last frame.",
                        "objName": "New direction",
                        "objProp": "{ x: -1 | 0 | 1, y: -1 | 0 | 1 }"
                    },
                    {
                        "type": "trigger",
                        "event": "MotionChange",
                        "description": "When a motion property has changed a MotionChange event is triggered.",
                        "objName": "Motion property name and old value",
                        "objProp": "{ key: String, oldValue: Number }"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Component that allows moving an entity by applying linear velocity and acceleration.\nAll linear motion values are expressed in pixels per second (e.g. an entity with `vx` of 1 will move 1px on the x axis each second).\n"
            },
            {
                "type": "note",
                "value": "Several methods return Vector2D objects that dynamically reflect the entity's underlying properties.  If you want a static copy instead, use the vector's `clone()` method."
            }
        ],
        "name": "Motion",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1417,
        "endLine": 1432,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A property for accessing/modifying the linear velocity in the x axis.\nThe velocity remains constant over time, unless the acceleration changes the velocity.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e(\"2D, Motion\");\n\nvar vx = ent.vx; // retrieve the linear velocity in the x axis\nent.vx += 1; // increase the linear velocity in the x axis\nent.vx = 0; // reset the linear velocity in the x axis\n```"
                    }
                ]
            }
        ],
        "name": ".vx",
        "comp": "Motion"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1435,
        "endLine": 1450,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A property for accessing/modifying the linear velocity in the y axis.\nThe velocity remains constant over time, unless the acceleration changes the velocity.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e(\"2D, Motion\");\n\nvar vy = ent.vy; // retrieve the linear velocity in the y axis\nent.vy += 1; // increase the linear velocity in the y axis\nent.vy = 0; // reset the linear velocity in the y axis\n```"
                    }
                ]
            }
        ],
        "name": ".vy",
        "comp": "Motion"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1453,
        "endLine": 1468,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A property for accessing/modifying the linear acceleration in the x axis.\nThe acceleration changes the velocity over time.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e(\"2D, Motion\");\n\nvar ax = ent.ax; // retrieve the linear acceleration in the x axis\nent.ax += 1; // increase the linear acceleration in the x axis\nent.ax = 0; // reset the linear acceleration in the x axis\n```"
                    }
                ]
            }
        ],
        "name": ".ax",
        "comp": "Motion"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1471,
        "endLine": 1486,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A property for accessing/modifying the linear acceleration in the y axis.\nThe acceleration changes the velocity over time.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e(\"2D, Motion\");\n\nvar ay = ent.ay; // retrieve the linear acceleration in the y axis\nent.ay += 1; // increase the linear acceleration in the y axis\nent.ay = 0; // reset the linear acceleration in the y axis\n```"
                    }
                ]
            }
        ],
        "name": ".ay",
        "comp": "Motion"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1489,
        "endLine": 1501,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A number that reflects the change in x (difference between the old & new x) that was applied in the last frame.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e(\"2D, Motion\");\n\nvar dx = ent.dx; // the change of x in the last frame\n```"
                    }
                ]
            }
        ],
        "name": ".dx",
        "comp": "Motion"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1504,
        "endLine": 1516,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A number that reflects the change in y (difference between the old & new y) that was applied in the last frame.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e(\"2D, Motion\");\n\nvar dy = ent.dy; // the change of y in the last frame\n```"
                    }
                ]
            }
        ],
        "name": ".dy",
        "comp": "Motion"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1541,
        "endLine": 1548,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .resetMotion()",
                "contents": [
                    {
                        "type": "return",
                        "value": "this"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Reset all linear motion (resets velocity, acceleration, motionDelta)."
            }
        ],
        "name": ".resetMotion",
        "comp": "Motion"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1557,
        "endLine": 1572,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Vector2D .motionDelta()",
                "contents": [
                    {
                        "type": "return",
                        "value": "A Vector2D with the properties {x, y} that reflect the change in x & y."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Returns the difference between the old & new position that was applied in the last frame.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e(\"2D, Motion\");\n\nvar deltaY = ent.motionDelta().y; // the change of y in the last frame\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.math.Vector2D"
                ]
            }
        ],
        "name": ".motionDelta",
        "comp": "Motion"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1577,
        "endLine": 1598,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Method for accessing/modifying the linear(x,y) velocity.\nThe velocity remains constant over time, unless the acceleration increases the velocity.\n"
            },
            {
                "type": "method",
                "signature": "public Vector2D .velocity()",
                "contents": [
                    {
                        "type": "return",
                        "value": "The velocity Vector2D with the properties {x, y} that reflect the velocities in the <x, y> direction of the entity."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Returns the current velocity. You can access/modify the properties in order to retrieve/change the velocity.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e(\"2D, Motion\");\n\nvar vel = ent.velocity(); //returns the velocity vector\nvel.x;       // retrieve the velocity in the x direction\nvel.x = 0;   // set the velocity in the x direction\nvel.x += 4   // add to the velocity in the x direction\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.math.Vector2D"
                ]
            }
        ],
        "name": ".velocity",
        "comp": "Motion"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1604,
        "endLine": 1625,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Method for accessing/modifying the linear(x,y) acceleration.\nThe acceleration increases the velocity over time, resulting in ever increasing speed.\n"
            },
            {
                "type": "method",
                "signature": "public Vector2D .acceleration()",
                "contents": [
                    {
                        "type": "return",
                        "value": "The acceleration Vector2D with the properties {x, y} that reflects the acceleration in the <x, y> direction of the entity."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Returns the current acceleration. You can access/modify the properties in order to retrieve/change the acceleration.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e(\"2D, Motion\");\n\nvar acc = ent.acceleration(); //returns the acceleration object\nacc.x;       // retrieve the acceleration in the x direction\nacc.x = 0;   // set the acceleration in the x direction\nacc.x += 4   // add to the acceleration in the x direction\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.math.Vector2D"
                ]
            }
        ],
        "name": ".acceleration",
        "comp": "Motion"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1676,
        "endLine": 1696,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "The constructor for a polygon object used for hitboxes and click maps. Takes a set of points as an\nargument, giving alternately the x and y coordinates of the polygon's vertices in order.\n\nThe constructor accepts the coordinates as either a single array or as a set of individual arguments.\nIf passed an array, the current implementation will use that array internally -- do not attempt to reuse it.\n\nWhen creating a polygon for an entity, each point should be offset or relative from the entities `x` and `y`\n(don't include the absolute values as it will automatically calculate this).\n\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Two ways to create a triangle with vertices at `(50, 0)`, `(100, 100)` and `(0, 100)`.\n```\nnew Crafty.polygon([50, 0, 100, 100, 0, 100]);\nnew Crafty.polygon(50, 0, 100, 100, 0, 100);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.polygon",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1705,
        "endLine": 1720,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .containsPoint(Number x, Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X position of the point"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y position of the point"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Method is used to determine if a given point is contained by the polygon.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar poly = new Crafty.polygon([50, 0, 100, 100, 0, 100]);\npoly.containsPoint(50, 50); //TRUE\npoly.containsPoint(0, 0); //FALSE\n```"
                    }
                ]
            }
        ],
        "name": ".containsPoint",
        "comp": "Crafty.polygon"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1734,
        "endLine": 1749,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void .shift(Number x, Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "Amount to shift the `x` axis"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Amount to shift the `y` axis"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Shifts every single point in the polygon by the specified amount.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar poly = new Crafty.polygon([50, 0, 100, 100, 0, 100]);\npoly.shift(5,5);\n//[[55, 5, 105, 5, 5, 105];\n```"
                    }
                ]
            }
        ],
        "name": ".shift",
        "comp": "Crafty.polygon"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1759,
        "endLine": 1772,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void .clone()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Returns a clone of the polygon.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar poly = new Crafty.polygon([50, 0, 100, 100, 0, 100]);\nvar shiftedpoly = poly.clone().shift(5,5);\n//[55, 5, 105, 5, 5, 105], but the original polygon is unchanged\n```"
                    }
                ]
            }
        ],
        "name": ".clone",
        "comp": "Crafty.polygon"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1794,
        "endLine": 1810,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Circle object used for hitboxes and click maps. Must pass a `x`, a `y` and a `radius` value.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar centerX = 5,\n    centerY = 10,\n    radius = 25;\n\nnew Crafty.circle(centerX, centerY, radius);\n```\n\nWhen creating a circle for an entity, each point should be offset or relative from the entities `x` and `y`\n(don't include the absolute values as it will automatically calculate this)."
                    }
                ]
            }
        ],
        "name": "Crafty.circle",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1828,
        "endLine": 1843,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .containsPoint(Number x, Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X position of the point"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y position of the point"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Method is used to determine if a given point is contained by the circle.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar circle = new Crafty.circle(0, 0, 10);\ncircle.containsPoint(0, 0); //TRUE\ncircle.containsPoint(50, 50); //FALSE\n```"
                    }
                ]
            }
        ],
        "name": ".containsPoint",
        "comp": "Crafty.circle"
    },
    {
        "file": "src/spatial/2d.js",
        "startLine": 1853,
        "endLine": 1868,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void .shift(Number x, Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "Amount to shift the `x` axis"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Amount to shift the `y` axis"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Shifts the circle by the specified amount.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar circle = new Crafty.circle(0, 0, 10);\ncircle.shift(5,5);\n//{x: 5, y: 5, radius: 10};\n```"
                    }
                ]
            }
        ],
        "name": ".shift",
        "comp": "Crafty.circle"
    },
    {
        "file": "src/spatial/collision.js",
        "startLine": 4,
        "endLine": 22,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "HitOn",
                        "description": "Triggered when collisions occur. Will not trigger again until collisions of this type cease, or an event is requested once more (using `resetHitChecks(component)`).",
                        "objName": "Data",
                        "objProp": "{ hitData }"
                    },
                    {
                        "type": "trigger",
                        "event": "HitOff",
                        "description": "Triggered when collision with a specific component type ceases",
                        "objName": "componentName",
                        "objProp": "String"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Component to detect collision between any two convex polygons.\n\nIf collision checks are registered for multiple component and collisions with\nmultiple types occur simultaniously, each collision will cause an individual\nevent to fire.\n"
            },
            {
                "type": "note",
                "value": "All data received from events is only valid for the duration of the event's callback. If you wish to preserve the data, make a copy of it."
            },
            {
                "type": "raw",
                "value": "For a description of collision event data (hitData above), see the documentation for\n`.hit()`.\n"
            }
        ],
        "name": "Collision",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/spatial/collision.js",
        "startLine": 38,
        "endLine": 77,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewHitbox",
                        "description": "when a new hitbox is assigned",
                        "objName": "Data",
                        "objProp": "Crafty.polygon"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .collision([Crafty.polygon polygon])",
                "contents": [
                    {
                        "type": "param",
                        "name": "polygon",
                        "description": "Optional Crafty.polygon object that will act as the hit area."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .collision([Array coordinatePairs])",
                "contents": [
                    {
                        "type": "param",
                        "name": "coordinatePairs",
                        "description": "Optional array of x, y coordinate pairs to generate a hit area polygon."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .collision([x1, y1,.., xN, yN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "point#",
                        "description": "Optional list of x, y coordinate pairs to generate a hit area polygon."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Constructor that takes a polygon, an array of points or a list of points to use as the hit area,\nwith points being relative to the object's position in its unrotated state.\n\nThe hit area must be a convex shape and not concave for collision detection to work properly.\n\nIf no parameter is passed, the x, y, w, h properties of the entity will be used, and the hitbox will be resized when the entity is.\n\nIf a hitbox is set that is outside of the bounds of the entity itself, there will be a small performance penalty as it is tracked separately.\n\nIn order for your custom hitbox to have any effect, you have to add the `Collision` component to all other entities this entity needs to collide with using this custom hitbox.\nOn the contrary the collisions will be resolved using the default hitbox. See `.hit()` - `MBR` represents default hitbox collision, `SAT` represents custom hitbox collision.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, Collision\").collision(\n    new Crafty.polygon([50, 0,  100, 100,  0, 100])\n);\n\nCrafty.e(\"2D, Collision\").collision([50, 0,  100, 100,  0, 100]);\n\nCrafty.e(\"2D, Collision\").collision(50, 0,  100, 100,  0, 100);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.polygon"
                ]
            }
        ],
        "name": ".collision",
        "comp": "Collision"
    },
    {
        "file": "src/spatial/collision.js",
        "startLine": 223,
        "endLine": 260,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean/Array hit(String component)",
                "contents": [
                    {
                        "type": "param",
                        "name": "component",
                        "description": "Check collision with entities that have this component applied to them."
                    },
                    {
                        "type": "return",
                        "value": "`false` if there is no collision. If a collision is detected, returns an Array of collision data objects (see below)."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Tests for collisions with entities that have the specified component\napplied to them.\nIf a collision is detected, data regarding the collision will be present in\nthe array returned by this method.\nIf no collisions occur, this method returns false.\n\nFollowing is a description of a collision data object that this method may\nreturn: The returned collision data will be an Array of Objects with the\ntype of collision used, the object collided and if the type used was SAT (a polygon was used as the hitbox) then an amount of overlap.\n```\n[{\n   obj: [entity],\n   type: [\"MBR\" or \"SAT\"],\n   overlap: [number]\n}]\n```\n\n- **obj:** The entity with which the collision occured.\n- **type:** Collision detection method used. One of:\n  - *MBR:* Standard axis aligned rectangle intersection (`.intersect` in the 2D component).\n  - *SAT:* Collision between any two convex polygons. Used when both colliding entities have the `Collision` component applied to them.\n- **overlap:** If SAT collision was used, this will signify the overlap percentage between the colliding entities.\n\nKeep in mind that both entities need to have the `Collision` component, if you want to check for `SAT` (custom hitbox) collisions between them.\n\nIf you want more fine-grained control consider using `Crafty.map.search()`.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "2D"
                ]
            }
        ],
        "name": ".hit",
        "comp": "Collision"
    },
    {
        "file": "src/spatial/collision.js",
        "startLine": 311,
        "endLine": 326,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .onHit(String component, Function callbackOn[, Function callbackOff])",
                "contents": [
                    {
                        "type": "param",
                        "name": "component",
                        "description": "Component to check collisions for."
                    },
                    {
                        "type": "param",
                        "name": "callbackOn",
                        "description": "Callback method to execute upon collision with component. Will be passed the results of the collision check in the same format documented for hit()."
                    },
                    {
                        "type": "param",
                        "name": "callbackOff",
                        "description": "Callback method executed once as soon as collision stops."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Creates an EnterFrame event calling `.hit()` each frame.  When a collision is detected the `callbackOn` will be invoked.\nNote that the `callbackOn` will be invoked every frame the collision is active, not just the first time the collision occurs.\n\nIf you want more fine-grained control consider using `.checkHits()`, `.hit()` or even `Crafty.map.search()`.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".checkHits",
                    ".hit"
                ]
            }
        ],
        "name": ".onHit",
        "comp": "Collision"
    },
    {
        "file": "src/spatial/collision.js",
        "startLine": 371,
        "endLine": 412,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .checkHits(String componentList)",
                "contents": [
                    {
                        "type": "param",
                        "name": "componentList",
                        "description": "A comma seperated list of components to check for collisions with."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .checkHits(String component1[, .., String componentN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "component#",
                        "description": "A component to check for collisions with."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Performs collision checks against all entities that have at least one of\nthe components specified when calling this method. If collisions occur,\na \"HitOn\" event containing the collision information will be fired for the\nentity on which this method was invoked. See the documentation for `.hit()`\nfor a description of collision data contained in the event.\nWhen a collision that was reported ends, a corresponding \"HitOff\" event\nwill be fired.\n\nCalling this method more than once for the same component type will not\ncause redundant hit checks.\n\nIf you want more fine-grained control consider using `.hit()` or even `Crafty.map.search()`.\n"
            },
            {
                "type": "note",
                "value": "Hit checks are performed upon entering each new frame (using the *EnterFrame* event). It is entirely possible for object to move in said frame after the checks were performed (even if the more is the result of *EnterFrame*, as handlers run in no particular order). In such a case, the hit events will not fire until the next check is performed in the following frame."
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, Collision\")\n    .checkHits('Solid') // check for collisions with entities that have the Solid component in each frame\n    .bind(\"HitOn\", function(hitData) {\n        Crafty.log(\"Collision with Solid entity occurred for the first time.\");\n    })\n    .bind(\"HitOff\", function(comp) {\n        Crafty.log(\"Collision with Solid entity ended.\");\n    });\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".hit"
                ]
            }
        ],
        "name": ".checkHits",
        "comp": "Collision"
    },
    {
        "file": "src/spatial/collision.js",
        "startLine": 439,
        "endLine": 468,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .ignoreHits()",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public this .ignoreHits(String componentList)",
                "contents": [
                    {
                        "type": "param",
                        "name": "componentList",
                        "description": "A comma separated list of components to stop checking for collisions with."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .ignoreHits(String component1[, .., String componentN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "component#",
                        "description": "A component to stop checking for collisions with."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Stops checking for collisions with all, or certain, components. If called\nwithout arguments, this method will cause all collision checks on the\nentity to cease. To disable checks for collisions with specific\ncomponents, specify the components as a comma separated string or as\na set of arguments.\n\nCalling this method with component names for which there are no collision\nchecks has no effect.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, Collision\")\n    .checkHits('Solid')\n    ...\n    .ignoreHits('Solid'); // stop checking for collisions with entities that have the Solid component\n```"
                    }
                ]
            }
        ],
        "name": ".ignoreHits",
        "comp": "Collision"
    },
    {
        "file": "src/spatial/collision.js",
        "startLine": 501,
        "endLine": 532,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this .resetHitChecks()",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public this .resetHitChecks(String componentList)",
                "contents": [
                    {
                        "type": "param",
                        "name": "componentList",
                        "description": "A comma seperated list of components to re-check for collisions with."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .resetHitChecks(String component1[, .., String componentN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "component#",
                        "description": "A component to re-check for collisions with."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Causes collision events to be received for collisions that are already\ntaking place (normally, an additional event would not fire before said\ncollisions cease and happen another time).\nIf called without arguments, this method will cause all collision checks on the\nentity to fire events once more. To re-check for collisions with specific\ncomponents, specify the components as a comma separated string or as\na set of arguments.\n\nCalling this method with component names for which there are no collision\nchecks has no effect.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// this example fires the HitOn event each frame the collision with the Solid entity is active, instead of just the first time the collision occurs.\nCrafty.e(\"2D, Collision\")\n    .checkHits('Solid')\n    .bind(\"HitOn\", function(hitData) {\n        Crafty.log(\"Collision with Solid entity was reported in this frame again!\");\n        this.resetHitChecks('Solid'); // fire the HitOn event in the next frame also, if the collision is still active.\n    })\n```"
                    }
                ]
            }
        ],
        "name": ".resetHitChecks",
        "comp": "Collision"
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 4,
        "endLine": 9,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "A set of utility functions for common (and not so common) operations."
            }
        ],
        "name": "Crafty.math",
        "categories": [
            "Utilities"
        ]
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 11,
        "endLine": 19,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.math.abs(Number n)",
                "contents": [
                    {
                        "type": "param",
                        "name": "n",
                        "description": "Some value."
                    },
                    {
                        "type": "return",
                        "value": "Absolute value."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Returns the absolute value."
            }
        ],
        "name": "Crafty.math.abs",
        "comp": "Crafty.math"
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 24,
        "endLine": 34,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.amountOf(Number checkValue, Number minValue, Number maxValue)",
                "contents": [
                    {
                        "type": "param",
                        "name": "checkValue",
                        "description": "Value that should checked with minimum and maximum."
                    },
                    {
                        "type": "param",
                        "name": "minValue",
                        "description": "Bottom of the range"
                    },
                    {
                        "type": "param",
                        "name": "maxValue",
                        "description": "Top of the range"
                    },
                    {
                        "type": "return",
                        "value": "The position of the checked value in a coordinate system normalized such that `minValue` is 0 and `maxValue` is 1."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "If checkValue is within the range, this will return a number between 0 and 1."
            }
        ],
        "name": "Crafty.math.amountOf",
        "comp": "Crafty.math"
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 43,
        "endLine": 53,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.clamp(Number value, Number min, Number max)",
                "contents": [
                    {
                        "type": "param",
                        "name": "value",
                        "description": "A value."
                    },
                    {
                        "type": "param",
                        "name": "max",
                        "description": "Maximum that value can be."
                    },
                    {
                        "type": "param",
                        "name": "min",
                        "description": "Minimum that value can be."
                    },
                    {
                        "type": "return",
                        "value": "The value between minimum and maximum."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Restricts a value to be within a specified range."
            }
        ],
        "name": "Crafty.math.clamp",
        "comp": "Crafty.math"
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 63,
        "endLine": 70,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Converts angle from degree to radian."
            },
            {
                "type": "method",
                "signature": "public Number degToRad(angleInDeg)",
                "contents": [
                    {
                        "type": "param",
                        "name": "angleInDeg",
                        "description": "The angle in degrees."
                    },
                    {
                        "type": "return",
                        "value": "The angle in radians."
                    }
                ]
            }
        ],
        "name": "Crafty.math.degToRad",
        "comp": "Crafty.math"
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 75,
        "endLine": 86,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.distance(Number x1, Number y1, Number x2, Number y2)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x1",
                        "description": "First x coordinate."
                    },
                    {
                        "type": "param",
                        "name": "y1",
                        "description": "First y coordinate."
                    },
                    {
                        "type": "param",
                        "name": "x2",
                        "description": "Second x coordinate."
                    },
                    {
                        "type": "param",
                        "name": "y2",
                        "description": "Second y coordinate."
                    },
                    {
                        "type": "return",
                        "value": "The distance between the two points."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Distance between two points."
            }
        ],
        "name": "Crafty.math.distance",
        "comp": "Crafty.math"
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 92,
        "endLine": 103,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.lerp(Number value1, Number value2, Number amount)",
                "contents": [
                    {
                        "type": "param",
                        "name": "value1",
                        "description": "One value."
                    },
                    {
                        "type": "param",
                        "name": "value2",
                        "description": "Another value."
                    },
                    {
                        "type": "param",
                        "name": "amount",
                        "description": "Amount of value2 to value1."
                    },
                    {
                        "type": "return",
                        "value": "Linear interpolated value."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Linear interpolation. Passing amount with a value of 0 will cause value1 to be returned,\na value of 1 will cause value2 to be returned."
            }
        ],
        "name": "Crafty.math.lerp",
        "comp": "Crafty.math"
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 108,
        "endLine": 116,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.negate(Number percent)",
                "contents": [
                    {
                        "type": "param",
                        "name": "percent",
                        "description": "The probability of returning `-1`"
                    },
                    {
                        "type": "return",
                        "value": "1 or -1."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Returns `1` or `-1` randomly."
            }
        ],
        "name": "Crafty.math.negate",
        "comp": "Crafty.math"
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 124,
        "endLine": 132,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.radToDeg(Number angle)",
                "contents": [
                    {
                        "type": "param",
                        "name": "angleInRad",
                        "description": "The angle in radian."
                    },
                    {
                        "type": "return",
                        "value": "The angle in degree."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Converts angle from radian to degree."
            }
        ],
        "name": "Crafty.math.radToDeg",
        "comp": "Crafty.math"
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 137,
        "endLine": 145,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.math.randomElementOfArray(Array array)",
                "contents": [
                    {
                        "type": "param",
                        "name": "array",
                        "description": "A specific array."
                    },
                    {
                        "type": "return",
                        "value": "A random element of a specific array."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Returns a random element of a specific array."
            }
        ],
        "name": "Crafty.math.randomElementOfArray",
        "comp": "Crafty.math"
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 150,
        "endLine": 159,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.randomInt(Number start, Number end)",
                "contents": [
                    {
                        "type": "param",
                        "name": "start",
                        "description": "Smallest int value that can be returned."
                    },
                    {
                        "type": "param",
                        "name": "end",
                        "description": "Biggest int value that can be returned."
                    },
                    {
                        "type": "return",
                        "value": "A random int."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Returns a random int within a specific range."
            }
        ],
        "name": "Crafty.math.randomInt",
        "comp": "Crafty.math"
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 164,
        "endLine": 173,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.randomInt(Number start, Number end)",
                "contents": [
                    {
                        "type": "param",
                        "name": "start",
                        "description": "Smallest number value that can be returned."
                    },
                    {
                        "type": "param",
                        "name": "end",
                        "description": "Biggest number value that can be returned."
                    },
                    {
                        "type": "return",
                        "value": "A random number."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Returns a random number in within a specific range."
            }
        ],
        "name": "Crafty.math.randomNumber",
        "comp": "Crafty.math"
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 178,
        "endLine": 189,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.squaredDistance(Number x1, Number y1, Number x2, Number y2)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x1",
                        "description": "First x coordinate."
                    },
                    {
                        "type": "param",
                        "name": "y1",
                        "description": "First y coordinate."
                    },
                    {
                        "type": "param",
                        "name": "x2",
                        "description": "Second x coordinate."
                    },
                    {
                        "type": "param",
                        "name": "y2",
                        "description": "Second y coordinate."
                    },
                    {
                        "type": "return",
                        "value": "The squared distance between the two points."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Squared distance between two points."
            }
        ],
        "name": "Crafty.math.squaredDistance",
        "comp": "Crafty.math"
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 194,
        "endLine": 204,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean Crafty.math.withinRange(Number value, Number min, Number max)",
                "contents": [
                    {
                        "type": "param",
                        "name": "value",
                        "description": "The specific value."
                    },
                    {
                        "type": "param",
                        "name": "min",
                        "description": "Minimum value."
                    },
                    {
                        "type": "param",
                        "name": "max",
                        "description": "Maximum value."
                    },
                    {
                        "type": "return",
                        "value": "Returns true if value is within a specific range."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Check if a value is within a specific range."
            }
        ],
        "name": "Crafty.math.withinRange",
        "comp": "Crafty.math"
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 211,
        "endLine": 225,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Vector2D uses the following form:\n<x, y>\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} Vector2D();",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Vector2D} Vector2D(Vector2D);",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Vector2D} Vector2D(Number, Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D|Number=0} x",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number=0} y",
                        "description": ""
                    }
                ]
            }
        ],
        "name": "Crafty.math.Vector2D",
        "categories": [
            "2D"
        ],
        "class": "This is a general purpose 2D vector class",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 241,
        "endLine": 251,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Adds the passed vector to this vector\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} add(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} this after adding"
                    }
                ]
            }
        ],
        "name": ".add",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 258,
        "endLine": 269,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Calculates the angle between the passed vector and this vector, using <0,0> as the point of reference.\nAngles returned have the range (−π, π].\n"
            },
            {
                "type": "method",
                "signature": "public {Number} angleBetween(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Number} the angle between the two vectors in radians"
                    }
                ]
            }
        ],
        "name": ".angleBetween",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 274,
        "endLine": 284,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Calculates the angle to the passed vector from this vector, using this vector as the point of reference.\n"
            },
            {
                "type": "method",
                "signature": "public {Number} angleTo(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Number} the angle to the passed vector in radians"
                    }
                ]
            }
        ],
        "name": ".angleTo",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 289,
        "endLine": 298,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Creates and exact, numeric copy of this vector\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} clone();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Vector2D} the new vector"
                    }
                ]
            }
        ],
        "name": ".clone",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 303,
        "endLine": 313,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Calculates the distance from this vector to the passed vector.\n"
            },
            {
                "type": "method",
                "signature": "public {Number} distance(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Number} the distance between the two vectors"
                    }
                ]
            }
        ],
        "name": ".distance",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 318,
        "endLine": 330,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Calculates the squared distance from this vector to the passed vector.\nThis function avoids calculating the square root, thus being slightly faster than .distance( ).\n"
            },
            {
                "type": "method",
                "signature": "public {Number} distanceSq(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Number} the squared distance between the two vectors"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".distance"
                ]
            }
        ],
        "name": ".distanceSq",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 335,
        "endLine": 345,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Divides this vector by the passed vector.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} divide(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} this vector after dividing"
                    }
                ]
            }
        ],
        "name": ".divide",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 352,
        "endLine": 362,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Calculates the dot product of this and the passed vectors\n"
            },
            {
                "type": "method",
                "signature": "public {Number} dotProduct(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Number} the resultant dot product"
                    }
                ]
            }
        ],
        "name": ".dotProduct",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 367,
        "endLine": 377,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Calculates the z component of the cross product of the two vectors augmented to 3D.\n"
            },
            {
                "type": "method",
                "signature": "public {Number} crossProduct(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Number} the resultant cross product"
                    }
                ]
            }
        ],
        "name": ".crossProduct",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 382,
        "endLine": 392,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Determines if this vector is numerically equivalent to the passed vector.\n"
            },
            {
                "type": "method",
                "signature": "public {Boolean} equals(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Boolean} true if the vectors are equivalent"
                    }
                ]
            }
        ],
        "name": ".equals",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 398,
        "endLine": 409,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Calculates a new vector that is perpendicular to this vector.\nThe perpendicular vector has the same magnitude as this vector and is obtained by a counter-clockwise rotation of 90° of this vector.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} perpendicular([Vector2D]);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} [result]",
                        "description": "An optional parameter to save the result in"
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} the perpendicular vector"
                    }
                ]
            }
        ],
        "name": ".perpendicular",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 415,
        "endLine": 426,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Calculates a new right-handed unit vector that is perpendicular to the line created by this and the passed vector.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} getNormal(Vector2D[, Vector2D]);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Vector2D} [result]",
                        "description": "An optional parameter to save the result in"
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} the new normal vector"
                    }
                ]
            }
        ],
        "name": ".getNormal",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 432,
        "endLine": 441,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Determines if this vector is equal to <0,0>\n"
            },
            {
                "type": "method",
                "signature": "public {Boolean} isZero();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Boolean} true if this vector is equal to <0,0>"
                    }
                ]
            }
        ],
        "name": ".isZero",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 446,
        "endLine": 456,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Calculates the magnitude of this vector.\nNote: Function objects in JavaScript already have a 'length' member, hence the use of magnitude instead.\n"
            },
            {
                "type": "method",
                "signature": "public {Number} magnitude();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Number} the magnitude of this vector"
                    }
                ]
            }
        ],
        "name": ".magnitude",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 461,
        "endLine": 472,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Calculates the square of the magnitude of this vector.\nThis function avoids calculating the square root, thus being slightly faster than .magnitude( ).\n"
            },
            {
                "type": "method",
                "signature": "public {Number} magnitudeSq();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Number} the square of the magnitude of this vector"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".magnitude"
                ]
            }
        ],
        "name": ".magnitudeSq",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 477,
        "endLine": 487,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Multiplies this vector by the passed vector\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} multiply(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} this vector after multiplying"
                    }
                ]
            }
        ],
        "name": ".multiply",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 494,
        "endLine": 503,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Negates this vector (ie. <-x,-y>)\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} negate();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Vector2D} this vector after negation"
                    }
                ]
            }
        ],
        "name": ".negate",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 510,
        "endLine": 520,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Normalizes this vector (scales the vector so that its new magnitude is 1)\nFor vectors where magnitude is 0, <1,0> is returned.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} normalize();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Vector2D} this vector after normalization"
                    }
                ]
            }
        ],
        "name": ".normalize",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 536,
        "endLine": 548,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Scales this vector by the passed amount(s)\nIf scalarY is omitted, scalarX is used for both axes\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} scale(Number[, Number]);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number} scalarX",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} [scalarY]",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} this after scaling"
                    }
                ]
            }
        ],
        "name": ".scale",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 559,
        "endLine": 569,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Scales this vector such that its new magnitude is equal to the passed value.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} scaleToMagnitude(Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number} mag",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} this vector after scaling"
                    }
                ]
            }
        ],
        "name": ".scaleToMagnitude",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 577,
        "endLine": 589,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Sets the values of this vector using a passed vector or pair of numbers.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} setValues(Vector2D);",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Vector2D} setValues(Number, Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number|Vector2D} x",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} y",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} this vector after setting of values"
                    }
                ]
            }
        ],
        "name": ".setValues",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 602,
        "endLine": 612,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Subtracts the passed vector from this vector.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} subtract(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{vector2D} this vector after subtracting"
                    }
                ]
            }
        ],
        "name": ".subtract",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 619,
        "endLine": 628,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Returns a string representation of this vector.\n"
            },
            {
                "type": "method",
                "signature": "public {String} toString();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{String}"
                    }
                ]
            }
        ],
        "name": ".toString",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 633,
        "endLine": 645,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Translates (moves) this vector by the passed amounts.\nIf dy is omitted, dx is used for both axes.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} translate(Number[, Number]);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number} dx",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} [dy]",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} this vector after translating"
                    }
                ]
            }
        ],
        "name": ".translate",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 656,
        "endLine": 671,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Calculates the triple product of three vectors.\ntriple vector product = b(a•c) - a(b•c)\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} tripleProduct(Vector2D, Vector2D, Vector2D, [Vector2D]);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} a",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Vector2D} b",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Vector2D} c",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Vector2D} [result]",
                        "description": "An optional parameter to save the result in"
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} the triple product as a new vector"
                    }
                ]
            }
        ],
        "name": ".tripleProduct",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 683,
        "endLine": 705,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Matrix2D uses the following form, as per the whatwg.org specifications for canvas.transform():\n[a, c, e]\n[b, d, f]\n[0, 0, 1]\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} new Matrix2D();",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} new Matrix2D(Matrix2D);",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} new Matrix2D(Number, Number, Number, Number, Number, Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Matrix2D|Number=1} a",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number=0} b",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number=0} c",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number=1} d",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number=0} e",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number=0} f",
                        "description": ""
                    }
                ]
            }
        ],
        "name": "Crafty.math.Matrix2D",
        "categories": [
            "2D"
        ],
        "class": "This is a 2D Matrix2D class. It is 3x3 to allow for affine transformations in 2D space. The third row is always assumed to be [0, 0, 1].",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 732,
        "endLine": 742,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Applies the matrix transformations to the passed object\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} apply(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": "vector to be transformed"
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} the passed vector object after transforming"
                    }
                ]
            }
        ],
        "name": ".apply",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 757,
        "endLine": 766,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Creates an exact, numeric copy of the current matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} clone();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Matrix2D}"
                    }
                ]
            }
        ],
        "name": ".clone",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 771,
        "endLine": 782,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Multiplies this matrix with another, overriding the values of this matrix.\nThe passed matrix is assumed to be on the right-hand side.\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} combine(Matrix2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Matrix2D} mtrxRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this matrix after combination"
                    }
                ]
            }
        ],
        "name": ".combine",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 796,
        "endLine": 806,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Checks for the numeric equality of this matrix versus another.\n"
            },
            {
                "type": "method",
                "signature": "public {Boolean} equals(Matrix2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Matrix2D} mtrxRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Boolean} true if the two matrices are numerically equal"
                    }
                ]
            }
        ],
        "name": ".equals",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 813,
        "endLine": 822,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Calculates the determinant of this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Number} determinant();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Number} det(this matrix)"
                    }
                ]
            }
        ],
        "name": ".determinant",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 827,
        "endLine": 837,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Inverts this matrix if possible\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} invert();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Matrix2D} this inverted matrix or the original matrix on failure"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".isInvertible"
                ]
            }
        ],
        "name": ".invert",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 862,
        "endLine": 871,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Returns true if this matrix is the identity matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Boolean} isIdentity();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Boolean}"
                    }
                ]
            }
        ],
        "name": ".isIdentity",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 876,
        "endLine": 886,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Determines is this matrix is invertible.\n"
            },
            {
                "type": "method",
                "signature": "public {Boolean} isInvertible();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Boolean} true if this matrix is invertible"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".invert"
                ]
            }
        ],
        "name": ".isInvertible",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 891,
        "endLine": 901,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Applies a counter-clockwise pre-rotation to this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} preRotate(Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{number} rads",
                        "description": "angle to rotate in radians"
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this matrix after pre-rotation"
                    }
                ]
            }
        ],
        "name": ".preRotate",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 916,
        "endLine": 927,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Applies a pre-scaling to this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} preScale(Number[, Number]);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number} scalarX",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} [scalarY] scalarX is used if scalarY is undefined",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this after pre-scaling"
                    }
                ]
            }
        ],
        "name": ".preScale",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 940,
        "endLine": 952,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Applies a pre-translation to this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} preTranslate(Vector2D);",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} preTranslate(Number, Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number|Vector2D} dx",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} dy",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this matrix after pre-translation"
                    }
                ]
            }
        ],
        "name": ".preTranslate",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 965,
        "endLine": 975,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Applies a counter-clockwise post-rotation to this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} rotate(Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number} rads",
                        "description": "angle to rotate in radians"
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this matrix after rotation"
                    }
                ]
            }
        ],
        "name": ".rotate",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 993,
        "endLine": 1004,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Applies a post-scaling to this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} scale(Number[, Number]);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number} scalarX",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} [scalarY] scalarX is used if scalarY is undefined",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this after post-scaling"
                    }
                ]
            }
        ],
        "name": ".scale",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 1019,
        "endLine": 1035,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Sets the values of this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} setValues(Matrix2D);",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} setValues(Number, Number, Number, Number, Number, Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Matrix2D|Number} a",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} b",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} c",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} d",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} e",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} f",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this matrix containing the new values"
                    }
                ]
            }
        ],
        "name": ".setValues",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 1056,
        "endLine": 1065,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Returns the string representation of this matrix.\n"
            },
            {
                "type": "method",
                "signature": "public {String} toString();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{String}"
                    }
                ]
            }
        ],
        "name": ".toString",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/math.js",
        "startLine": 1071,
        "endLine": 1083,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Applies a post-translation to this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} translate(Vector2D);",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} translate(Number, Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number|Vector2D} dx",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} dy",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this matrix after post-translation"
                    }
                ]
            }
        ],
        "name": ".translate",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/spatial/rect-manager.js",
        "startLine": 4,
        "endLine": 9,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Collection of methods for handling rectangles"
            }
        ],
        "name": "Crafty.rectManager",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/spatial/rect-manager.js",
        "startLine": 28,
        "endLine": 37,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean Crafty.rectManager.overlap(Object rectA, Object rectA)",
                "contents": [
                    {
                        "type": "param",
                        "name": "rectA",
                        "description": "An object that must have the `_x, _y, _w, _h` values as properties"
                    },
                    {
                        "type": "param",
                        "name": "rectB",
                        "description": "An object that must have the `_x, _y, _w, _h` values as properties"
                    },
                    {
                        "type": "return",
                        "value": "true if the rectangles overlap; false otherwise"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Checks whether two rectangles overlap."
            }
        ],
        "name": "Crafty.rectManager.overlap",
        "comp": "Crafty.rectManager"
    },
    {
        "file": "src/spatial/rect-manager.js",
        "startLine": 43,
        "endLine": 55,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.rectManager.mergeSet(Object set)",
                "contents": [
                    {
                        "type": "param",
                        "name": "set",
                        "description": "an array of rectangular regions"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Merge any consecutive, overlapping rects into each other.\nIts an optimization for the redraw regions.\n\nThe order of set isn't strictly meaningful,\nbut overlapping objects will often cause each other to change,\nand so might be consecutive."
            }
        ],
        "name": "Crafty.rectManager.mergeSet",
        "comp": "Crafty.rectManager"
    },
    {
        "file": "src/spatial/rect-manager.js",
        "startLine": 76,
        "endLine": 84,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.rectManager.boundingRect(set)",
                "contents": [
                    {
                        "type": "param",
                        "name": "set",
                        "description": "An array of rectangles"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "- Calculate the common bounding rect of multiple canvas entities.\n- Returns coords"
            }
        ],
        "name": "Crafty.rectManager.boundingRect",
        "comp": "Crafty.rectManager"
    },
    {
        "file": "src/spatial/spatial-grid.js",
        "startLine": 10,
        "endLine": 18,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.HashMap([cellsize])",
                "contents": [
                    {
                        "type": "param",
                        "name": "cellsize",
                        "description": "the cell size. If omitted, `cellsize` is 64."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Set `cellsize`.\nAnd create `this.map`."
            }
        ],
        "name": "Crafty.HashMap.constructor",
        "comp": "Crafty.HashMap"
    },
    {
        "file": "src/spatial/spatial-grid.js",
        "startLine": 30,
        "endLine": 45,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.map.insert(Object obj)",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "An entity to be inserted."
                    },
                    {
                        "type": "return",
                        "value": "An object representing this object's entry in the HashMap"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "`obj` is inserted in '.map' of the corresponding broad phase cells. An object of the following fields is returned.\n```\n{\n  keys: the object that keep track of cells\n  obj: The inserted object\n  map: the HashMap object\n}\n```"
            }
        ],
        "name": "Crafty.map.insert",
        "comp": "Crafty.map"
    },
    {
        "file": "src/spatial/spatial-grid.js",
        "startLine": 66,
        "endLine": 77,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.map.search(Object rect[, Boolean filter])",
                "contents": [
                    {
                        "type": "param",
                        "name": "rect",
                        "description": "the rectangular region to search for entities."
                    },
                    {
                        "type": "param",
                        "name": "filter",
                        "description": "If false, only performs a broad-phase collision check.  The default value is true."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "- If `filter` is `false`, just search for all the entries in the give `rect` region by broad phase collision. Entity may be returned duplicated.\n- If `filter` is `true`, filter the above results by checking that they actually overlap `rect`.\n\nThe easier usage is with `filter == true`. For performance reason, you may use `filter == false`, and filter the result yourself. See examples in drawing.js and collision.js"
            }
        ],
        "name": "Crafty.map.search",
        "comp": "Crafty.map"
    },
    {
        "file": "src/spatial/spatial-grid.js",
        "startLine": 122,
        "endLine": 136,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.map.remove([Object keys, ]Object obj)",
                "contents": [
                    {
                        "type": "param",
                        "name": "keys",
                        "description": "key region. If omitted, it will be derived from obj by `Crafty.HashMap.key`."
                    },
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "An object to remove from the hashmap"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Remove an entity in a broad phase map.\n- The second form is only used in Crafty.HashMap to save time for computing keys again, where keys were computed previously from obj. End users should not call this form directly.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.map.remove(e);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.map.remove",
        "comp": "Crafty.map"
    },
    {
        "file": "src/spatial/spatial-grid.js",
        "startLine": 164,
        "endLine": 176,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.map.remove(Entry entry)",
                "contents": [
                    {
                        "type": "param",
                        "name": "entry",
                        "description": "An entry to update"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Update an entry's keys, and its position in the broad phrase map.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.map.refresh(e);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.map.refresh",
        "comp": "Crafty.map"
    },
    {
        "file": "src/spatial/spatial-grid.js",
        "startLine": 214,
        "endLine": 232,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.map.boundaries()",
                "contents": [
                    {
                        "type": "return",
                        "value": "An object with the following structure, which represents an MBR which contains all entities"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "```\n{\n  min: {\n    x: val_x,\n    y: val_y\n  },\n  max: {\n    x: val_x,\n    y: val_y\n  }\n}\n```"
            }
        ],
        "name": "Crafty.map.boundaries",
        "comp": "Crafty.map"
    },
    {
        "file": "src/spatial/spatial-grid.js",
        "startLine": 309,
        "endLine": 317,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "raw",
                "value": "Broad-phase collision detection engine. See background information at\n\n- [N Tutorial B - Broad-Phase Collision](http://www.metanetsoftware.com/technique/tutorialB.html)\n- [Broad-Phase Collision Detection with CUDA](http://http.developer.nvidia.com/GPUGems3/gpugems3_ch32.html)"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.map"
                ]
            }
        ],
        "name": "Crafty.HashMap",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/spatial/spatial-grid.js",
        "startLine": 319,
        "endLine": 329,
        "commit": "5c34e4039278e39defc230858d1e83c078935f50",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.HashMap.key(Object obj)",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "an Object that has .mbr() or _x, _y, _w and _h."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Get the rectangular region (in terms of the grid, with grid size `cellsize`), where the object may fall in. This region is determined by the object's bounding box.\nThe `cellsize` is 64 by default.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.HashMap.constructor"
                ]
            }
        ],
        "name": "Crafty.HashMap.key",
        "comp": "Crafty.HashMap"
    }
]