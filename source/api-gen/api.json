[
    {
        "file": "src/2D.js",
        "startLine": 47,
        "endLine": 51,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Functions related with querying entities."
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.HashMap"
                ]
            }
        ],
        "name": "Crafty.map",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/2D.js",
        "startLine": 69,
        "endLine": 75,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Component for any entity that has a position on the stage."
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Move",
                        "description": "when the entity has moved",
                        "objName": "Old position",
                        "objProp": "{ _x:Number, _y:Number, _w:Number, _h:Number }"
                    },
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "description": "when the entity needs to be redrawn",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "Rotate",
                        "description": "when the entity is rotated",
                        "objName": "Data",
                        "objProp": "{ cos:Number, sin:Number, deg:Number, rad:Number, o: {x:Number, y:Number}}"
                    }
                ]
            }
        ],
        "name": "2D",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/2D.js",
        "startLine": 78,
        "endLine": 84,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "The `x` position on the stage. When modified, will automatically be redrawn.\nIs actually a getter/setter so when using this value for calculations and not modifying it,\nuse the `._x` property."
            },
            {
                "type": "xref",
                "xrefs": [
                    "._attr"
                ]
            }
        ],
        "name": ".x",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 87,
        "endLine": 93,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "The `y` position on the stage. When modified, will automatically be redrawn.\nIs actually a getter/setter so when using this value for calculations and not modifying it,\nuse the `._y` property."
            },
            {
                "type": "xref",
                "xrefs": [
                    "._attr"
                ]
            }
        ],
        "name": ".y",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 96,
        "endLine": 104,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "The width of the entity. When modified, will automatically be redrawn.\nIs actually a getter/setter so when using this value for calculations and not modifying it,\nuse the `._w` property.\n\nChanging this value is not recommended as canvas has terrible resize quality and DOM will just clip the image."
            },
            {
                "type": "xref",
                "xrefs": [
                    "._attr"
                ]
            }
        ],
        "name": ".w",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 107,
        "endLine": 115,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "The height of the entity. When modified, will automatically be redrawn.\nIs actually a getter/setter so when using this value for calculations and not modifying it,\nuse the `._h` property.\n\nChanging this value is not recommended as canvas has terrible resize quality and DOM will just clip the image."
            },
            {
                "type": "xref",
                "xrefs": [
                    "._attr"
                ]
            }
        ],
        "name": ".h",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 118,
        "endLine": 130,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "The `z` index on the stage. When modified, will automatically be redrawn.\nIs actually a getter/setter so when using this value for calculations and not modifying it,\nuse the `._z` property.\n\nA higher `z` value will be closer to the front of the stage. A smaller `z` value will be closer to the back.\nA global Z index is produced based on its `z` value as well as the GID (which entity was created first).\nTherefore entities will naturally maintain order depending on when it was created if same z value.\n\n`z` is required to be an integer, e.g. `z=11.2` is not allowed."
            },
            {
                "type": "xref",
                "xrefs": [
                    "._attr"
                ]
            }
        ],
        "name": ".z",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 133,
        "endLine": 153,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "The rotation state of the entity, in clockwise degrees.\n`this.rotation = 0` sets it to its original orientation; `this.rotation = 10`\nsets it to 10 degrees clockwise from its original orientation;\n`this.rotation = -10` sets it to 10 degrees counterclockwise from its\noriginal orientation, etc.\n\nWhen modified, will automatically be redrawn. Is actually a getter/setter\nso when using this value for calculations and not modifying it,\nuse the `._rotation` property.\n\n`this.rotation = 0` does the same thing as `this.rotation = 360` or `720` or\n`-360` or `36000` etc. So you can keep increasing or decreasing the angle for continuous\nrotation. (Numerical errors do not occur until you get to millions of degrees.)\n\nThe default is to rotate the entity around its (initial) top-left corner; use\n`.origin()` to change that.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "._attr",
                    ".origin"
                ]
            }
        ],
        "name": ".rotation",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 156,
        "endLine": 159,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Transparency of an entity. Must be a decimal value between 0.0 being fully transparent to 1.0 being fully opaque."
            }
        ],
        "name": ".alpha",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 162,
        "endLine": 169,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "If the entity is visible or not. Accepts a true or false value.\nCan be used for optimization by setting an entities visibility to false when not needed to be drawn.\n\nThe entity will still exist and can be collided with but just won't be drawn."
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.DrawManager.draw",
                    "Crafty.DrawManager.drawAll"
                ]
            }
        ],
        "name": ".visible",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 173,
        "endLine": 177,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "When two entities overlap, the one with the larger `_globalZ` will be on top of the other."
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.DrawManager.draw",
                    "Crafty.DrawManager.drawAll"
                ]
            }
        ],
        "name": "._globalZ",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 361,
        "endLine": 376,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Extends the MBR of the entity by a specified amount.\n"
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "BoundaryOffset",
                        "description": "when the MBR offset changes",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .offsetBoundary(Number dx1, Number dy1, Number dx2, Number dy2)",
                "contents": [
                    {
                        "type": "param",
                        "name": "dx1",
                        "description": "Extends the MBR to the left by this amount"
                    },
                    {
                        "type": "param",
                        "name": "dy1",
                        "description": "Extends the MBR upward by this amount"
                    },
                    {
                        "type": "param",
                        "name": "dx2",
                        "description": "Extends the MBR to the right by this amount"
                    },
                    {
                        "type": "param",
                        "name": "dy2",
                        "description": "Extends the MBR downward by this amount"
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public this .offsetBoundary(Number offset)",
                "contents": [
                    {
                        "type": "param",
                        "name": "offset",
                        "description": "Extend the MBR in all directions by this amount"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nYou would most likely use this function to ensure that custom canvas rendering beyond the extent of the entity's normal bounds is not clipped."
            }
        ],
        "name": ".offsetBoundary",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 493,
        "endLine": 497,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number .area(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Calculates the area of the entity"
            }
        ],
        "name": ".area",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 503,
        "endLine": 513,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .intersect(Number x, Number y, Number w, Number h)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X position of the rect"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y position of the rect"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "Width of the rect"
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "Height of the rect"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Boolean .intersect(Object rect)",
                "contents": [
                    {
                        "type": "param",
                        "name": "rect",
                        "description": "An object that must have the `x, y, w, h` values as properties"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Determines if this entity intersects a rectangle.  If the entity is rotated, its MBR is used for the test."
            }
        ],
        "name": ".intersect",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 532,
        "endLine": 542,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .within(Number x, Number y, Number w, Number h)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X position of the rect"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y position of the rect"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "Width of the rect"
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "Height of the rect"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Boolean .within(Object rect)",
                "contents": [
                    {
                        "type": "param",
                        "name": "rect",
                        "description": "An object that must have the `_x, _y, _w, _h` values as properties"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Determines if this current entity is within another rectangle."
            }
        ],
        "name": ".within",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 561,
        "endLine": 571,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .contains(Number x, Number y, Number w, Number h)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X position of the rect"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y position of the rect"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "Width of the rect"
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "Height of the rect"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Boolean .contains(Object rect)",
                "contents": [
                    {
                        "type": "param",
                        "name": "rect",
                        "description": "An object that must have the `_x, _y, _w, _h` values as properties."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Determines if the rectangle is within the current entity.  If the entity is rotated, its MBR is used for the test."
            }
        ],
        "name": ".contains",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 590,
        "endLine": 598,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Object .pos(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Returns the x, y, w, h properties as a rect object\n(a rect object is just an object with the keys _x, _y, _w, _h).\n\nThe keys have an underscore prefix. This is due to the x, y, w, h\nproperties being merely setters and getters that wrap the properties with an underscore (_x, _y, _w, _h)."
            }
        ],
        "name": ".pos",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 609,
        "endLine": 614,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Object .mbr()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Returns the minimum bounding rectangle. If there is no rotation\non the entity it will return the rect."
            }
        ],
        "name": ".mbr",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 626,
        "endLine": 635,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .isAt(Number x, Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X position of the point"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y position of the point"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Determines whether a point is contained by the entity. Unlike other methods,\nan object can't be passed. The arguments require the x and y value.\n\nThe given point is tested against the first of the following that exists: a mapArea associated with \"Mouse\", the hitarea associated with \"Collision\", or the object's MBR."
            }
        ],
        "name": ".isAt",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 648,
        "endLine": 654,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .move(String dir, Number by)",
                "contents": [
                    {
                        "type": "param",
                        "name": "dir",
                        "description": "Direction to move (n,s,e,w,ne,nw,se,sw)"
                    },
                    {
                        "type": "param",
                        "name": "by",
                        "description": "Amount to move in the specified direction"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Quick method to move the entity in a direction (n, s, e, w, ne, nw, se, sw) by an amount of pixels."
            }
        ],
        "name": ".move",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 665,
        "endLine": 674,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .shift(Number x, Number y, Number w, Number h)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "Amount to move X"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Amount to move Y"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "Amount to widen"
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "Amount to increase height"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Shift or move the entity by an amount. Use negative values\nfor an opposite direction."
            }
        ],
        "name": ".shift",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 685,
        "endLine": 693,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void ._cascade(e)",
                "contents": [
                    {
                        "type": "param",
                        "name": "e",
                        "description": "An object describing the motion"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Move or rotate the entity's children according to a certain motion.\nThis method is part of a function bound to \"Move\": It is used\ninternally for ensuring that when a parent moves, the child also\nmoves in the same way."
            }
        ],
        "name": "._cascade",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 721,
        "endLine": 736,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .attach(Entity obj[, .., Entity objN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "Child entity(s) to attach"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Sets one or more entities to be children, with the current entity (`this`)\nas the parent. When the parent moves or rotates, its children move or\nrotate by the same amount. (But not vice-versa: If you move a child, it\nwill not move the parent.) When the parent is destroyed, its children are\ndestroyed.\n\nFor any entity, `this._children` is the array of its children entity\nobjects (if any), and `this._parent` is its parent entity object (if any).\n\nAs many objects as wanted can be attached, and a hierarchy of objects is\npossible by attaching."
            }
        ],
        "name": ".attach",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 755,
        "endLine": 761,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .detach([Entity obj])",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "The entity to detach. Left blank will remove all attached entities"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Stop an entity from following the current entity. Passing no arguments will stop\nevery entity attached."
            }
        ],
        "name": ".detach",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 785,
        "endLine": 803,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .origin(Number x, Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "Pixel value of origin offset on the X axis"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Pixel value of origin offset on the Y axis"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .origin(String offset)",
                "contents": [
                    {
                        "type": "param",
                        "name": "offset",
                        "description": "Combination of center, top, bottom, middle, left and right"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Set the origin point of an entity for it to rotate around.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.origin(\"top left\")\nthis.origin(\"center\")\nthis.origin(\"bottom right\")\nthis.origin(\"middle right\")\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".rotation"
                ]
            }
        ],
        "name": ".origin",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 829,
        "endLine": 841,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "description": "when the entity has flipped",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .flip(String dir)",
                "contents": [
                    {
                        "type": "param",
                        "name": "dir",
                        "description": "Flip direction"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nFlip entity on passed direction\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.flip(\"X\")\n```"
                    }
                ]
            }
        ],
        "name": ".flip",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 852,
        "endLine": 864,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "description": "when the entity has unflipped",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .unflip(String dir)",
                "contents": [
                    {
                        "type": "param",
                        "name": "dir",
                        "description": "Unflip direction"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nUnflip entity on passed direction (if it's flipped)\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.unflip(\"X\")\n```"
                    }
                ]
            }
        ],
        "name": ".unflip",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 887,
        "endLine": 891,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Setter method for all 2D properties including\nx, y, w, h, alpha, rotation and visible."
            }
        ],
        "name": "._attr",
        "comp": "2D"
    },
    {
        "file": "src/2D.js",
        "startLine": 958,
        "endLine": 963,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Moved",
                        "description": "When entity has moved on y-axis a Moved event is triggered with an object specifying the old position {x: old_x, y: old_y}",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nAdds gravitational pull to the entity."
            }
        ],
        "name": "Gravity",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/2D.js",
        "startLine": 975,
        "endLine": 992,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .gravity([comp])",
                "contents": [
                    {
                        "type": "param",
                        "name": "comp",
                        "description": "The name of a component that will stop this entity from falling"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nEnable gravity for this entity no matter whether comp parameter is not specified,\nIf comp parameter is specified all entities with that component will stop this entity from falling.\nFor a player entity in a platform game this would be a component that is added to all entities\nthat the player should be able to walk on.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Color, Gravity\")\n  .color(\"red\")\n  .attr({ w: 100, h: 100 })\n  .gravity(\"platform\");\n```"
                    }
                ]
            }
        ],
        "name": ".gravity",
        "comp": "Gravity"
    },
    {
        "file": "src/2D.js",
        "startLine": 1003,
        "endLine": 1018,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .gravityConst(g)",
                "contents": [
                    {
                        "type": "param",
                        "name": "g",
                        "description": "gravitational constant"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nSet the gravitational constant to g. The default is .2. The greater g, the faster the object falls.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Color, Gravity\")\n  .color(\"red\")\n  .attr({ w: 100, h: 100 })\n  .gravity(\"platform\")\n  .gravityConst(2)\n```"
                    }
                ]
            }
        ],
        "name": ".gravityConst",
        "comp": "Gravity"
    },
    {
        "file": "src/2D.js",
        "startLine": 1079,
        "endLine": 1083,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .antigravity()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Disable gravity for this component. It can be reenabled by calling .gravity()"
            }
        ],
        "name": ".antigravity",
        "comp": "Gravity"
    },
    {
        "file": "src/2D.js",
        "startLine": 1090,
        "endLine": 1109,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nPolygon object used for hitboxes and click maps. Must pass an Array for each point as an\nargument where index 0 is the x position and index 1 is the y position.\n\nFor example one point of a polygon will look like this: `[0,5]` where the `x` is `0` and the `y` is `5`.\n\nCan pass an array of the points or simply put each point as an argument.\n\nWhen creating a polygon for an entity, each point should be offset or relative from the entities `x` and `y`\n(don't include the absolute values as it will automatically calculate this).\n\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nnew Crafty.polygon([50,0],[100,100],[0,100]);\nnew Crafty.polygon([[50,0],[100,100],[0,100]]);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.polygon",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/2D.js",
        "startLine": 1119,
        "endLine": 1133,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .containsPoint(Number x, Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X position of the point"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y position of the point"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nMethod is used to determine if a given point is contained by the polygon.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar poly = new Crafty.polygon([50,0],[100,100],[0,100]);\npoly.containsPoint(50, 50); //TRUE\npoly.containsPoint(0, 0); //FALSE\n```"
                    }
                ]
            }
        ],
        "name": ".containsPoint",
        "comp": "Crafty.polygon"
    },
    {
        "file": "src/2D.js",
        "startLine": 1148,
        "endLine": 1162,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void .shift(Number x, Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "Amount to shift the `x` axis"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Amount to shift the `y` axis"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nShifts every single point in the polygon by the specified amount.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar poly = new Crafty.polygon([50,0],[100,100],[0,100]);\npoly.shift(5,5);\n//[[55,5], [105,5], [5,105]];\n```"
                    }
                ]
            }
        ],
        "name": ".shift",
        "comp": "Crafty.polygon"
    },
    {
        "file": "src/2D.js",
        "startLine": 1192,
        "endLine": 1207,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Circle object used for hitboxes and click maps. Must pass a `x`, a `y` and a `radius` value.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar centerX = 5,\n    centerY = 10,\n    radius = 25;\n\nnew Crafty.circle(centerX, centerY, radius);\n```\n\nWhen creating a circle for an entity, each point should be offset or relative from the entities `x` and `y`\n(don't include the absolute values as it will automatically calculate this)."
                    }
                ]
            }
        ],
        "name": "Crafty.circle",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/2D.js",
        "startLine": 1225,
        "endLine": 1239,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .containsPoint(Number x, Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X position of the point"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y position of the point"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nMethod is used to determine if a given point is contained by the circle.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar circle = new Crafty.circle(0, 0, 10);\ncircle.containsPoint(0, 0); //TRUE\ncircle.containsPoint(50, 50); //FALSE\n```"
                    }
                ]
            }
        ],
        "name": ".containsPoint",
        "comp": "Crafty.circle"
    },
    {
        "file": "src/2D.js",
        "startLine": 1250,
        "endLine": 1264,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void .shift(Number x, Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "Amount to shift the `x` axis"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Amount to shift the `y` axis"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nShifts the circle by the specified amount.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar circle = new Crafty.circle(0, 0, 10);\ncircle.shift(5,5);\n//{x: 5, y: 5, radius: 10};\n```"
                    }
                ]
            }
        ],
        "name": ".shift",
        "comp": "Crafty.circle"
    },
    {
        "file": "src/DOM.js",
        "startLine": 4,
        "endLine": 7,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Draws entities as DOM nodes, specifically `<DIV>`s."
            }
        ],
        "name": "DOM",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/DOM.js",
        "startLine": 10,
        "endLine": 13,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "The DOM element used to represent the entity."
            }
        ],
        "name": "._element",
        "comp": "DOM"
    },
    {
        "file": "src/DOM.js",
        "startLine": 19,
        "endLine": 22,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Avoids using of CSS 3D Transform for positioning when true. Default value is false."
            }
        ],
        "name": ".avoidCss3dTransforms",
        "comp": "DOM"
    },
    {
        "file": "src/DOM.js",
        "startLine": 58,
        "endLine": 63,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .getId()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nGet the Id of the DOM element used to represent the entity."
            }
        ],
        "name": ".getDomId",
        "comp": "DOM"
    },
    {
        "file": "src/DOM.js",
        "startLine": 102,
        "endLine": 109,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Draw",
                        "description": "when the entity is ready to be drawn to the stage",
                        "objName": "Data",
                        "objProp": "{ style:String, type:\"DOM\", co}"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .DOM(HTMLElement elem)",
                "contents": [
                    {
                        "type": "param",
                        "name": "elem",
                        "description": "HTML element that will replace the dynamically created one"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nPass a DOM element to use rather than one created. Will set `._element` to this value. Removes the old element."
            }
        ],
        "name": ".DOM",
        "comp": "DOM"
    },
    {
        "file": "src/DOM.js",
        "startLine": 120,
        "endLine": 125,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .draw(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nUpdates the CSS properties of the node to draw on the stage."
            }
        ],
        "name": ".draw",
        "comp": "DOM"
    },
    {
        "file": "src/DOM.js",
        "startLine": 212,
        "endLine": 217,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .undraw(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nRemoves the element from the stage."
            }
        ],
        "name": ".undraw",
        "comp": "DOM"
    },
    {
        "file": "src/DOM.js",
        "startLine": 227,
        "endLine": 255,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public css(String property, String value)",
                "contents": [
                    {
                        "type": "param",
                        "name": "property",
                        "description": "CSS property to modify"
                    },
                    {
                        "type": "param",
                        "name": "value",
                        "description": "Value to give the CSS property"
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public  css(Object map)",
                "contents": [
                    {
                        "type": "param",
                        "name": "map",
                        "description": "Object where the key is the CSS property and the value is CSS value"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nApply CSS styles to the element.\n\nCan pass an object where the key is the style property and the value is style value.\n\nFor setting one style, simply pass the style as the first argument and the value as the second.\n\nThe notation can be CSS or JS (e.g. `text-align` or `textAlign`).\n\nTo return a value, pass the property.\n\nNote: For entities with \"Text\" component, some css properties are controlled by separate functions\n`.textFont()` and `.textColor()`, and ignore `.css()` settings. See Text component for details.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.css({'text-align': 'center', 'text-decoration': 'line-through'});\nthis.css(\"textAlign\", \"center\");\nthis.css(\"text-align\"); //returns center\n```"
                    }
                ]
            }
        ],
        "name": ".css",
        "comp": "DOM"
    },
    {
        "file": "src/DOM.js",
        "startLine": 290,
        "endLine": 294,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCollection of utilities for using the DOM."
            }
        ],
        "name": "Crafty.DOM",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/DOM.js",
        "startLine": 297,
        "endLine": 302,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nObject with `width` and `height` values representing the width\nand height of the `window`."
            }
        ],
        "name": "Crafty.DOM.window",
        "comp": "Crafty.DOM"
    },
    {
        "file": "src/DOM.js",
        "startLine": 347,
        "endLine": 355,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.DOM.inner(HTMLElement obj)",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "HTML element to calculate the position"
                    },
                    {
                        "type": "return",
                        "value": "Object with `x` key being the `x` position, `y` being the `y` position"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nFind a DOM elements position including\npadding and border."
            }
        ],
        "name": "Crafty.DOM.inner",
        "comp": "Crafty.DOM"
    },
    {
        "file": "src/DOM.js",
        "startLine": 375,
        "endLine": 383,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.DOM.getStyle(HTMLElement obj, String property)",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "HTML element to find the style"
                    },
                    {
                        "type": "param",
                        "name": "property",
                        "description": "Style to return"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nDetermine the value of a style on an HTML element. Notation can be\nin either CSS or JS."
            }
        ],
        "name": "Crafty.DOM.getStyle",
        "comp": "Crafty.DOM"
    },
    {
        "file": "src/DOM.js",
        "startLine": 414,
        "endLine": 425,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.DOM.translate(Number clientX, Number clientY)",
                "contents": [
                    {
                        "type": "param",
                        "name": "clientX",
                        "description": "clientX position in the browser screen"
                    },
                    {
                        "type": "param",
                        "name": "clientY",
                        "description": "clientY position in the browser screen"
                    },
                    {
                        "type": "return",
                        "value": "Object `{x: ..., y: ...}` with Crafty coordinates."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nThe parameters clientX and clientY are pixel coordinates within the visible\nbrowser window. This function translates those to Crafty coordinates (i.e.,\nthe coordinates that you might apply to an entity), by taking into account\nwhere the stage is within the screen, what the current viewport is, etc."
            }
        ],
        "name": "Crafty.DOM.translate",
        "comp": "Crafty.DOM"
    },
    {
        "file": "src/DebugLayer.js",
        "startLine": 4,
        "endLine": 15,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Draw",
                        "description": "when the entity is ready to be drawn to the stage",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "NoCanvas",
                        "description": "if the browser does not support canvas",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nWhen this component is added to an entity it will be drawn by the DebugCanvas layer.\n\nCrafty.debugCanvas.init() will be automatically called if it is not called already to initialize the canvas element.\n\nTo visualise an object's MBR, use \"VisibleMBR\".  To visualise a \"Collision\" object's hitbox, use \"WiredHitBox\" or \"SolidHitBox\"."
            },
            {
                "type": "xref",
                "xrefs": [
                    "DebugPolygon",
                    "DebugRectangle"
                ]
            }
        ],
        "name": "DebugCanvas",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/DebugLayer.js",
        "startLine": 43,
        "endLine": 47,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public  .debugAlpha(Number alpha)",
                "contents": [
                    {
                        "type": "param",
                        "name": "alpha",
                        "description": "The alpha level the component will be drawn with"
                    }
                ]
            }
        ],
        "name": ".debugAlpha",
        "comp": "DebugCanvas"
    },
    {
        "file": "src/DebugLayer.js",
        "startLine": 54,
        "endLine": 62,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public  .debugFill([String fillStyle])",
                "contents": [
                    {
                        "type": "param",
                        "name": "fillStyle",
                        "description": "The color the component will be filled with.  Defaults to \"red\". Pass the boolean false to turn off filling."
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar myEntity = Crafty.e(\"2D, Collision, SolidHitBox \").debugFill(\"purple\")\n```"
                    }
                ]
            }
        ],
        "name": ".debugFill",
        "comp": "DebugCanvas"
    },
    {
        "file": "src/DebugLayer.js",
        "startLine": 71,
        "endLine": 79,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public  .debugStroke([String strokeStyle])",
                "contents": [
                    {
                        "type": "param",
                        "name": "strokeStyle",
                        "description": "The color the component will be outlined with.  Defaults to \"red\".  Pass the boolean false to turn this off."
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar myEntity = Crafty.e(\"2D, Collision, WiredHitBox \").debugStroke(\"white\")\n```"
                    }
                ]
            }
        ],
        "name": ".debugStroke",
        "comp": "DebugCanvas"
    },
    {
        "file": "src/DebugLayer.js",
        "startLine": 115,
        "endLine": 128,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nA component for rendering an object with a position and dimensions to the debug canvas.\n\n\n```\nvar myEntity = Crafty.e(\"2D, DebugRectangle\")\n                     .attr({x: 13, y: 37, w: 42, h: 42})\n                     .debugStroke(\"green\");\nmyEntity.debugRectangle(myEntity)\n```"
            },
            {
                "type": "xref",
                "xrefs": [
                    "DebugCanvas"
                ]
            }
        ],
        "name": "DebugRectangle",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/DebugLayer.js",
        "startLine": 135,
        "endLine": 141,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public  .debugRectangle(Object rect)",
                "contents": [
                    {
                        "type": "param",
                        "name": "rect",
                        "description": "an object with _x, _y, _w, and _h to draw"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Sets the rectangle that this component draws to the debug canvas.\n"
            }
        ],
        "name": ".debugRectangle",
        "comp": "DebugRectangle"
    },
    {
        "file": "src/DebugLayer.js",
        "startLine": 172,
        "endLine": 179,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nAdding this component to an entity will cause it's MBR to be drawn to the debug canvas.\n\nThe methods of DebugCanvas can be used to control this component's appearance."
            },
            {
                "type": "xref",
                "xrefs": [
                    "2D",
                    "DebugRectangle",
                    "DebugCanvas"
                ]
            }
        ],
        "name": "VisibleMBR",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/DebugLayer.js",
        "startLine": 201,
        "endLine": 211,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nFor drawing a polygon to the debug canvas\n\nThe methods of DebugCanvas can be used to control this component's appearance -- by default it is neither filled nor outlined\n\nFor debugging hitboxes, use WiredHitBox or SolidHitBox.  For debugging MBR, use VisibleMBR\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "DebugCanvas"
                ]
            }
        ],
        "name": "DebugPolygon",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/DebugLayer.js",
        "startLine": 219,
        "endLine": 225,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public  .debugPolygon(Polygon poly)",
                "contents": [
                    {
                        "type": "param",
                        "name": "poly",
                        "description": "a polygon to render"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Sets the polygon that this component renders to the debug canvas.\n"
            }
        ],
        "name": ".debugPolygon",
        "comp": "DebugPolygon"
    },
    {
        "file": "src/DebugLayer.js",
        "startLine": 253,
        "endLine": 260,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nAdding this component to an entity with a Collision component will cause its collision polygon to be drawn to the debug canvas as an outline\n\nThe methods of DebugCanvas can be used to control this component's appearance."
            },
            {
                "type": "xref",
                "xrefs": [
                    "DebugPolygon",
                    "DebugCanvas"
                ]
            }
        ],
        "name": "WiredHitBox",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/DebugLayer.js",
        "startLine": 274,
        "endLine": 281,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nAdding this component to an entity with a Collision component will cause its collision polygon to be drawn to the debug canvas, with a default alpha level of 0.7.\n\nThe methods of DebugCanvas can be used to control this component's appearance."
            },
            {
                "type": "xref",
                "xrefs": [
                    "DebugPolygon",
                    "DebugCanvas"
                ]
            }
        ],
        "name": "SolidHitBox",
        "categories": [
            "Debug"
        ]
    },
    {
        "file": "src/HashMap.js",
        "startLine": 10,
        "endLine": 17,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.HashMap([cellsize])",
                "contents": [
                    {
                        "type": "param",
                        "name": "cellsize",
                        "description": "the cell size. If omitted, `cellsize` is 64."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nSet `cellsize`.\nAnd create `this.map`."
            }
        ],
        "name": "Crafty.HashMap.constructor",
        "comp": "Crafty.HashMap"
    },
    {
        "file": "src/HashMap.js",
        "startLine": 30,
        "endLine": 41,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.map.insert(Object obj)",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "An entity to be inserted."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\n`obj` is inserted in '.map' of the corresponding broad phase cells. An object of the following fields is returned.\n```\n- the object that keep track of cells (keys)\n- `obj`\n- the HashMap object\n```"
            }
        ],
        "name": "Crafty.map.insert",
        "comp": "Crafty.map"
    },
    {
        "file": "src/HashMap.js",
        "startLine": 63,
        "endLine": 72,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.map.search(Object rect[, Boolean filter])",
                "contents": [
                    {
                        "type": "param",
                        "name": "rect",
                        "description": "the rectangular region to search for entities."
                    },
                    {
                        "type": "param",
                        "name": "filter",
                        "description": "Default value is true. Otherwise, must be false."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\n- If `filter` is `false`, just search for all the entries in the give `rect` region by broad phase collision. Entity may be returned duplicated.\n- If `filter` is `true`, filter the above results by checking that they actually overlap `rect`.\nThe easier usage is with `filter`=`true`. For performance reason, you may use `filter`=`false`, and filter the result yourself. See examples in drawing.js and collision.js"
            }
        ],
        "name": "Crafty.map.search",
        "comp": "Crafty.map"
    },
    {
        "file": "src/HashMap.js",
        "startLine": 118,
        "endLine": 131,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.map.remove([Object keys, ]Object obj)",
                "contents": [
                    {
                        "type": "param",
                        "name": "keys",
                        "description": "key region. If omitted, it will be derived from obj by `Crafty.HashMap.key`."
                    },
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "need more document."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nRemove an entity in a broad phase map.\n- The second form is only used in Crafty.HashMap to save time for computing keys again, where keys were computed previously from obj. End users should not call this form directly.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.map.remove(e);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.map.remove",
        "comp": "Crafty.map"
    },
    {
        "file": "src/HashMap.js",
        "startLine": 160,
        "endLine": 171,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.map.remove(Entry entry)",
                "contents": [
                    {
                        "type": "param",
                        "name": "entry",
                        "description": "An entry to update"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nRefresh an entry's keys, and its position in the broad phrase map.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.map.refresh(e);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.map.refresh",
        "comp": "Crafty.map"
    },
    {
        "file": "src/HashMap.js",
        "startLine": 210,
        "endLine": 227,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.map.boundaries()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nThe return `Object` is of the following format.\n```\n{\n  min: {\n    x: val_x,\n    y: val_y\n  },\n  max: {\n    x: val_x,\n    y: val_y\n  }\n}\n```"
            }
        ],
        "name": "Crafty.map.boundaries",
        "comp": "Crafty.map"
    },
    {
        "file": "src/HashMap.js",
        "startLine": 305,
        "endLine": 312,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Broad-phase collision detection engine. See background information at\n\n- [N Tutorial B - Broad-Phase Collision](http://www.metanetsoftware.com/technique/tutorialB.html)\n- [Broad-Phase Collision Detection with CUDA](http.developer.nvidia.com/GPUGems3/gpugems3_ch32.html)"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.map"
                ]
            }
        ],
        "name": "Crafty.HashMap",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/HashMap.js",
        "startLine": 315,
        "endLine": 323,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.HashMap.key(Object obj)",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "an Object that has .mbr() or _x, _y, _w and _h."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Get the rectangular region (in terms of the grid, with grid size `cellsize`), where the object may fall in. This region is determined by the object's bounding box.\nThe `cellsize` is 64 by default.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.HashMap.constructor"
                ]
            }
        ],
        "name": "Crafty.HashMap.key",
        "comp": "Crafty.HashMap"
    },
    {
        "file": "src/animation.js",
        "startLine": 81,
        "endLine": 86,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "TweenEnd",
                        "description": "when a tween finishes",
                        "objName": "property",
                        "objProp": "String"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nComponent to animate the change in 2D properties over time."
            }
        ],
        "name": "Tween",
        "categories": [
            "Animation"
        ]
    },
    {
        "file": "src/animation.js",
        "startLine": 120,
        "endLine": 147,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .tween(Object properties, Number|String duration)",
                "contents": [
                    {
                        "type": "param",
                        "name": "properties",
                        "description": "Object of numeric properties and what they should animate to"
                    },
                    {
                        "type": "param",
                        "name": "duration",
                        "description": "Duration to animate the properties over, in milliseconds."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nThis method will animate numeric properties over the specified duration.\nThese include `x`, `y`, `w`, `h`, `alpha` and `rotation`.\n\nThe object passed should have the properties as keys and the value should be the resulting\nvalues of the properties.  The passed object might be modified if later calls to tween animate the same properties.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Move an object to 100,100 and fade out over 200 ms.\n```\nCrafty.e(\"2D, Tween\")\n   .attr({alpha: 1.0, x: 0, y: 0})\n   .tween({alpha: 0.0, x: 100, y: 100}, 200)\n```"
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Rotate an object over 2 seconds\n```\nCrafty.e(\"2D, Tween\")\n   .attr({rotation:0})\n   .tween({rotation:180}, 2000)\n```\n"
                    }
                ]
            }
        ],
        "name": ".tween",
        "comp": "Tween"
    },
    {
        "file": "src/animation.js",
        "startLine": 172,
        "endLine": 182,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .cancelTween(String target)",
                "contents": [
                    {
                        "type": "param",
                        "name": "target",
                        "description": "The property to cancel"
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public this .cancelTween(Object target)",
                "contents": [
                    {
                        "type": "param",
                        "name": "target",
                        "description": "An object containing the properties to cancel."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nStops tweening the specified property or properties.\nPassing the object used to start the tween might be a typical use of the second signature."
            }
        ],
        "name": ".cancelTween",
        "comp": "Tween"
    },
    {
        "file": "src/canvas.js",
        "startLine": 4,
        "endLine": 19,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Draw",
                        "description": "when the entity is ready to be drawn to the stage",
                        "objName": "Data",
                        "objProp": "{type: \"canvas\", pos, co, ctx}"
                    },
                    {
                        "type": "trigger",
                        "event": "NoCanvas",
                        "description": "if the browser does not support canvas",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nWhen this component is added to an entity it will be drawn to the global canvas element. The canvas element (and hence all Canvas entities) is always rendered below any DOM entities.\n\nCrafty.canvas.init() will be automatically called if it is not called already to initialize the canvas element.\n\nCreate a canvas entity like this\n```\nvar myEntity = Crafty.e(\"2D, Canvas, Color\")\n     .color(\"green\")\n     .attr({x: 13, y: 37, w: 42, h: 42});\n```"
            }
        ],
        "name": "Canvas",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/canvas.js",
        "startLine": 52,
        "endLine": 62,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .draw([[Context ctx, ]Number x, Number y, Number w, Number h])",
                "contents": [
                    {
                        "type": "param",
                        "name": "ctx",
                        "description": "Canvas 2D context if drawing on another canvas is required"
                    },
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X offset for drawing a segment"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y offset for drawing a segment"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "Width of the segment to draw"
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "Height of the segment to draw"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nMethod to draw the entity on the canvas element. Can pass rect values for redrawing a segment of the entity."
            }
        ],
        "name": ".draw",
        "comp": "Canvas"
    },
    {
        "file": "src/canvas.js",
        "startLine": 148,
        "endLine": 152,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCollection of methods to draw on canvas."
            }
        ],
        "name": "Crafty.canvas",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/canvas.js",
        "startLine": 156,
        "endLine": 161,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nThis will return the 2D context of the main canvas element.\nThe value returned from `Crafty.canvas._canvas.getContext('2d')`."
            }
        ],
        "name": "Crafty.canvas.context",
        "comp": "Crafty.canvas"
    },
    {
        "file": "src/canvas.js",
        "startLine": 164,
        "endLine": 168,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nMain Canvas element"
            }
        ],
        "name": "Crafty.canvas._canvas",
        "comp": "Crafty.canvas"
    },
    {
        "file": "src/canvas.js",
        "startLine": 171,
        "endLine": 181,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.canvas.init(void)",
                "contents": []
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NoCanvas",
                        "description": "triggered if `Crafty.support.canvas` is false",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nCreates a `canvas` element inside `Crafty.stage.elem`. Must be called\nbefore any entities with the Canvas component can be drawn.\n\nThis method will automatically be called if no `Crafty.canvas.context` is\nfound."
            }
        ],
        "name": "Crafty.canvas.init",
        "comp": "Crafty.canvas"
    },
    {
        "file": "src/collision.js",
        "startLine": 5,
        "endLine": 23,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "HitOn",
                        "description": "Triggered when collisions occur. Will not trigger again until collisions of this type cease, or an event is requested once more (using `resetHitChecks(component)`).",
                        "objName": "Data",
                        "objProp": "{ hitData }"
                    },
                    {
                        "type": "trigger",
                        "event": "HitOff",
                        "description": "Triggered when collision with a specific component type ceases",
                        "objName": "Data",
                        "objProp": "{ componentName }"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nComponent to detect collision between any two convex polygons.\n\nIf collision checks are registered for multiple component and collisions with\nmultiple types occur simultaniously, each collision will cause an individual\nevent to fire.\n\n**Note:** All data received from events is only valid for the duration of the event's callback.\nIf you wish to preserve the data, make a copy of it.\n\nFor a description of collision event data (hitData above), see the documentation for\n`.hit()`.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".hit",
                    ".checkHits",
                    ".onHit"
                ]
            }
        ],
        "name": "Collision",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/collision.js",
        "startLine": 26,
        "endLine": 34,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Set up collision handling.\n\nBy default, the collision hitbox will match the dimensions (x, y, w, h) and rotation of the object.\n\n**Note:** If the entity this component is applied to does not have its\ndimensions set the default hit area will not be set properly."
            }
        ],
        "name": ".init",
        "comp": "Collision"
    },
    {
        "file": "src/collision.js",
        "startLine": 51,
        "endLine": 81,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewHitbox",
                        "description": "when a new hitbox is assigned",
                        "objName": "Data",
                        "objProp": "Crafty.polygon"
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public this .collision([Crafty.polygon polygon])",
                "contents": [
                    {
                        "type": "param",
                        "name": "polygon",
                        "description": "Crafty.polygon object that will act as the hit area."
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public this .collision(Array point1, .., Array pointN)",
                "contents": [
                    {
                        "type": "param",
                        "name": "point#",
                        "description": "Array of [x, y] coordinate pairs to generate a hit area polygon."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nConstructor that takes a polygon or array of points to use as the hit area,\nwith points being relative to the object's position in its unrotated state.\n\nThe hit area must be a convex shape and not concave for collision detection to work properly.\n\nIf no parameter is passed, the x, y, w, h properties of the entity will be used, and the hitbox will be resized when the entity is.\n\nIf a hitbox is set that is outside of the bounds of the entity itself, there will be a small performance penalty as it is tracked separately.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, Collision\").collision(\n    new Crafty.polygon([50,0], [100,100], [0,100])\n);\n\nCrafty.e(\"2D, Collision\").collision([50,0], [100,100], [0,100]);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.polygon"
                ]
            }
        ],
        "name": ".collision",
        "comp": "Collision"
    },
    {
        "file": "src/collision.js",
        "startLine": 226,
        "endLine": 257,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean/Array hit(String component)",
                "contents": [
                    {
                        "type": "param",
                        "name": "component",
                        "description": "Check collision with entities that have this component"
                    },
                    {
                        "type": "raw",
                        "value": "applied to them."
                    },
                    {
                        "type": "return",
                        "value": "`false` if there is no collision. If a collision is detected,"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "returns an Array of collision data objects (see below).\n\nTests for collisions with entities that have the specified component\napplied to them.\nIf a collision is detected, data regarding the collision will be present in\nthe array returned by this method.\nIf no collisions occur, this method returns false.\n\nFollowing is a description of a collision data object that this method may\nreturn: The returned collision data will be an Array of Objects with the\ntype of collision used, the object collided and if the type used was SAT (a polygon was used as the hitbox) then an amount of overlap.\n```\n[{\n   obj: [entity],\n   type: [\"MBR\" or \"SAT\"],\n   overlap: [number]\n}]\n```\n**obj:** The entity with which the collision occured.\n**type:** Collision detection method used. One of:\n+ *MBR:* Standard axis aligned rectangle intersection (`.intersect` in the 2D component).\n+ *SAT:* Collision between any two convex polygons. Used when both colliding entities have the `Collision` component applied to them.\n**overlap:** If SAT collision was used, this will signify the overlap percentage between the colliding entities.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "2D"
                ]
            }
        ],
        "name": ".hit",
        "comp": "Collision"
    },
    {
        "file": "src/collision.js",
        "startLine": 310,
        "endLine": 323,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .onHit(String component, Function hit[, Function noHit])",
                "contents": [
                    {
                        "type": "param",
                        "name": "component",
                        "description": "Component to check collisions for."
                    },
                    {
                        "type": "param",
                        "name": "hit",
                        "description": "Callback method to execute upon collision with component. Will be passed the results of the collision check in the same format documented for hit()."
                    },
                    {
                        "type": "param",
                        "name": "noHit",
                        "description": "Callback method executed once as soon as collision stops."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nCreates an EnterFrame event calling .hit() each frame.  When a collision is detected the callback will be invoked.\nNote that the `hit` callback will be invoked every frame the collision is active, not just the first time the collision occurs.\nIf you want more fine-grained control consider using `.checkHits` or `.hit`.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".checkHits",
                    ".hit"
                ]
            }
        ],
        "name": ".onHit",
        "comp": "Collision"
    },
    {
        "file": "src/collision.js",
        "startLine": 343,
        "endLine": 355,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void .checkHits(String component, Object collisionData)",
                "contents": [
                    {
                        "type": "param",
                        "name": "component",
                        "description": "The name of the component for which this handler"
                    },
                    {
                        "type": "raw",
                        "value": "checks for collisions."
                    },
                    {
                        "type": "param",
                        "name": "collisionData",
                        "description": "Collision data object used to track collisions with"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "the specified component.\n\nThis is a helper method for creating collisions handlers set up by\n`.checkHits(...)`. Do not call this directly.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".checkHits"
                ]
            }
        ],
        "name": "._createCollisionHandler",
        "comp": "Collision"
    },
    {
        "file": "src/collision.js",
        "startLine": 377,
        "endLine": 415,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .checkHits(String componentList)",
                "contents": [
                    {
                        "type": "param",
                        "name": "componentList",
                        "description": "A comma seperated list of components to check for collisions with."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .checkHits(String component1[, .., String componentN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "component#",
                        "description": "A component to check for collisions with."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nPerforms collision checks against all entities that have at least one of\nthe components specified when calling this method. If collisions occur,\na \"HitOn\" event containing the collision information will be fired for the\nentity on which this method was invoked. See the documentation for `.hit()`\nfor a description of collision data contained in the event.\nWhen a collision that was reported ends, a corresponding \"HitOff\" event\nwill be fired.\n\nCalling this method more than once for the same component type will not\ncause redundant hit checks.\n\n**Note:** Hit checks are performed upon entering each new frame (using\nthe *EnterFrame* event). It is entirely possible for object to move in\nsaid frame after the checks were performed (even if the more is the\nresult of *EnterFrame*, as handlers run in no particular order). In such\na case, the hit events will not fire until the next check is performed in\nthe following frame.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, Collision\")\n    .checkHits('Solid') // check for collisions with entities that have the Solid component in each frame\n    .bind(\"HitOn\", function(hitData) {\n        console.log(\"Collision with Solid entity occurred for the first time.\");\n    })\n    .bind(\"HitOff\", function(comp) {\n        console.log(\"Collision with Solid entity ended.\");\n    });\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".hit"
                ]
            }
        ],
        "name": ".checkHits",
        "comp": "Collision"
    },
    {
        "file": "src/collision.js",
        "startLine": 443,
        "endLine": 468,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .ignoreHits()",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public this .ignoreHits(String componentList)",
                "contents": [
                    {
                        "type": "param",
                        "name": "componentList",
                        "description": "A comma seperated list of components to stop checking"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "for collisions with."
            },
            {
                "type": "method",
                "signature": "public this .ignoreHits(String component1[, .., String componentN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "component#",
                        "description": "A component to stop checking for collisions with."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nStops checking for collisions with all, or certain, components. If called\nwithout arguments, this method will cause all collision checks on the\nentity to cease. To disable checks for collisions with specific\ncomponents, specify the components as a comma separated string or as\na set of arguments.\n\nCalling this method with component names for which there are no collision\nchecks has no effect.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, Collision\")\n    .checkHits('Solid')\n    ...\n    .ignoreHits('Solid'); // stop checking for collisions with entities that have the Solid component\n```"
                    }
                ]
            }
        ],
        "name": ".ignoreHits",
        "comp": "Collision"
    },
    {
        "file": "src/collision.js",
        "startLine": 502,
        "endLine": 532,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .resetHitChecks()",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public this .resetHitChecks(String componentList)",
                "contents": [
                    {
                        "type": "param",
                        "name": "componentList",
                        "description": "A comma seperated list of components to re-check"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "for collisions with."
            },
            {
                "type": "method",
                "signature": "public this .resetHitChecks(String component1[, .., String componentN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "component#",
                        "description": "A component to re-check for collisions with."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nCauses collision events to be received for collisions that are already\ntaking place (normally, an additional event would not fire before said\ncollisions cease and happen another time).\nIf called without arguments, this method will cause all collision checks on the\nentity to fire events once more. To re-check for collisions with specific\ncomponents, specify the components as a comma separated string or as\na set of arguments.\n\nCalling this method with component names for which there are no collision\nchecks has no effect.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// this example fires the HitOn event each frame the collision with the Solid entity is active, instead of just the first time the collision occurs.\nCrafty.e(\"2D, Collision\")\n    .checkHits('Solid')\n    .bind(\"HitOn\", function(hitData) {\n        console.log(\"Collision with Solid entity was reported in this frame again!\");\n        this.resetHitChecks('Solid'); // fire the HitOn event in the next frame also, if the collision is still active.\n    })\n```"
                    }
                ]
            }
        ],
        "name": ".resetHitChecks",
        "comp": "Collision"
    },
    {
        "file": "src/color.js",
        "startLine": 7,
        "endLine": 15,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "Crafty.assignColor(color[, assignee])",
                "contents": [
                    {
                        "type": "param",
                        "name": "color",
                        "description": "a string represenation of the color to assign, in any valid HTML format"
                    },
                    {
                        "type": "param",
                        "name": "assignee",
                        "description": "an object to use instead of creating one from scratch"
                    },
                    {
                        "type": "return",
                        "value": "An object with `_red`, `_green`, and `_blue` properties assigned."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "          Potentially with `_strength` representing the alpha channel.\n          If the assignee parameter is passed, that object will be assigned those values and returned."
            }
        ],
        "name": "Crafty.assignColor",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/color.js",
        "startLine": 137,
        "endLine": 140,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Draw a colored rectangle."
            }
        ],
        "name": "Color",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/color.js",
        "startLine": 175,
        "endLine": 208,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "description": "when the color changes",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nWill assign the color and opacity, either through a string shorthand, or through explicit rgb values."
            },
            {
                "type": "method",
                "signature": "public this .color(String color[, Float strength])",
                "contents": [
                    {
                        "type": "param",
                        "name": "color",
                        "description": "Color of the rectangle"
                    },
                    {
                        "type": "param",
                        "name": "strength",
                        "description": "the opacity of the rectangle"
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public this .color(r, g, b[, strength])",
                "contents": [
                    {
                        "type": "param",
                        "name": "r",
                        "description": "value for the red channel"
                    },
                    {
                        "type": "param",
                        "name": "g",
                        "description": "value for the green channel"
                    },
                    {
                        "type": "param",
                        "name": "b",
                        "description": "value for the blue channel"
                    },
                    {
                        "type": "param",
                        "name": "strength",
                        "description": "the opacity of the rectangle"
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public String .color()",
                "contents": [
                    {
                        "type": "return",
                        "value": "A string representing the current color as a CSS property."
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar c = Crafty.e(\"2D, DOM, Color\");\nc.color(\"#FF0000\");\nc.color(\"red\");\nc.color(255, 0, 0);\nc.color(\"rgb(255, 0, 0\")\n```\nThree different ways of assign the color red.\n```\nvar c = Crafty.e(\"2D, DOM, Color\");\nc.color(\"#00FF00\", 0.5);\nc.color(\"rgba(0, 255, 0, 0.5)\");\n```\nTwo ways of assigning a transparent green color."
                    }
                ]
            }
        ],
        "name": ".color",
        "comp": "Color"
    },
    {
        "file": "src/controls.js",
        "startLine": 12,
        "endLine": 28,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Remembering what keys (referred by Unicode) are down.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.c(\"Keyboard\", {\n  isDown: function (key) {\n    if (typeof key === \"string\") {\n      key = Crafty.keys[key];\n    }\n    return !!Crafty.keydown[key];\n  }\n});\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Keyboard",
                    "Crafty.keys"
                ]
            }
        ],
        "name": "Crafty.keydown",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls.js",
        "startLine": 58,
        "endLine": 84,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nInternal method which dispatches mouse events received by Crafty (crafty.stage.elem).\nThe mouse events get dispatched to the closest entity to the source of the event (if available).\n\nYou can read more about the MouseEvent, which is the parameter passed to the callback.\nhttps://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n\nThis method also sets a global property Crafty.lastEvent, which holds the most recent event that\noccured (useful for determining mouse position in every frame).\n```\nvar newestX = Crafty.lastEvent.realX,\n    newestY = Crafty.lastEvent.realY;\n```\n\nNotable properties of a MouseEvent e:\n```\n//(x,y) coordinates of mouse event in web browser screen space\ne.clientX, e.clientY\n//(x,y) coordinates of mouse event in world/viewport space\ne.realX, e.realY\n// Normalized mouse button according to Crafty.mouseButtons\ne.mouseButton\n```"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.touchDispatch"
                ]
            }
        ],
        "name": "Crafty.mouseDispatch",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls.js",
        "startLine": 200,
        "endLine": 208,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nTouchEvents have a different structure then MouseEvents.\nThe relevant data lives in e.changedTouches[0].\nTo normalize TouchEvents we catch them and dispatch a mock MouseEvent instead.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.mouseDispatch"
                ]
            }
        ],
        "name": "Crafty.touchDispatch",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls.js",
        "startLine": 264,
        "endLine": 289,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Keyboard Event triggered by Crafty Core"
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "KeyDown",
                        "description": "is triggered for each entity when the DOM 'keydown' event is triggered.",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "KeyUp",
                        "description": "is triggered for each entity when the DOM 'keyup' event is triggered.",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Color\")\n  .attr({x: 100, y: 100, w: 50, h: 50})\n  .color(\"red\")\n  .bind('KeyDown', function(e) {\n    if(e.key == Crafty.keys.LEFT_ARROW) {\n      this.x = this.x-1;\n    } else if (e.key == Crafty.keys.RIGHT_ARROW) {\n      this.x = this.x+1;\n    } else if (e.key == Crafty.keys.UP_ARROW) {\n      this.y = this.y-1;\n    } else if (e.key == Crafty.keys.DOWN_ARROW) {\n      this.y = this.y+1;\n    }\n  });\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.keys"
                ]
            }
        ],
        "name": "KeyboardEvent",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls.js",
        "startLine": 292,
        "endLine": 296,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nEvent Object used in Crafty for cross browser compatibility"
            }
        ],
        "name": "Crafty.eventObject",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls.js",
        "startLine": 299,
        "endLine": 303,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nUnicode of the key pressed"
            }
        ],
        "name": ".key",
        "comp": "Crafty.eventObject"
    },
    {
        "file": "src/controls.js",
        "startLine": 392,
        "endLine": 430,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Provides the entity with mouse related events"
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "MouseOver",
                        "description": "when the mouse enters",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "MouseOut",
                        "description": "when the mouse leaves",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "MouseDown",
                        "description": "when the mouse button is pressed on",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "MouseUp",
                        "description": "when the mouse button is released on",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "Click",
                        "description": "when the user clicks",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "DoubleClick",
                        "description": "when the user double clicks",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "MouseMove",
                        "description": "when the mouse is over and moves",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nTo be able to use the events on a entity, you have to remember to include the Mouse component, else the events will not get triggered.\n\nYou can read more about the MouseEvent, which is the parameter passed to the callback.\nhttps://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n\nCrafty adds the mouseButton property to MouseEvents that match one of\n\n- Crafty.mouseButtons.LEFT\n- Crafty.mouseButtons.RIGHT\n- Crafty.mouseButtons.MIDDLE\n\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar myEntity = Crafty.e('2D, Canvas, Color, Mouse')\n.attr({x: 10, y: 10, w: 40, h: 40})\n.color('red')\n.bind('Click', function(MouseEvent){\n  alert('clicked', MouseEvent);\n});\n\nmyEntity.bind('MouseUp', function(e) {\n   if( e.mouseButton == Crafty.mouseButtons.RIGHT )\n       console.log(\"Clicked right button\");\n})\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.mouseDispatch"
                ]
            }
        ],
        "name": "Mouse",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls.js",
        "startLine": 440,
        "endLine": 460,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .areaMap(Crafty.polygon polygon)",
                "contents": [
                    {
                        "type": "param",
                        "name": "polygon",
                        "description": "Instance of Crafty.polygon used to check if the mouse coordinates are inside this region"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .areaMap(Array point1, .., Array pointN)",
                "contents": [
                    {
                        "type": "param",
                        "name": "point#",
                        "description": "Array with an `x` and `y` position to generate a polygon"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nAssign a polygon to the entity so that mouse events will only be triggered if\nthe coordinates are inside the given polygon.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Color, Mouse\")\n    .color(\"red\")\n    .attr({ w: 100, h: 100 })\n    .bind('MouseOver', function() {console.log(\"over\")})\n    .areaMap([0,0], [50,0], [50,50], [0,50])\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.polygon"
                ]
            }
        ],
        "name": ".areaMap",
        "comp": "Mouse"
    },
    {
        "file": "src/controls.js",
        "startLine": 479,
        "endLine": 485,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Enable drag and drop of the entity."
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Dragging",
                        "description": "is triggered each frame the entity is being dragged",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "StartDrag",
                        "description": "is triggered when dragging begins",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    },
                    {
                        "type": "trigger",
                        "event": "StopDrag",
                        "description": "is triggered when dragging ends",
                        "objName": "Data",
                        "objProp": "MouseEvent"
                    }
                ]
            }
        ],
        "name": "Draggable",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls.js",
        "startLine": 537,
        "endLine": 559,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .dragDirection()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Remove any previously specified direction.\n"
            },
            {
                "type": "method",
                "signature": "public this .dragDirection(vector)",
                "contents": [
                    {
                        "type": "param",
                        "name": "vector",
                        "description": "Of the form of {x: valx, y: valy}, the vector (valx, valy) denotes the move direction."
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public this .dragDirection(degree)",
                "contents": [
                    {
                        "type": "param",
                        "name": "degree",
                        "description": "A number, the degree (clockwise) of the move direction with respect to the x axis."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Specify the dragging direction.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.dragDirection()\nthis.dragDirection({x:1, y:0}) //Horizontal\nthis.dragDirection({x:0, y:1}) //Vertical\n// Note: because of the orientation of x and y axis,\n// this is 45 degree clockwise with respect to the x axis.\nthis.dragDirection({x:1, y:1}) //45 degree.\nthis.dragDirection(60) //60 degree.\n```"
                    }
                ]
            }
        ],
        "name": ".dragDirection",
        "comp": "Draggable"
    },
    {
        "file": "src/controls.js",
        "startLine": 579,
        "endLine": 584,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Internal method for starting a drag of an entity either programatically or via Mouse click\n"
            },
            {
                "type": "param",
                "name": "e",
                "description": "a mouse event"
            }
        ],
        "name": "._startDrag",
        "comp": "Draggable"
    },
    {
        "file": "src/controls.js",
        "startLine": 597,
        "endLine": 605,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .stopDrag(void)",
                "contents": []
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "StopDrag",
                        "description": "Called right after the mouse listeners are removed",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nStop the entity from dragging. Essentially reproducing the drop.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".startDrag"
                ]
            }
        ],
        "name": ".stopDrag",
        "comp": "Draggable"
    },
    {
        "file": "src/controls.js",
        "startLine": 616,
        "endLine": 623,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .startDrag(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nMake the entity follow the mouse positions.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".stopDrag"
                ]
            }
        ],
        "name": ".startDrag",
        "comp": "Draggable"
    },
    {
        "file": "src/controls.js",
        "startLine": 633,
        "endLine": 640,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .enableDrag(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nRebind the mouse events. Use if `.disableDrag` has been called.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".disableDrag"
                ]
            }
        ],
        "name": ".enableDrag",
        "comp": "Draggable"
    },
    {
        "file": "src/controls.js",
        "startLine": 649,
        "endLine": 656,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .disableDrag(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nStops entity from being draggable. Reenable with `.enableDrag()`.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".enableDrag"
                ]
            }
        ],
        "name": ".disableDrag",
        "comp": "Draggable"
    },
    {
        "file": "src/controls.js",
        "startLine": 667,
        "endLine": 670,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Give entities keyboard events (`keydown` and `keyup`)."
            }
        ],
        "name": "Keyboard",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls.js",
        "startLine": 673,
        "endLine": 688,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean isDown(String keyName)",
                "contents": [
                    {
                        "type": "param",
                        "name": "keyName",
                        "description": "Name of the key to check. See `Crafty.keys`."
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Boolean isDown(Number keyCode)",
                "contents": [
                    {
                        "type": "param",
                        "name": "keyCode",
                        "description": "Key code in `Crafty.keys`."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nDetermine if a certain key is currently down.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nentity.requires('Keyboard').bind('KeyDown', function () { if (this.isDown('SPACE')) jump(); });\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.keys"
                ]
            }
        ],
        "name": ".isDown",
        "comp": "Keyboard"
    },
    {
        "file": "src/controls.js",
        "startLine": 698,
        "endLine": 703,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Used to bind keys to directions and have the entity move accordingly"
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewDirection",
                        "description": "triggered when direction changes",
                        "objName": "New direction",
                        "objProp": "{ x:Number, y:Number }"
                    },
                    {
                        "type": "trigger",
                        "event": "Moved",
                        "description": "triggered on movement on either x or y axis. If the entity has moved on both axes for diagonal movement the event is triggered twice",
                        "objName": "Old position",
                        "objProp": "{ x:Number, y:Number }"
                    }
                ]
            }
        ],
        "name": "Multiway",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls.js",
        "startLine": 752,
        "endLine": 768,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .multiway([Number speed,] Object keyBindings )",
                "contents": [
                    {
                        "type": "param",
                        "name": "speed",
                        "description": "Amount of pixels to move the entity whilst a key is down"
                    },
                    {
                        "type": "param",
                        "name": "keyBindings",
                        "description": "What keys should make the entity go in which direction. Direction is specified in degrees"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Constructor to initialize the speed and keyBindings. Component will listen to key events and move the entity appropriately.\n\nWhen direction changes a NewDirection event is triggered with an object detailing the new direction: {x: x_movement, y: y_movement}\nWhen entity has moved on either x- or y-axis a Moved event is triggered with an object specifying the old position {x: old_x, y: old_y}\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.multiway(3, {UP_ARROW: -90, DOWN_ARROW: 90, RIGHT_ARROW: 0, LEFT_ARROW: 180});\nthis.multiway({x:3,y:1.5}, {UP_ARROW: -90, DOWN_ARROW: 90, RIGHT_ARROW: 0, LEFT_ARROW: 180});\nthis.multiway({W: -90, S: 90, D: 0, A: 180});\n```"
                    }
                ]
            }
        ],
        "name": ".multiway",
        "comp": "Multiway"
    },
    {
        "file": "src/controls.js",
        "startLine": 811,
        "endLine": 821,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .enableControl()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nEnable the component to listen to key events.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.enableControl();\n```"
                    }
                ]
            }
        ],
        "name": ".enableControl",
        "comp": "Multiway"
    },
    {
        "file": "src/controls.js",
        "startLine": 828,
        "endLine": 838,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .disableControl()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nDisable the component to listen to key events.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.disableControl();\n```"
                    }
                ]
            }
        ],
        "name": ".disableControl",
        "comp": "Multiway"
    },
    {
        "file": "src/controls.js",
        "startLine": 846,
        "endLine": 857,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .speed(Number speed)",
                "contents": [
                    {
                        "type": "param",
                        "name": "speed",
                        "description": "The speed the entity has."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nChange the speed that the entity moves with.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.speed(2);\n```"
                    }
                ]
            }
        ],
        "name": ".speed",
        "comp": "Multiway"
    },
    {
        "file": "src/controls.js",
        "startLine": 871,
        "endLine": 875,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Move an entity in four directions by using the\narrow keys or `W`, `A`, `S`, `D`."
            }
        ],
        "name": "Fourway",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls.js",
        "startLine": 883,
        "endLine": 896,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .fourway(Number speed)",
                "contents": [
                    {
                        "type": "param",
                        "name": "speed",
                        "description": "Amount of pixels to move the entity whilst a key is down"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Constructor to initialize the speed. Component will listen for key events and move the entity appropriately.\nThis includes `Up Arrow`, `Right Arrow`, `Down Arrow`, `Left Arrow` as well as `W`, `A`, `S`, `D`.\n\nWhen direction changes a NewDirection event is triggered with an object detailing the new direction: {x: x_movement, y: y_movement}\nWhen entity has moved on either x- or y-axis a Moved event is triggered with an object specifying the old position {x: old_x, y: old_y}\n\nThe key presses will move the entity in that direction by the speed passed in the argument.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Multiway"
                ]
            }
        ],
        "name": ".fourway",
        "comp": "Fourway"
    },
    {
        "file": "src/controls.js",
        "startLine": 916,
        "endLine": 922,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewDirection",
                        "description": "When direction changes a NewDirection event is triggered with an object detailing the new direction: {x: x_movement, y: y_movement}. This is consistent with Fourway and Multiway components.",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "Moved",
                        "description": "When entity has moved on x-axis a Moved event is triggered with an object specifying the old position {x: old_x, y: old_y}",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nMove an entity left or right using the arrow keys or `D` and `A` and jump using up arrow or `W`."
            }
        ],
        "name": "Twoway",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/controls.js",
        "startLine": 932,
        "endLine": 947,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .twoway(Number speed[, Number jump])",
                "contents": [
                    {
                        "type": "param",
                        "name": "speed",
                        "description": "Amount of pixels to move left or right"
                    },
                    {
                        "type": "param",
                        "name": "jump",
                        "description": "Vertical jump speed"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nConstructor to initialize the speed and power of jump. Component will\nlisten for key events and move the entity appropriately. This includes\n`Up Arrow`, `Right Arrow`, `Left Arrow` as well as `W`, `A`, `D`. Used with the\n`gravity` component to simulate jumping.\n\nThe key presses will move the entity in that direction by the speed passed in\nthe argument. Pressing the `Up Arrow` or `W` will cause the entity to jump.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Gravity",
                    "Fourway"
                ]
            }
        ],
        "name": ".twoway",
        "comp": "Twoway"
    },
    {
        "file": "src/core.js",
        "startLine": 3,
        "endLine": 37,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Select a set of or single entities by components or an entity's ID.\n\nCrafty uses syntax similar to jQuery by having a selector engine to select entities by their components.\n\nIf there is more than one match, the return value is an Array-like object listing the ID numbers of each matching entity. If there is exactly one match, the entity itself is returned. If you're not sure how many matches to expect, check the number of matches via Crafty(...).length. Alternatively, use Crafty(...).each(...), which works in all cases.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n   Crafty(\"MyComponent\")\n   Crafty(\"Hello 2D Component\")\n   Crafty(\"Hello, 2D, Component\")\n```\n\nThe first selector will return all entities that have the component `MyComponent`. The second will return all entities that have `Hello` and `2D` and `Component` whereas the last will return all entities that have at least one of those components (or).\n\n```\n  Crafty(\"*\")\n```\nPassing `*` will select all entities.\n\n```\n  Crafty(1)\n```\nPassing an integer will select the entity with that `ID`.\n\nTo work directly with an array of entities, use the `get()` method on a selection.\nTo call a function in the context of each entity, use the `.each()` method.\n\nThe event related methods such as `bind` and `trigger` will work on selections of entities.\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".get",
                    ".each"
                ]
            }
        ],
        "name": "Crafty",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 64,
        "endLine": 72,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewEntityName",
                        "description": "After setting new name for entity",
                        "objName": "entity name",
                        "objProp": "String"
                    },
                    {
                        "type": "trigger",
                        "event": "NewComponent",
                        "description": "when a new component is added to the entity",
                        "objName": "Component",
                        "objProp": "String"
                    },
                    {
                        "type": "trigger",
                        "event": "RemoveComponent",
                        "description": "when a component is removed from the entity",
                        "objName": "Component",
                        "objProp": "String"
                    },
                    {
                        "type": "trigger",
                        "event": "Remove",
                        "description": "when the entity is removed by calling .destroy()",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nSet of methods added to every single entity."
            }
        ],
        "name": "Crafty Core",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 175,
        "endLine": 184,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .setName(String name)",
                "contents": [
                    {
                        "type": "param",
                        "name": "name",
                        "description": "A human readable name for debugging purposes."
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.setName(\"Player\");\n```"
                    }
                ]
            }
        ],
        "name": ".setName",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 195,
        "endLine": 220,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .addComponent(String componentList)",
                "contents": [
                    {
                        "type": "param",
                        "name": "componentList",
                        "description": "A string of components to add separated by a comma `,`"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .addComponent(String Component1[, .., String ComponentN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "Component#",
                        "description": "Component ID to add."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Adds a component to the selected entities or entity.\n\nComponents are used to extend the functionality of entities.\nThis means it will copy properties and assign methods to\naugment the functionality of the entity.\n\nFor adding multiple components, you can either pass a string with\nall the component names (separated by commas), or pass each component name as\nan argument.\n\nIf the component has a function named `init` it will be called.\n\nIf the entity already has the component, the component is skipped (nothing happens).\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.addComponent(\"2D, Canvas\");\nthis.addComponent(\"2D\", \"Canvas\");\n```"
                    }
                ]
            }
        ],
        "name": ".addComponent",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 255,
        "endLine": 276,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .toggleComponent(String ComponentList)",
                "contents": [
                    {
                        "type": "param",
                        "name": "ComponentList",
                        "description": "A string of components to add or remove separated by a comma `,`"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .toggleComponent(String Component1[, .., String componentN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "Component#",
                        "description": "Component ID to add or remove."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Add or Remove Components from an entity.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar e = Crafty.e(\"2D,DOM,Test\");\ne.toggleComponent(\"Test,Test2\"); //Remove Test, add Test2\ne.toggleComponent(\"Test,Test2\"); //Add Test, remove Test2\n```\n\n```\nvar e = Crafty.e(\"2D,DOM,Test\");\ne.toggleComponent(\"Test\",\"Test2\"); //Remove Test, add Test2\ne.toggleComponent(\"Test\",\"Test2\"); //Add Test, remove Test2\ne.toggleComponent(\"Test\");         //Remove Test\n```"
                    }
                ]
            }
        ],
        "name": ".toggleComponent",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 315,
        "endLine": 330,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .requires(String componentList)",
                "contents": [
                    {
                        "type": "param",
                        "name": "componentList",
                        "description": "List of components that must be added"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nMakes sure the entity has the components listed. If the entity does not\nhave the component, it will add it.\n\n(In the current version of Crafty, this function behaves exactly the same\nas `addComponent`. By convention, developers have used `requires` for\ncomponent dependencies -- i.e. to indicate specifically that one component\nwill only work properly if another component is present -- and used\n`addComponent` in all other situations.)\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".addComponent"
                ]
            }
        ],
        "name": ".requires",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 336,
        "endLine": 352,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .removeComponent(String Component[, soft])",
                "contents": [
                    {
                        "type": "param",
                        "name": "component",
                        "description": "Component to remove"
                    },
                    {
                        "type": "param",
                        "name": "soft",
                        "description": "Whether to soft remove it (defaults to `true`)"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nRemoves a component from an entity. A soft remove (the default) will only\nrefrain `.has()` from returning true. Hard will remove all\nassociated properties and methods.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar e = Crafty.e(\"2D,DOM,Test\");\ne.removeComponent(\"Test\");        //Soft remove Test component\ne.removeComponent(\"Test\", false); //Hard remove Test component\n```"
                    }
                ]
            }
        ],
        "name": ".removeComponent",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 371,
        "endLine": 385,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number .getId(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Returns the ID of this entity.\n\nFor better performance, simply use the this[0] property.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Finding out the `ID` of an entity can be done by returning the property `0`.\n```\n   var ent = Crafty.e(\"2D\");\n   ent[0]; //ID\n   ent.getId(); //also ID\n```"
                    }
                ]
            }
        ],
        "name": ".getId",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 391,
        "endLine": 400,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .has(String component)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Returns `true` or `false` depending on if the\nentity has the given component.\n\nFor better performance, simply use the `.__c` object\nwhich will be `true` if the entity has the component or\nwill not exist (or be `false`)."
            }
        ],
        "name": ".has",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 406,
        "endLine": 449,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Change",
                        "description": "when properties change",
                        "objName": "Data",
                        "objProp": "{key: value}"
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public this .attr(String property, Any value[, Boolean silent[, Boolean recursive]])",
                "contents": [
                    {
                        "type": "param",
                        "name": "property",
                        "description": "Property of the entity to modify"
                    },
                    {
                        "type": "param",
                        "name": "value",
                        "description": "Value to set the property to"
                    },
                    {
                        "type": "param",
                        "name": "silent",
                        "description": "If you would like to supress events"
                    },
                    {
                        "type": "param",
                        "name": "recursive",
                        "description": "If you would like merge recursively"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Use this method to set any property of the entity.\n"
            },
            {
                "type": "method",
                "signature": "public this .attr(Object map[, Boolean silent[, Boolean recursive]])",
                "contents": [
                    {
                        "type": "param",
                        "name": "map",
                        "description": "Object where each key is the property to modify and the value as the property value"
                    },
                    {
                        "type": "param",
                        "name": "silent",
                        "description": "If you would like to supress events"
                    },
                    {
                        "type": "param",
                        "name": "recursive",
                        "description": "If you would like merge recursively"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Use this method to set multiple properties of the entity.\n\nSetter options:\n`silent`: If you want to prevent it from firing events.\n`recursive`: If you pass in an object you could overwrite sibling keys, this recursively merges instead of just merging it. This is `false` by default, unless you are using dot notation `name.first`.\n"
            },
            {
                "type": "method",
                "signature": "public Any .attr(String property)",
                "contents": [
                    {
                        "type": "param",
                        "name": "property",
                        "description": "Property of the entity to modify"
                    },
                    {
                        "type": "return",
                        "value": "Value - the value of the property"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Use this method to get any property of the entity. You can also retrieve the property using `this.property`.\n\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.attr({key: \"value\", prop: 5});\nthis.attr(\"key\"); // returns \"value\"\nthis.attr(\"prop\"); // returns 5\nthis.key; // \"value\"\nthis.prop; // 5\n\nthis.attr(\"key\", \"newvalue\");\nthis.attr(\"key\"); // returns \"newvalue\"\nthis.key; // \"newvalue\"\n\nthis.attr(\"parent.child\", \"newvalue\");\nthis.parent; // {child: \"newvalue\"};\nthis.attr('parent.child'); // \"newvalue\"\n```"
                    }
                ]
            }
        ],
        "name": ".attr",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 562,
        "endLine": 568,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .toArray(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nThis method will simply return the found entities as an array of ids.  To get an array of the actual entities, use `get()`."
            },
            {
                "type": "xref",
                "xrefs": [
                    ".get"
                ]
            }
        ],
        "name": ".toArray",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 574,
        "endLine": 591,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .timeout(Function callback, Number delay)",
                "contents": [
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute after given amount of milliseconds"
                    },
                    {
                        "type": "param",
                        "name": "delay",
                        "description": "Amount of milliseconds to execute the method"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nThe delay method will execute a function after a given amount of time in milliseconds.\n\nEssentially a wrapper for `setTimeout`.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Destroy itself after 100 milliseconds\n```\nthis.timeout(function() {\nthis.destroy();\n}, 100);\n```"
                    }
                ]
            }
        ],
        "name": ".timeout",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 603,
        "endLine": 635,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .bind(String eventName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to bind to"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute when the event is triggered"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Attach the current entity (or entities) to listen for an event.\n\nCallback will be invoked when an event with the event name passed\nis triggered. Depending on the event, some data may be passed\nvia an argument to the callback function.\n\nThe first argument is the event name (can be anything) whilst the\nsecond argument is the callback. If the event has data, the\ncallback should have an argument.\n\nEvents are arbitrary and provide communication between components.\nYou can trigger or bind an event even if it doesn't exist yet.\n\nUnlike DOM events, Crafty events are exectued synchronously.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nthis.attr(\"triggers\", 0); //set a trigger count\nthis.bind(\"myevent\", function() {\n    this.triggers++; //whenever myevent is triggered, increment\n});\nthis.bind(\"EnterFrame\", function() {\n    this.trigger(\"myevent\"); //trigger myevent on every frame\n});\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".trigger",
                    ".unbind"
                ]
            }
        ],
        "name": ".bind",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 665,
        "endLine": 675,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number .uniqueBind(String eventName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to bind to"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute upon event triggered"
                    },
                    {
                        "type": "return",
                        "value": "ID of the current callback used to unbind"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nWorks like Crafty.bind, but prevents a callback from being bound multiple times.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".bind"
                ]
            }
        ],
        "name": ".uniqueBind",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 683,
        "endLine": 693,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number one(String eventName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to bind to"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute upon event triggered"
                    },
                    {
                        "type": "return",
                        "value": "ID of the current callback used to unbind"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nWorks like Crafty.bind, but will be unbound once the event triggers.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    ".bind"
                ]
            }
        ],
        "name": ".one",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 705,
        "endLine": 716,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .unbind(String eventName[, Function callback])",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to unbind"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Function to unbind"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Removes binding with an event from current entity.\n\nPassing an event name will remove all events bound to\nthat event. Passing a reference to the callback will\nunbind only that callback."
            },
            {
                "type": "xref",
                "xrefs": [
                    ".bind",
                    ".trigger"
                ]
            }
        ],
        "name": ".unbind",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 745,
        "endLine": 759,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .trigger(String eventName[, Object data])",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Event to trigger"
                    },
                    {
                        "type": "param",
                        "name": "data",
                        "description": "Arbitrary data that will be passed into every callback as an argument"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Trigger an event with arbitrary data. Will invoke all callbacks with\nthe context (value of `this`) of the current entity object.\n\n*Note: This will only execute callbacks within the current entity, no other entity.*\n\nThe first argument is the event name to trigger and the optional\nsecond argument is the arbitrary event data. This can be absolutely anything.\n\nUnlike DOM events, Crafty events are exectued synchronously."
            }
        ],
        "name": ".trigger",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 805,
        "endLine": 824,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .each(Function method)",
                "contents": [
                    {
                        "type": "param",
                        "name": "method",
                        "description": "Method to call on each iteration"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Iterates over found entities, calling a function for every entity.\n\nThe function will be called for every entity and will pass the index\nin the iteration as an argument. The context (value of `this`) of the\nfunction will be the current entity in the iteration.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Destroy every second 2D entity\n```\nCrafty(\"2D\").each(function(i) {\n    if(i % 2 === 0) {\n        this.destroy();\n    }\n});\n```"
                    }
                ]
            }
        ],
        "name": ".each",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 837,
        "endLine": 862,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Array .get()",
                "contents": [
                    {
                        "type": "return",
                        "value": "An array of entities corresponding to the active selector"
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public Entity .get(Number index)",
                "contents": [
                    {
                        "type": "return",
                        "value": "an entity belonging to the current selection"
                    },
                    {
                        "type": "param",
                        "name": "index",
                        "description": "The index of the entity to return.  If negative, counts back from the end of the array."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Get an array containing every \"2D\" entity\n```\nvar arr = Crafty(\"2D\").get()\n```\nGet the first entity matching the selector\n```\n// equivalent to Crafty(\"2D\").get()[0], but doesn't create a new array\nvar e = Crafty(\"2D\").get(0)\n```\nGet the last \"2D\" entity matching the selector\n```\nvar e = Crafty(\"2D\").get(-1)\n```\n"
                    }
                ]
            }
        ],
        "name": ".get",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 884,
        "endLine": 891,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Entity .clone(void)",
                "contents": [
                    {
                        "type": "return",
                        "value": "Cloned entity of the current entity"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nMethod will create another entity with the exact same\nproperties, components and methods as the current entity."
            }
        ],
        "name": ".clone",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 911,
        "endLine": 919,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .setter(String property, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "property",
                        "description": "Property to watch for modification"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute if the property is modified"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Will watch a property waiting for modification and will then invoke the\ngiven callback when attempting to modify.\n"
            }
        ],
        "name": ".setter",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 933,
        "endLine": 937,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .destroy(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Will remove all event listeners and delete all properties as well as removing from the stage"
            }
        ],
        "name": ".destroy",
        "comp": "Crafty Core"
    },
    {
        "file": "src/core.js",
        "startLine": 961,
        "endLine": 965,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Used to extend the Crafty namespace.\n"
            }
        ],
        "name": "Crafty.extend",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 984,
        "endLine": 1003,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Load",
                        "description": "Just after the viewport is initialised. Before the EnterFrame loops is started",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this Crafty.init([Number width, Number height, String stage_elem])",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public this Crafty.init([Number width, Number height, HTMLElement stage_elem])",
                "contents": [
                    {
                        "type": "param",
                        "name": "Number width",
                        "description": "Width of the stage"
                    },
                    {
                        "type": "param",
                        "name": "Number height",
                        "description": "Height of the stage"
                    },
                    {
                        "type": "param",
                        "name": "String or HTMLElement stage_elem",
                        "description": "the element to use for the stage"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nSets the element to use as the stage, creating it if necessary.  By default a div with id 'cr-stage' is used, but if the 'stage_elem' argument is provided that will be used instead.  (see `Crafty.viewport.init`)\n\nStarts the `EnterFrame` interval. This will call the `EnterFrame` event for every frame.\n\nCan pass width and height values for the stage otherwise will default to window size (see `Crafty.DOM.window`).\n\nAll `Load` events will be executed.\n\nUses `requestAnimationFrame` to sync the drawing with the browser but will default to `setInterval` if the browser does not support it."
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.stop",
                    "Crafty.viewport"
                ]
            }
        ],
        "name": "Crafty.init",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1015,
        "endLine": 1026,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public String Crafty.getVersion()",
                "contents": [
                    {
                        "type": "return",
                        "value": "Current version of Crafty as a string"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nReturn current version of crafty\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.getVersion(); //'0.5.2'\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.getVersion",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1032,
        "endLine": 1042,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "CraftyStop",
                        "description": "when the game is stopped",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this Crafty.stop([bool clearState])",
                "contents": [
                    {
                        "type": "param",
                        "name": "clearState",
                        "description": "if true the stage and all game state is cleared."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nStops the EnterFrame interval and removes the stage element.\n\nTo restart, use `Crafty.init()`."
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.init"
                ]
            }
        ],
        "name": "Crafty.stop",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1061,
        "endLine": 1079,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Pause",
                        "description": "when the game is paused",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "Unpause",
                        "description": "when the game is unpaused",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this Crafty.pause(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nPauses the game by stopping the EnterFrame event from firing. If the game is already paused it is unpaused.\nYou can pass a boolean parameter if you want to pause or unpause no matter what the current state is.\nModern browsers pauses the game when the page is not visible to the user. If you want the Pause event\nto be triggered when that happens you can enable autoPause in `Crafty.settings`.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Have an entity pause the game when it is clicked.\n```\nbutton.bind(\"click\", function() {\n    Crafty.pause();\n});\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.pause",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1099,
        "endLine": 1109,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.isPaused()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nCheck whether the game is already paused or not.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.isPaused();\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.isPaused",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1115,
        "endLine": 1118,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Handles game ticks"
            }
        ],
        "name": "Crafty.timer",
        "categories": [
            "Game Loop"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1190,
        "endLine": 1201,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.timer.steptype(mode [, maxTimeStep])",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Can be called to set the type of timestep the game loop uses"
                    },
                    {
                        "type": "param",
                        "name": "mode",
                        "description": "the type of time loop.  Allowed values are \"fixed\", \"semifixed\", and \"variable\".  Crafty defaults to \"fixed\"."
                    },
                    {
                        "type": "param",
                        "name": "mode",
                        "description": "For \"fixed\", sets the max number of frames per step.   For \"variable\" and \"semifixed\", sets the maximum time step allowed."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\n* In \"fixed\" mode, each frame is sent the same value of `dt`, and to achieve the target game speed, mulitiple frame events are triggered before each render.\n* In \"variable\" mode, there is only one frame triggered per render.  This recieves a value of `dt` equal to the actual elapsed time since the last frame.\n* In \"semifixed\" mode, multiple frames per render are processed, and the total time since the last frame is divided evenly between them.\n"
            }
        ],
        "name": "Crafty.timer.steptype",
        "comp": "Crafty.timer"
    },
    {
        "file": "src/core.js",
        "startLine": 1221,
        "endLine": 1237,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.timer.step()",
                "contents": []
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "EnterFrame",
                        "description": "Triggered on each frame.  Passes the frame number, and the amount of time since the last frame.  If the time is greater than maxTimestep, that will be used instead.  (The default value of maxTimestep is 50 ms.)",
                        "objName": "Data",
                        "objProp": "{ frame: Number, dt:Number }"
                    },
                    {
                        "type": "trigger",
                        "event": "ExitFrame",
                        "description": "Triggered after each frame.  Passes the frame number, and the amount of time since the last frame.  If the time is greater than maxTimestep, that will be used instead.  (The default value of maxTimestep is 50 ms.)",
                        "objName": "Data",
                        "objProp": "{ frame: Number, dt:Number }"
                    },
                    {
                        "type": "trigger",
                        "event": "PreRender",
                        "description": "Triggered every time immediately before a scene should be rendered",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "RenderScene",
                        "description": "Triggered every time a scene should be rendered",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "PostRender",
                        "description": "Triggered every time immediately after a scene should be rendered",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "MeasureWaitTime",
                        "description": "Triggered at the beginning of each step after the first.  Passes the time the game loop waited between steps.",
                        "objName": "Data",
                        "objProp": "Number"
                    },
                    {
                        "type": "trigger",
                        "event": "MeasureFrameTime",
                        "description": "Triggered after each frame.  Passes the time it took to advance one frame.",
                        "objName": "Data",
                        "objProp": "Number"
                    },
                    {
                        "type": "trigger",
                        "event": "MeasureRenderTime",
                        "description": "Triggered after each render. Passes the time it took to render the scene",
                        "objName": "Data",
                        "objProp": "Number"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nAdvances the game by performing a step. A step consists of one/multiple frames followed by a render. The amount of frames depends on the timer's steptype.\nSpecifically it triggers `EnterFrame` & `ExitFrame` events for each frame and `PreRender`, `RenderScene` & `PostRender` events for each render.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.timer.steptype"
                ]
            }
        ],
        "name": "Crafty.timer.step",
        "comp": "Crafty.timer"
    },
    {
        "file": "src/core.js",
        "startLine": 1309,
        "endLine": 1317,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.timer.FPS()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Returns the target frames per second. This is not an actual frame rate."
            },
            {
                "type": "method",
                "signature": "public void Crafty.timer.FPS(Number value)",
                "contents": [
                    {
                        "type": "param",
                        "name": "value",
                        "description": "the target rate"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Sets the target frames per second. This is not an actual frame rate.\nThe default rate is 50."
            }
        ],
        "name": "Crafty.timer.FPS",
        "comp": "Crafty.timer"
    },
    {
        "file": "src/core.js",
        "startLine": 1328,
        "endLine": 1334,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.timer.simulateFrames(Number frames[, Number timestep])",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Advances the game state by a number of frames and draws the resulting stage at the end. Useful for tests and debugging."
                    },
                    {
                        "type": "param",
                        "name": "frames",
                        "description": "number of frames to simulate"
                    },
                    {
                        "type": "param",
                        "name": "timestep",
                        "description": "the duration to pass each frame.  Defaults to milliSecPerFrame (20 ms) if not specified."
                    }
                ]
            }
        ],
        "name": "Crafty.timer.simulateFrames",
        "comp": "Crafty.timer"
    },
    {
        "file": "src/core.js",
        "startLine": 1355,
        "endLine": 1375,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewEntity",
                        "description": "When the entity is created and all components are added",
                        "objName": "Data",
                        "objProp": "{ id:Number }"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Entity Crafty.e(String componentList)",
                "contents": [
                    {
                        "type": "param",
                        "name": "componentList",
                        "description": "List of components to assign to new entity"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Entity Crafty.e(String component1[, .., String componentN])",
                "contents": [
                    {
                        "type": "param",
                        "name": "component#",
                        "description": "Component to add"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nCreates an entity. Any arguments will be applied in the same\nway `.addComponent()` is applied as a quick way to add components.\n\nAny component added will augment the functionality of\nthe created entity by assigning the properties and methods from the component to the entity.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar myEntity = Crafty.e(\"2D, DOM, Color\");\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.c"
                ]
            }
        ],
        "name": "Crafty.e",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1395,
        "endLine": 1448,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.c(String name, Object component)",
                "contents": [
                    {
                        "type": "param",
                        "name": "name",
                        "description": "Name of the component"
                    },
                    {
                        "type": "param",
                        "name": "component",
                        "description": "Object with the component's properties and methods"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Creates a component where the first argument is the ID and the second\nis the object that will be inherited by entities.\n\nSpecifically, each time a component is added to an entity, the component properties are copied over to the entity.\n* In the case of primitive datatypes (booleans, numbers, strings) the property is copied by value.\n* In the case of complex datatypes (objects, arrays, functions) the property is copied by reference and will thus reference the components' original property.\n* (See the two examples below for further explanation)\nNote that when a component method gets called, the `this` keyword will refer to the current entity the component was added to.\n\nA couple of methods are treated specially. They are invoked in partiular contexts, and (in those contexts) cannot be overridden by other components.\n\n- `init` will be called when the component is added to an entity\n- `remove` will be called just before a component is removed, or before an entity is destroyed. It is passed a single boolean parameter that is `true` if the entity is being destroyed.\n\nIn addition to these hardcoded special methods, there are some conventions for writing components.\n\n- Properties or methods that start with an underscore are considered private.\n- A method with the same name as the component is considered to be a constructor\nand is generally used when you need to pass configuration data to the component on a per entity basis.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.c(\"Annoying\", {\n    _message: \"HiHi\",\n    init: function() {\n        this.bind(\"EnterFrame\", function() { alert(this.message); });\n    },\n    annoying: function(message) { this.message = message; }\n});\n\nCrafty.e(\"Annoying\").annoying(\"I'm an orange...\");\n```\n\n\nWARNING:\n\nin the example above the field _message is local to the entity. That is, if you create many entities with the Annoying component they can all have different values for _message. That is because it is a simple value, and simple values are copied by value. If however the field had been an object or array, the value would have been shared by all entities with the component because complex types are copied by reference in javascript. This is probably not what you want and the following example demonstrates how to work around it:\n\n```\nCrafty.c(\"MyComponent\", {\n    _iAmShared: { a: 3, b: 4 },\n    init: function() {\n        this._iAmNotShared = { a: 3, b: 4 };\n    },\n});\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.e"
                ]
            }
        ],
        "name": "Crafty.c",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1454,
        "endLine": 1464,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.trigger(String eventName, * data)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to trigger"
                    },
                    {
                        "type": "param",
                        "name": "data",
                        "description": "Arbitrary data to pass into the callback as an argument"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nThis method will trigger every single callback attached to the event name. This means\nevery global event and every entity that has a callback.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.bind"
                ]
            }
        ],
        "name": "Crafty.trigger",
        "categories": [
            "Core",
            "Events"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1503,
        "endLine": 1514,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number bind(String eventName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to bind to"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute upon event triggered"
                    },
                    {
                        "type": "return",
                        "value": "callback function which can be used for unbind"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nBinds to a global event. Method will be executed when `Crafty.trigger` is used\nwith the event name.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.trigger",
                    "Crafty.unbind"
                ]
            }
        ],
        "name": "Crafty.bind",
        "categories": [
            "Core",
            "Events"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1548,
        "endLine": 1558,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number uniqueBind(String eventName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to bind to"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute upon event triggered"
                    },
                    {
                        "type": "return",
                        "value": "callback function which can be used for unbind"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nWorks like Crafty.bind, but prevents a callback from being bound multiple times.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.bind"
                ]
            }
        ],
        "name": "Crafty.uniqueBind",
        "categories": [
            "Core",
            "Events"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1565,
        "endLine": 1575,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number one(String eventName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to bind to"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute upon event triggered"
                    },
                    {
                        "type": "return",
                        "value": "callback function which can be used for unbind"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nWorks like Crafty.bind, but will be unbound once the event triggers.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.bind"
                ]
            }
        ],
        "name": "Crafty.one",
        "categories": [
            "Core",
            "Events"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1586,
        "endLine": 1614,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean Crafty.unbind(String eventName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "eventName",
                        "description": "Name of the event to unbind"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Function to unbind"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public Boolean Crafty.unbind(String eventName, Number callbackID)",
                "contents": [
                    {
                        "type": "param",
                        "name": "callbackID",
                        "description": "ID of the callback"
                    },
                    {
                        "type": "return",
                        "value": "True or false depending on if a callback was unbound"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Unbind any event from any entity or global event."
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n   var play_gameover_sound = function () {...};\n   Crafty.bind('GameOver', play_gameover_sound);\n   ...\n   Crafty.unbind('GameOver', play_gameover_sound);\n```\n\nThe first line defines a callback function. The second line binds that\nfunction so that `Crafty.trigger('GameOver')` causes that function to\nrun. The third line unbinds that function.\n\n```\n   Crafty.unbind('GameOver');\n```\n\nThis unbinds ALL global callbacks for the event 'GameOver'. That\nincludes all callbacks attached by `Crafty.bind('GameOver', ...)`, but\nnone of the callbacks attached by `some_entity.bind('GameOver', ...)`."
                    }
                ]
            }
        ],
        "name": "Crafty.unbind",
        "categories": [
            "Core",
            "Events"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1643,
        "endLine": 1647,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.frame(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Returns the current frame number"
            }
        ],
        "name": "Crafty.frame",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1669,
        "endLine": 1672,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Modify the inner workings of Crafty through the settings."
            }
        ],
        "name": "Crafty.settings",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/core.js",
        "startLine": 1679,
        "endLine": 1688,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.settings.register(String settingName, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "settingName",
                        "description": "Name of the setting"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Function to execute when use modifies setting"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nUse this to register custom settings. Callback will be executed when `Crafty.settings.modify` is used.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.settings.modify"
                ]
            }
        ],
        "name": "Crafty.settings.register",
        "comp": "Crafty.settings"
    },
    {
        "file": "src/core.js",
        "startLine": 1694,
        "endLine": 1703,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.settings.modify(String settingName, * value)",
                "contents": [
                    {
                        "type": "param",
                        "name": "settingName",
                        "description": "Name of the setting"
                    },
                    {
                        "type": "param",
                        "name": "value",
                        "description": "Value to set the setting to"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nModify settings through this method.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.settings.register",
                    "Crafty.settings.get"
                ]
            }
        ],
        "name": "Crafty.settings.modify",
        "comp": "Crafty.settings"
    },
    {
        "file": "src/core.js",
        "startLine": 1711,
        "endLine": 1720,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public * Crafty.settings.get(String settingName)",
                "contents": [
                    {
                        "type": "param",
                        "name": "settingName",
                        "description": "Name of the setting"
                    },
                    {
                        "type": "return",
                        "value": "Current value of the setting"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nReturns the current value of the setting.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.settings.register",
                    "Crafty.settings.get"
                ]
            }
        ],
        "name": "Crafty.settings.get",
        "comp": "Crafty.settings"
    },
    {
        "file": "src/core.js",
        "startLine": 1744,
        "endLine": 1750,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Object .clone(Object obj)",
                "contents": [
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "an object"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nDeep copy (a.k.a clone) of an object."
            }
        ],
        "name": "Crafty.clone",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/device.js",
        "startLine": 5,
        "endLine": 7,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [],
        "name": "Crafty.device",
        "categories": [
            "Misc"
        ]
    },
    {
        "file": "src/device.js",
        "startLine": 81,
        "endLine": 105,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.device.deviceOrientation(Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Callback method executed once as soon as device orientation is change"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nDo something with normalized device orientation data:\n```\n{\n  'tiltLR'    :   'gamma the angle in degrees the device is tilted left-to-right.',\n  'tiltFB'    :   'beta the angle in degrees the device is tilted front-to-back',\n  'dir'       :   'alpha the direction the device is facing according to the compass',\n  'motUD'     :   'The angles values increase as you tilt the device to the right or towards you.'\n}\n```\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// Get DeviceOrientation event normalized data.\nCrafty.device.deviceOrientation(function(data){\n    console.log('data.tiltLR : '+Math.round(data.tiltLR)+', data.tiltFB : '+Math.round(data.tiltFB)+', data.dir : '+Math.round(data.dir)+', data.motUD : '+data.motUD+'');\n});\n```\n\nSee browser support at http://caniuse.com/#search=device orientation."
                    }
                ]
            }
        ],
        "name": "Crafty.device.deviceOrientation",
        "comp": "Crafty.device"
    },
    {
        "file": "src/device.js",
        "startLine": 120,
        "endLine": 145,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.device.deviceMotion(Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Callback method executed once as soon as device motion is change"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nDo something with normalized device motion data:\n```\n{\n    'acceleration' : ' Grab the acceleration including gravity from the results',\n    'rawAcceleration' : 'Display the raw acceleration data',\n    'facingUp' : 'Z is the acceleration in the Z axis, and if the device is facing up or down',\n    'tiltLR' : 'Convert the value from acceleration to degrees. acceleration.x is the acceleration according to gravity, we'll assume we're on Earth and divide by 9.81 (earth gravity) to get a percentage value, and then multiply that by 90 to convert to degrees.',\n    'tiltFB' : 'Convert the value from acceleration to degrees.'\n}\n```\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// Get DeviceMotion event normalized data.\nCrafty.device.deviceMotion(function(data){\n    console.log('data.moAccel : '+data.rawAcceleration+', data.moCalcTiltLR : '+Math.round(data.tiltLR)+', data.moCalcTiltFB : '+Math.round(data.tiltFB)+'');\n});\n```\n\nSee browser support at http://caniuse.com/#search=motion."
                    }
                ]
            }
        ],
        "name": "Crafty.device.deviceMotion",
        "comp": "Crafty.device"
    },
    {
        "file": "src/diamondiso.js",
        "startLine": 5,
        "endLine": 8,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Place entities in a 45deg diamond isometric fashion. It is similar to isometric but has another grid locations"
            }
        ],
        "name": "Crafty.diamondIso",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/diamondiso.js",
        "startLine": 27,
        "endLine": 45,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.diamondIso.init(Number tileWidth,Number tileHeight,Number mapWidth,Number mapHeight)",
                "contents": [
                    {
                        "type": "param",
                        "name": "tileWidth",
                        "description": "The size of base tile width in Pixel"
                    },
                    {
                        "type": "param",
                        "name": "tileHeight",
                        "description": "The size of base tile height in Pixel"
                    },
                    {
                        "type": "param",
                        "name": "mapWidth",
                        "description": "The width of whole map in Tiles"
                    },
                    {
                        "type": "param",
                        "name": "mapHeight",
                        "description": "The height of whole map in Tiles"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nMethod used to initialize the size of the isometric placement.\nRecommended to use a size alues in the power of `2` (128, 64 or 32).\nThis makes it easy to calculate positions and implement zooming.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.diamondIso.init(64,128,20,20);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.diamondIso.place"
                ]
            }
        ],
        "name": "Crafty.diamondIso.init",
        "comp": "Crafty.diamondIso"
    },
    {
        "file": "src/diamondiso.js",
        "startLine": 58,
        "endLine": 75,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.diamondIso.place(Entity tile,Number x, Number y, Number layer)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "The `x` position to place the tile"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "The `y` position to place the tile"
                    },
                    {
                        "type": "param",
                        "name": "layer",
                        "description": "The `z` position to place the tile (calculated by y position * layer)"
                    },
                    {
                        "type": "param",
                        "name": "tile",
                        "description": "The entity that should be position in the isometric fashion"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nUse this method to place an entity in an isometric grid.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.diamondIso.init(64,128,20,20);\nisos.place(Crafty.e('2D, DOM, Color').color('red').attr({w:128, h:128}),1,1,2);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.diamondIso.size"
                ]
            }
        ],
        "name": "Crafty.diamondIso.place",
        "comp": "Crafty.diamondIso"
    },
    {
        "file": "src/drawing.js",
        "startLine": 5,
        "endLine": 8,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Draw an image with or without repeating (tiling)."
            }
        ],
        "name": "Image",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/drawing.js",
        "startLine": 41,
        "endLine": 69,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "description": "when the image is loaded",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .image(String url[, String repeat])",
                "contents": [
                    {
                        "type": "param",
                        "name": "url",
                        "description": "URL of the image"
                    },
                    {
                        "type": "param",
                        "name": "repeat",
                        "description": "If the image should be repeated to fill the entity."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nDraw specified image. Repeat follows CSS syntax (`\"no-repeat\", \"repeat\", \"repeat-x\", \"repeat-y\"`);\n\n*Note: Default repeat is `no-repeat` which is different to standard DOM (which is `repeat`)*\n\nIf the width and height are `0` and repeat is set to `no-repeat` the width and\nheight will automatically assume that of the image. This is an\neasy way to create an image without needing sprites.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Will default to no-repeat. Entity width and height will be set to the images width and height\n```\nvar ent = Crafty.e(\"2D, DOM, Image\").image(\"myimage.png\");\n```\nCreate a repeating background.\n```\nvar bg = Crafty.e(\"2D, DOM, Image\")\n             .attr({w: Crafty.viewport.width, h: Crafty.viewport.height})\n             .image(\"bg.png\", \"repeat\");\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.sprite"
                ]
            }
        ],
        "name": ".image",
        "comp": "Image"
    },
    {
        "file": "src/drawing.js",
        "startLine": 112,
        "endLine": 118,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "Crafty.DrawManager",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nAn internal object manage objects to be drawn and implement\nthe best method of drawing in both DOM and canvas"
            }
        ],
        "name": "Crafty.DrawManager",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/drawing.js",
        "startLine": 212,
        "endLine": 216,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nTotal number of the entities that have the `2D` component."
            }
        ],
        "name": "Crafty.DrawManager.total2D",
        "comp": "Crafty.DrawManager"
    },
    {
        "file": "src/drawing.js",
        "startLine": 220,
        "endLine": 226,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.DrawManager.onScreen(Object rect)",
                "contents": [
                    {
                        "type": "param",
                        "name": "rect",
                        "description": "A rectangle with field {_x: x_val, _y: y_val, _w: w_val, _h: h_val}"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nTest if a rectangle is completely in viewport"
            }
        ],
        "name": "Crafty.DrawManager.onScreen",
        "comp": "Crafty.DrawManager"
    },
    {
        "file": "src/drawing.js",
        "startLine": 233,
        "endLine": 244,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.DrawManager.mergeSet(Object set)",
                "contents": [
                    {
                        "type": "param",
                        "name": "set",
                        "description": "an array of rectangular regions"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nMerge any consecutive, overlapping rects into each other.\nIts an optimization for the redraw regions.\n\nThe order of set isn't strictly meaningful,\nbut overlapping objects will often cause each other to change,\nand so might be consecutive."
            }
        ],
        "name": "Crafty.DrawManager.mergeSet",
        "comp": "Crafty.DrawManager"
    },
    {
        "file": "src/drawing.js",
        "startLine": 263,
        "endLine": 269,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.DrawManager.addCanvas(ent)",
                "contents": [
                    {
                        "type": "param",
                        "name": "ent",
                        "description": "The entity to add"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nAdd an entity to the list of Canvas objects to draw"
            }
        ],
        "name": "Crafty.DrawManager.addCanvas",
        "comp": "Crafty.DrawManager"
    },
    {
        "file": "src/drawing.js",
        "startLine": 275,
        "endLine": 281,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.DrawManager.addDom(ent)",
                "contents": [
                    {
                        "type": "param",
                        "name": "ent",
                        "description": "The entity to add"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nAdd an entity to the list of DOM object to draw"
            }
        ],
        "name": "Crafty.DrawManager.addDom",
        "comp": "Crafty.DrawManager"
    },
    {
        "file": "src/drawing.js",
        "startLine": 287,
        "endLine": 290,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.DrawManager.debug()",
                "contents": []
            }
        ],
        "name": "Crafty.DrawManager.debug",
        "comp": "Crafty.DrawManager"
    },
    {
        "file": "src/drawing.js",
        "startLine": 296,
        "endLine": 303,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.DrawManager.drawAll([Object rect])",
                "contents": [
                    {
                        "type": "param",
                        "name": "rect",
                        "description": "a rectangular region {_x: x_val, _y: y_val, _w: w_val, _h: h_val}"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\n- If rect is omitted, redraw within the viewport\n- If rect is provided, redraw within the rect"
            }
        ],
        "name": "Crafty.DrawManager.drawAll",
        "comp": "Crafty.DrawManager"
    },
    {
        "file": "src/drawing.js",
        "startLine": 326,
        "endLine": 333,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.DrawManager.boundingRect(set)",
                "contents": [
                    {
                        "type": "param",
                        "name": "set",
                        "description": "Undocumented"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\n- Calculate the common bounding rect of multiple canvas entities.\n- Returns coords"
            }
        ],
        "name": "Crafty.DrawManager.boundingRect",
        "comp": "Crafty.DrawManager"
    },
    {
        "file": "src/drawing.js",
        "startLine": 365,
        "endLine": 375,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.DrawManager.renderCanvas()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\n- Triggered by the \"RenderScene\" event\n- If the number of rects is over 60% of the total number of objects\n\tdo the naive method redrawing `Crafty.DrawManager.drawAll`\n- Otherwise, clear the dirty regions, and redraw entities overlapping the dirty regions.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Canvas.draw"
                ]
            }
        ],
        "name": "Crafty.DrawManager.renderCanvas",
        "comp": "Crafty.DrawManager"
    },
    {
        "file": "src/drawing.js",
        "startLine": 484,
        "endLine": 491,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Crafty.DrawManager.renderDOM()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nWhen \"RenderScene\" is triggered, draws all DOM entities that have been flagged\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "DOM.draw"
                ]
            }
        ],
        "name": "Crafty.DrawManager.renderDOM",
        "comp": "Crafty.DrawManager"
    },
    {
        "file": "src/drawing.js",
        "startLine": 525,
        "endLine": 556,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.pixelart(Boolean enabled)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nSets the image smoothing for drawing images (for both DOM and Canvas).\nSetting this to true disables smoothing for images, which is the preferred\nway for drawing pixel art. Defaults to false.\n\nThis feature is experimental and you should be careful with cross-browser compatibility.\nThe best way to disable image smoothing is to use the Canvas render method and the Sprite component for drawing your entities.\n\nIf you want to switch modes in the middle of a scene,\nbe aware that canvas entities won't be drawn in the new style until something else invalidates them.\n(You can manually invalidate all canvas entities with `Crafty(\"Canvas\").trigger(\"Invalidate\");`)\n\nNote that Firefox_26 currently has a [bug](https://bugzilla.mozilla.org/show_bug.cgi?id=696630)\nwhich prevents disabling image smoothing for Canvas entities that use the Image component. Use the Sprite\ncomponent instead.\nNote that Webkit (Chrome & Safari) currently has a bug [link1](http://code.google.com/p/chromium/issues/detail?id=134040)\n[link2](http://code.google.com/p/chromium/issues/detail?id=106662) that prevents disabling image smoothing\nfor DOM entities.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "This is the preferred way to draw pixel art with the best cross-browser compatibility.\n```\nCrafty.canvas.init();\nCrafty.pixelart(true);\n\nCrafty.sprite(imgWidth, imgHeight, \"spriteMap.png\", {sprite1:[0,0]});\nCrafty.e(\"2D, Canvas, sprite1\");\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.pixelart",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/extensions.js",
        "startLine": 4,
        "endLine": 7,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Determines feature support for what Crafty can do."
            }
        ],
        "name": "Crafty.support",
        "categories": [
            "Misc",
            "Core"
        ]
    },
    {
        "file": "src/extensions.js",
        "startLine": 18,
        "endLine": 31,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nDetermines if Crafty is running on mobile device.\n\nIf Crafty.mobile is equal true Crafty does some things under hood:\n```\n- set viewport on max device width and height\n- set Crafty.stage.fullscreen on true\n- hide window scrollbars\n```\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.viewport"
                ]
            }
        ],
        "name": "Crafty.mobile",
        "comp": "Crafty.device"
    },
    {
        "file": "src/extensions.js",
        "startLine": 35,
        "endLine": 38,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Is `Object.defineProperty` supported?"
            }
        ],
        "name": "Crafty.support.defineProperty",
        "comp": "Crafty.support"
    },
    {
        "file": "src/extensions.js",
        "startLine": 50,
        "endLine": 53,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Is HTML5 `Audio` supported?"
            }
        ],
        "name": "Crafty.support.audio",
        "comp": "Crafty.support"
    },
    {
        "file": "src/extensions.js",
        "startLine": 57,
        "endLine": 60,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Returns the browser specific prefix (`Moz`, `O`, `ms`, `webkit`)."
            }
        ],
        "name": "Crafty.support.prefix",
        "comp": "Crafty.support"
    },
    {
        "file": "src/extensions.js",
        "startLine": 69,
        "endLine": 72,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Version of the browser"
            }
        ],
        "name": "Crafty.support.versionName",
        "comp": "Crafty.support"
    },
    {
        "file": "src/extensions.js",
        "startLine": 76,
        "endLine": 79,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Version number of the browser as an Integer (first number)"
            }
        ],
        "name": "Crafty.support.version",
        "comp": "Crafty.support"
    },
    {
        "file": "src/extensions.js",
        "startLine": 84,
        "endLine": 87,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Is the `canvas` element supported?"
            }
        ],
        "name": "Crafty.support.canvas",
        "comp": "Crafty.support"
    },
    {
        "file": "src/extensions.js",
        "startLine": 91,
        "endLine": 94,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Is WebGL supported on the canvas element?"
            }
        ],
        "name": "Crafty.support.webgl",
        "comp": "Crafty.support"
    },
    {
        "file": "src/extensions.js",
        "startLine": 108,
        "endLine": 111,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Is css3Dtransform supported by browser."
            }
        ],
        "name": "Crafty.support.css3dtransform",
        "comp": "Crafty.support"
    },
    {
        "file": "src/extensions.js",
        "startLine": 115,
        "endLine": 118,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Is deviceorientation event supported by browser."
            }
        ],
        "name": "Crafty.support.deviceorientation",
        "comp": "Crafty.support"
    },
    {
        "file": "src/extensions.js",
        "startLine": 122,
        "endLine": 125,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Is devicemotion event supported by browser."
            }
        ],
        "name": "Crafty.support.devicemotion",
        "comp": "Crafty.support"
    },
    {
        "file": "src/extensions.js",
        "startLine": 134,
        "endLine": 162,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.addEvent(Object ctx, HTMLElement obj, String event, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "ctx",
                        "description": "Context of the callback or the value of `this`"
                    },
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "Element to add the DOM event to"
                    },
                    {
                        "type": "param",
                        "name": "event",
                        "description": "Event name to bind to"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute when triggered"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nAdds DOM level 3 events to elements. The arguments it accepts are the call\ncontext (the value of `this`), the DOM element to attach the event to,\nthe event name (without `on` (`click` rather than `onclick`)) and\nfinally the callback method.\n\nIf no element is passed, the default element will be `window.document`.\n\nCallbacks are passed with event data.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Will add a stage-wide MouseDown event listener to the player. Will log which button was pressed\n& the (x,y) coordinates in viewport/world/game space.\n```\nvar player = Crafty.e(\"2D\");\n    player.onMouseDown = function(e) {\n        console.log(e.mouseButton, e.realX, e.realY);\n    };\nCrafty.addEvent(player, Crafty.stage.elem, \"mousedown\", player.onMouseDown);\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.removeEvent"
                ]
            }
        ],
        "name": "Crafty.addEvent",
        "categories": [
            "Events",
            "Misc"
        ]
    },
    {
        "file": "src/extensions.js",
        "startLine": 191,
        "endLine": 204,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.removeEvent(Object ctx, HTMLElement obj, String event, Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "ctx",
                        "description": "Context of the callback or the value of `this`"
                    },
                    {
                        "type": "param",
                        "name": "obj",
                        "description": "Element the event is on"
                    },
                    {
                        "type": "param",
                        "name": "event",
                        "description": "Name of the event"
                    },
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method executed when triggered"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nRemoves events attached by `Crafty.addEvent()`. All parameters must\nbe the same that were used to attach the event including a reference\nto the callback method.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.addEvent"
                ]
            }
        ],
        "name": "Crafty.removeEvent",
        "categories": [
            "Events",
            "Misc"
        ]
    },
    {
        "file": "src/extensions.js",
        "startLine": 225,
        "endLine": 240,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.background(String value)",
                "contents": [
                    {
                        "type": "param",
                        "name": "style",
                        "description": "Modify the background with a color or image"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nThis method is a shortcut for adding a background\nstyle to the stage element, i.e.\n`Crafty.stage.elem.style.background = ...`\n\nFor example, if you want the background to be white,\nwith an image in the center, you might use:\n```\nCrafty.background('#FFFFFF url(landscape.png) no-repeat center center');\n```\n"
            }
        ],
        "name": "Crafty.background",
        "categories": [
            "Graphics",
            "Stage"
        ]
    },
    {
        "file": "src/html.js",
        "startLine": 4,
        "endLine": 7,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Component allow for insertion of arbitrary HTML into an entity"
            }
        ],
        "name": "HTML",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/html.js",
        "startLine": 16,
        "endLine": 30,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .replace(String html)",
                "contents": [
                    {
                        "type": "param",
                        "name": "html",
                        "description": "arbitrary html"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nThis method will replace the content of this entity with the supplied html\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Create a link\n```\nCrafty.e(\"HTML\")\n   .attr({x:20, y:20, w:100, h:100})\n   .replace(\"<a href='index.html'>Index</a>\");\n```"
                    }
                ]
            }
        ],
        "name": ".replace",
        "comp": "HTML"
    },
    {
        "file": "src/html.js",
        "startLine": 38,
        "endLine": 52,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .append(String html)",
                "contents": [
                    {
                        "type": "param",
                        "name": "html",
                        "description": "arbitrary html"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nThis method will add the supplied html in the end of the entity\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Create a link\n```\nCrafty.e(\"HTML\")\n   .attr({x:20, y:20, w:100, h:100})\n   .append(\"<a href='index.html'>Index</a>\");\n```"
                    }
                ]
            }
        ],
        "name": ".append",
        "comp": "HTML"
    },
    {
        "file": "src/html.js",
        "startLine": 60,
        "endLine": 74,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .prepend(String html)",
                "contents": [
                    {
                        "type": "param",
                        "name": "html",
                        "description": "arbitrary html"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nThis method will add the supplied html in the beginning of the entity\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Create a link\n```\nCrafty.e(\"HTML\")\n   .attr({x:20, y:20, w:100, h:100})\n   .prepend(\"<a href='index.html'>Index</a>\");\n```"
                    }
                ]
            }
        ],
        "name": ".prepend",
        "comp": "HTML"
    },
    {
        "file": "src/isometric.js",
        "startLine": 5,
        "endLine": 8,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Place entities in a 45deg isometric fashion."
            }
        ],
        "name": "Crafty.isometric",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/isometric.js",
        "startLine": 21,
        "endLine": 36,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.isometric.size(Number tileSize)",
                "contents": [
                    {
                        "type": "param",
                        "name": "tileSize",
                        "description": "The size of the tiles to place."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nMethod used to initialize the size of the isometric placement.\nRecommended to use a size values in the power of `2` (128, 64 or 32).\nThis makes it easy to calculate positions and implement zooming.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.isometric.size(128);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.isometric.place"
                ]
            }
        ],
        "name": "Crafty.isometric.size",
        "comp": "Crafty.isometric"
    },
    {
        "file": "src/isometric.js",
        "startLine": 43,
        "endLine": 60,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.isometric.place(Number x, Number y, Number z, Entity tile)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "The `x` position to place the tile"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "The `y` position to place the tile"
                    },
                    {
                        "type": "param",
                        "name": "z",
                        "description": "The `z` position or height to place the tile"
                    },
                    {
                        "type": "param",
                        "name": "tile",
                        "description": "The entity that should be position in the isometric fashion"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nUse this method to place an entity in an isometric grid.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.isometric.size(128);\niso.place(2, 1, 0, Crafty.e('2D, DOM, Color').color('red').attr({w:128, h:128}));\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.isometric.size"
                ]
            }
        ],
        "name": "Crafty.isometric.place",
        "comp": "Crafty.isometric"
    },
    {
        "file": "src/isometric.js",
        "startLine": 71,
        "endLine": 85,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.isometric.pos2px(Number x,Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "Object {left Number,top Number}"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nThis method calculate the X and Y Coordinates to Pixel Positions\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.isometric.size(128,96);\nvar position = iso.pos2px(100,100); //Object { left=12800, top=4800}\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.isometric.pos2px",
        "comp": "Crafty.isometric"
    },
    {
        "file": "src/isometric.js",
        "startLine": 93,
        "endLine": 108,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.isometric.px2pos(Number left,Number top)",
                "contents": [
                    {
                        "type": "param",
                        "name": "top",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "left",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "Object {x Number,y Number}"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nThis method calculate pixel top,left positions to x,y coordinates\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.isometric.size(128,96);\nvar px = iso.pos2px(12800,4800);\nconsole.log(px); //Object { x=100, y=100}\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.isometric.px2pos",
        "comp": "Crafty.isometric"
    },
    {
        "file": "src/isometric.js",
        "startLine": 116,
        "endLine": 130,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.isometric.centerAt(Number x,Number y)",
                "contents": [
                    {
                        "type": "param",
                        "name": "top",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "left",
                        "description": ""
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nThis method center the Viewport at x/y location or gives the current centerpoint of the viewport\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.isometric.size(128,96).centerAt(10,10); //Viewport is now moved\n//After moving the viewport by another event you can get the new center point\nconsole.log(iso.centerAt());\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.isometric.centerAt",
        "comp": "Crafty.isometric"
    },
    {
        "file": "src/isometric.js",
        "startLine": 145,
        "endLine": 162,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.isometric.area()",
                "contents": [
                    {
                        "type": "return",
                        "value": "Object {x:{start Number,end Number},y:{start Number,end Number}}"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nThis method get the Area surrounding by the centerpoint depends on viewport height and width\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar iso = Crafty.isometric.size(128,96).centerAt(10,10); //Viewport is now moved\nvar area = iso.area(); //get the area\nfor(var y = area.y.start;y <= area.y.end;y++){\n  for(var x = area.x.start ;x <= area.x.end;x++){\n      iso.place(x,y,0,Crafty.e(\"2D,DOM,gras\")); //Display tiles in the Screen\n  }\n}\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.isometric.area",
        "comp": "Crafty.isometric"
    },
    {
        "file": "src/keycodes.js",
        "startLine": 5,
        "endLine": 102,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Object of key names and the corresponding key code.\n\n```\nBACKSPACE: 8,\nTAB: 9,\nENTER: 13,\nPAUSE: 19,\nCAPS: 20,\nESC: 27,\nSPACE: 32,\nPAGE_UP: 33,\nPAGE_DOWN: 34,\nEND: 35,\nHOME: 36,\nLEFT_ARROW: 37,\nUP_ARROW: 38,\nRIGHT_ARROW: 39,\nDOWN_ARROW: 40,\nINSERT: 45,\nDELETE: 46,\n0: 48,\n1: 49,\n2: 50,\n3: 51,\n4: 52,\n5: 53,\n6: 54,\n7: 55,\n8: 56,\n9: 57,\nA: 65,\nB: 66,\nC: 67,\nD: 68,\nE: 69,\nF: 70,\nG: 71,\nH: 72,\nI: 73,\nJ: 74,\nK: 75,\nL: 76,\nM: 77,\nN: 78,\nO: 79,\nP: 80,\nQ: 81,\nR: 82,\nS: 83,\nT: 84,\nU: 85,\nV: 86,\nW: 87,\nX: 88,\nY: 89,\nZ: 90,\nNUMPAD_0: 96,\nNUMPAD_1: 97,\nNUMPAD_2: 98,\nNUMPAD_3: 99,\nNUMPAD_4: 100,\nNUMPAD_5: 101,\nNUMPAD_6: 102,\nNUMPAD_7: 103,\nNUMPAD_8: 104,\nNUMPAD_9: 105,\nMULTIPLY: 106,\nADD: 107,\nSUBSTRACT: 109,\nDECIMAL: 110,\nDIVIDE: 111,\nF1: 112,\nF2: 113,\nF3: 114,\nF4: 115,\nF5: 116,\nF6: 117,\nF7: 118,\nF8: 119,\nF9: 120,\nF10: 121,\nF11: 122,\nF12: 123,\nSHIFT: 16,\nCTRL: 17,\nALT: 18,\nPLUS: 187,\nCOMMA: 188,\nMINUS: 189,\nPERIOD: 190,\nPULT_UP: 29460,\nPULT_DOWN: 29461,\nPULT_LEFT: 4,\nPULT_RIGHT': 5\n```"
            }
        ],
        "name": "Crafty.keys",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/keycodes.js",
        "startLine": 199,
        "endLine": 209,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "An object mapping mouseButton names to the corresponding button ID.\nIn all mouseEvents, we add the `e.mouseButton` property with a value normalized to match e.button of modern webkit browsers:\n\n```\nLEFT: 0,\nMIDDLE: 1,\nRIGHT: 2\n```"
            }
        ],
        "name": "Crafty.mouseButtons",
        "categories": [
            "Input"
        ]
    },
    {
        "file": "src/loader.js",
        "startLine": 5,
        "endLine": 17,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "An object containing every asset used in the current Crafty game.\nThe key is the URL and the value is the `Audio` or `Image` object.\n\nIf loading an asset, check that it is in this object first to avoid loading twice.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar isLoaded = !!Crafty.assets[\"images/sprite.png\"];\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.loader"
                ]
            }
        ],
        "name": "Crafty.assets",
        "categories": [
            "Assets"
        ]
    },
    {
        "file": "src/loader.js",
        "startLine": 21,
        "endLine": 52,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.paths([Object paths])",
                "contents": [
                    {
                        "type": "param",
                        "name": "paths",
                        "description": "Object containing paths for audio and images folders"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nFunction to define custom folder for audio and images. You should use\nthis function to avoid typing the same paths again and again when\nloading assets with the Crafty.load() function.\n\nIf you do not give a object you get the current paths for both audio\nand images back.\n\nYou do not have to define paths.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "\n\nSetting folders:\n```\nCrafty.paths({ audio: \"custom/audio/path/\", images: \"custom/images/path/\" });\n\nCrafty.load({\n  \"audio\": {\n    \"ray\": ['ray.mp3'] // This loads ray.mp3 from custom/audio/path/ray.mp3\n  }\n}, function() {\n  console.log('loaded');\n});\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.load"
                ]
            }
        ],
        "name": "Crafty.paths",
        "categories": [
            "Assets"
        ]
    },
    {
        "file": "src/loader.js",
        "startLine": 65,
        "endLine": 84,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "NewAsset",
                        "description": "After setting new asset",
                        "objName": "key and value of new added asset.",
                        "objProp": "Object"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public void Crafty.asset(String key, Object asset)",
                "contents": [
                    {
                        "type": "param",
                        "name": "key",
                        "description": "asset url."
                    },
                    {
                        "type": "param",
                        "name": "asset",
                        "description": "`Audio` or `Image` object."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Add new asset to assets object.\n"
            },
            {
                "type": "method",
                "signature": "public void Crafty.asset(String key)",
                "contents": [
                    {
                        "type": "param",
                        "name": "key",
                        "description": "asset url."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Get asset from assets object.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.asset(key, value);\nvar asset = Crafty.asset(key); //object with key and value fields\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.assets"
                ]
            }
        ],
        "name": "Crafty.asset",
        "categories": [
            "Assets"
        ]
    },
    {
        "file": "src/loader.js",
        "startLine": 100,
        "endLine": 139,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nA list of file extensions that can be loaded as images by Crafty.load\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// add tif extension to list of supported image files\nCrafty.image_whitelist.push(\"tif\");\n\nvar assets = {\n    \"sprites\": {\n        \"sprite.tif\": {   //set a tif sprite\n           \"tile\": 64,\n           \"tileh\": 32,\n           \"map\": { \"sprite_car\": [0, 0] }\n        }\n    },\n    \"audio\": {\n        \"jump\": \"jump.mp3\";\n    }\n};\n\nCrafty.load( assets, // preload the assets\n    function() {     //when loaded\n        Crafty.audio.play(\"jump\"); //Play the audio file\n        Crafty.e('2D, DOM, sprite_car'); // create entity with sprite\n    },\n\n    function(e) { //progress\n    },\n\n    function(e) { //uh oh, error loading\n    }\n);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.asset",
                    "Crafty.load"
                ]
            }
        ],
        "name": "Crafty.image_whitelist",
        "categories": [
            "Assets"
        ]
    },
    {
        "file": "src/loader.js",
        "startLine": 142,
        "endLine": 225,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.load(Object assets, Function onLoad[, Function onProgress[, Function onError]])",
                "contents": [
                    {
                        "type": "param",
                        "name": "assets",
                        "description": "Object JSON formatted (or JSON string), with assets to load (accepts sounds, images and sprites)"
                    },
                    {
                        "type": "param",
                        "name": "onLoad",
                        "description": "Callback when the assets are loaded"
                    },
                    {
                        "type": "param",
                        "name": "onProgress",
                        "description": "Callback when an asset is loaded. Contains information about assets loaded"
                    },
                    {
                        "type": "param",
                        "name": "onError",
                        "description": "Callback when an asset fails to load"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nPreloader for all assets. Takes a JSON formatted object (or JSON string) of files and adds them to the\n`Crafty.assets` object, as well as setting sprites accordingly.\n\nFormat must follow the pattern shown in the example below, but it's not required to pass all \"audio\",\n\"images\" and \"sprites\" properties, only those you'll need. For example, if you don't need to preload\nsprites, you can omit that property.\n\nBy default, Crafty will assume all files are in the current path.  For changing these,\nuse the function `Crafty.paths`.\n\nFiles with suffixes in `image_whitelist` (case insensitive) will be loaded.\n\nIt's possible to pass the full file path(including protocol), instead of just the filename.ext, in case\nyou want some asset to be loaded from another domain.\n\nIf `Crafty.support.audio` is `true`, files with the following suffixes `mp3`, `wav`, `ogg` and\n`mp4` (case insensitive) can be loaded.\n\nThe `onProgress` function will be passed on object with information about\nthe progress including how many assets loaded, total of all the assets to\nload and a percentage of the progress.\n```\n{ loaded: j, total: total, percent: (j / total * 100), src:src }\n```\n\n`onError` will be passed with the asset that couldn't load.\n\nWhen `onError` is not provided, the onLoad is loaded even when some assets are not successfully loaded.\nOtherwise, onLoad will be called no matter whether there are errors or not.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar assetsObj = {\n    \"audio\": {\n        \"beep\": [\"beep.wav\", \"beep.mp3\", \"beep.ogg\"],\n        \"boop\": \"boop.wav\",\n        \"slash\": \"slash.wav\"\n    },\n    \"images\": [\"badguy.bmp\", \"goodguy.png\"],\n    \"sprites\": {\n        \"animals.png\": {\n            \"tile\": 50,\n            \"tileh\": 40,\n            \"map\": { \"ladybug\": [0,0], \"lazycat\": [0,1], \"ferociousdog\": [0,2] }\n            \"paddingX\": 5,\n            \"paddingY\": 5,\n            \"paddingAroundBorder\": 10\n        },\n        \"vehicles.png\": {\n            \"tile\": 150,\n            \"tileh\": 75,\n            \"map\": { \"car\": [0,0], \"truck\": [0,1] }\n        }\n    },\n};\n\nCrafty.load(assetsObj, // preload assets\n    function() { //when loaded\n        Crafty.scene(\"main\"); //go to main scene\n        Crafty.audio.play(\"boop\"); //Play the audio file\n        Crafty.e('2D, DOM, lazycat'); // create entity with sprite\n    },\n\n    function(e) { //progress\n    },\n\n    function(e) { //uh oh, error loading\n    }\n);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.paths",
                    "Crafty.assets",
                    "Crafty.image_whitelist",
                    "Crafty.removeAssets"
                ]
            }
        ],
        "name": "Crafty.loader",
        "categories": [
            "Assets"
        ]
    },
    {
        "file": "src/loader.js",
        "startLine": 349,
        "endLine": 394,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public void Crafty.removeAssets(Object assets)",
                "contents": [
                    {
                        "type": "param",
                        "name": "data",
                        "description": "Object JSON formatted (or JSON string), with assets to remove (accepts sounds, images and sprites)"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Removes assets (audio, images, sprites - and related sprite components) in order to allow the browser\nto free memory.\n\nRecieves a JSON fomatted object (or JSON string) containing 'audio', 'images' and/or 'sprites'\nproperties with assets to be deleted. Follows a similar format as Crafty.load 'data' argument. If\nyou pass the exact same object passed to Crafty.load, that will delete everything loaded that way.\nFor sprites, if you want to keep some specific component, just don't pass that component's name in\nthe sprite 'map'.\n\nNote that in order to remove the sprite components related to a given sprite, it's required to\npass the 'map' property of that sprite, and although its own properties's values (the properties refer\nto sprite components) are not used in the removing process, omitting them will cause an error (since\n'map' is an object, thus it's properties can NOT omitted - however, they can be null, or undefined).\nIt will work as long as the 'map' objects' properties have any value. Or if you define 'map' itself\nas an array, like:\n\"map\": [ \"car\", \"truck\" ] instead of \"map\": { \"car\": [0,0], \"truck\": [0,1] }.\nThis is examplified below (\"animals.png\" VS. \"vehicles.png\" sprites).\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar assetsToRemoveObj = {\n    \"audio\": {\n        \"beep\": [\"beep.wav\", \"beep.mp3\", \"beep.ogg\"],\n        \"boop\": \"boop.wav\"\n    },\n    \"images\": [\"badguy.bmp\", \"goodguy.png\"],\n    \"sprites\": {\n        \"animals.png\": {\n            \"map\": { \"ladybug\": [0,0], \"lazycat\": [0,1] },\n        },\n        \"vehicles.png\": {\n            \"map\": [ \"car\", \"truck\" ]\n        }\n    }\n}\n\nCrafty.removeAssets(assetsToRemoveObj);\n```\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.load"
                ]
            }
        ],
        "name": "Crafty.removeAssets",
        "categories": [
            "Assets"
        ]
    },
    {
        "file": "src/math.js",
        "startLine": 4,
        "endLine": 7,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Static functions."
            }
        ],
        "name": "Crafty.math",
        "categories": [
            "2D"
        ]
    },
    {
        "file": "src/math.js",
        "startLine": 10,
        "endLine": 17,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.math.abs(Number n)",
                "contents": [
                    {
                        "type": "param",
                        "name": "n",
                        "description": "Some value."
                    },
                    {
                        "type": "return",
                        "value": "Absolute value."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nReturns the absolute value."
            }
        ],
        "name": "Crafty.math.abs",
        "comp": "Crafty.math"
    },
    {
        "file": "src/math.js",
        "startLine": 23,
        "endLine": 33,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.amountOf(Number checkValue, Number minValue, Number maxValue)",
                "contents": [
                    {
                        "type": "param",
                        "name": "checkValue",
                        "description": "Value that should checked with minimum and maximum."
                    },
                    {
                        "type": "param",
                        "name": "minValue",
                        "description": "Minimum value to check."
                    },
                    {
                        "type": "param",
                        "name": "maxValue",
                        "description": "Maximum value to check."
                    },
                    {
                        "type": "return",
                        "value": "Amount of checkValue compared to minValue and maxValue."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nReturns the amount of how much a checkValue is more like minValue (=0)\nor more like maxValue (=1)"
            }
        ],
        "name": "Crafty.math.amountOf",
        "comp": "Crafty.math"
    },
    {
        "file": "src/math.js",
        "startLine": 43,
        "endLine": 52,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.clamp(Number value, Number min, Number max)",
                "contents": [
                    {
                        "type": "param",
                        "name": "value",
                        "description": "A value."
                    },
                    {
                        "type": "param",
                        "name": "max",
                        "description": "Maximum that value can be."
                    },
                    {
                        "type": "param",
                        "name": "min",
                        "description": "Minimum that value can be."
                    },
                    {
                        "type": "return",
                        "value": "The value between minimum and maximum."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nRestricts a value to be within a specified range."
            }
        ],
        "name": "Crafty.math.clamp",
        "comp": "Crafty.math"
    },
    {
        "file": "src/math.js",
        "startLine": 63,
        "endLine": 68,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Converts angle from degree to radian."
            },
            {
                "type": "param",
                "name": "angleInDeg",
                "description": "The angle in degree."
            },
            {
                "type": "return",
                "value": "The angle in radian."
            }
        ],
        "name": "Crafty.math.degToRad",
        "comp": "Crafty.math"
    },
    {
        "file": "src/math.js",
        "startLine": 74,
        "endLine": 84,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.distance(Number x1, Number y1, Number x2, Number y2)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x1",
                        "description": "First x coordinate."
                    },
                    {
                        "type": "param",
                        "name": "y1",
                        "description": "First y coordinate."
                    },
                    {
                        "type": "param",
                        "name": "x2",
                        "description": "Second x coordinate."
                    },
                    {
                        "type": "param",
                        "name": "y2",
                        "description": "Second y coordinate."
                    },
                    {
                        "type": "return",
                        "value": "The distance between the two points."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nDistance between two points."
            }
        ],
        "name": "Crafty.math.distance",
        "comp": "Crafty.math"
    },
    {
        "file": "src/math.js",
        "startLine": 91,
        "endLine": 101,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.lerp(Number value1, Number value2, Number amount)",
                "contents": [
                    {
                        "type": "param",
                        "name": "value1",
                        "description": "One value."
                    },
                    {
                        "type": "param",
                        "name": "value2",
                        "description": "Another value."
                    },
                    {
                        "type": "param",
                        "name": "amount",
                        "description": "Amount of value2 to value1."
                    },
                    {
                        "type": "return",
                        "value": "Linear interpolated value."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nLinear interpolation. Passing amount with a value of 0 will cause value1 to be returned,\na value of 1 will cause value2 to be returned."
            }
        ],
        "name": "Crafty.math.lerp",
        "comp": "Crafty.math"
    },
    {
        "file": "src/math.js",
        "startLine": 107,
        "endLine": 114,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.negate(Number percent)",
                "contents": [
                    {
                        "type": "param",
                        "name": "percent",
                        "description": "If you pass 1 a -1 will be returned. If you pass 0 a 1 will be returned."
                    },
                    {
                        "type": "return",
                        "value": "1 or -1."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nReturnes \"randomly\" -1."
            }
        ],
        "name": "Crafty.math.negate",
        "comp": "Crafty.math"
    },
    {
        "file": "src/math.js",
        "startLine": 123,
        "endLine": 130,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.radToDeg(Number angle)",
                "contents": [
                    {
                        "type": "param",
                        "name": "angleInRad",
                        "description": "The angle in radian."
                    },
                    {
                        "type": "return",
                        "value": "The angle in degree."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nConverts angle from radian to degree."
            }
        ],
        "name": "Crafty.math.radToDeg",
        "comp": "Crafty.math"
    },
    {
        "file": "src/math.js",
        "startLine": 136,
        "endLine": 143,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Object Crafty.math.randomElementOfArray(Array array)",
                "contents": [
                    {
                        "type": "param",
                        "name": "array",
                        "description": "A specific array."
                    },
                    {
                        "type": "return",
                        "value": "A random element of a specific array."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nReturns a random element of a specific array."
            }
        ],
        "name": "Crafty.math.randomElementOfArray",
        "comp": "Crafty.math"
    },
    {
        "file": "src/math.js",
        "startLine": 149,
        "endLine": 157,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.randomInt(Number start, Number end)",
                "contents": [
                    {
                        "type": "param",
                        "name": "start",
                        "description": "Smallest int value that can be returned."
                    },
                    {
                        "type": "param",
                        "name": "end",
                        "description": "Biggest int value that can be returned."
                    },
                    {
                        "type": "return",
                        "value": "A random int."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nReturns a random int in within a specific range."
            }
        ],
        "name": "Crafty.math.randomInt",
        "comp": "Crafty.math"
    },
    {
        "file": "src/math.js",
        "startLine": 163,
        "endLine": 171,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.randomInt(Number start, Number end)",
                "contents": [
                    {
                        "type": "param",
                        "name": "start",
                        "description": "Smallest number value that can be returned."
                    },
                    {
                        "type": "param",
                        "name": "end",
                        "description": "Biggest number value that can be returned."
                    },
                    {
                        "type": "return",
                        "value": "A random number."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nReturns a random number in within a specific range."
            }
        ],
        "name": "Crafty.math.randomNumber",
        "comp": "Crafty.math"
    },
    {
        "file": "src/math.js",
        "startLine": 177,
        "endLine": 187,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Number Crafty.math.squaredDistance(Number x1, Number y1, Number x2, Number y2)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x1",
                        "description": "First x coordinate."
                    },
                    {
                        "type": "param",
                        "name": "y1",
                        "description": "First y coordinate."
                    },
                    {
                        "type": "param",
                        "name": "x2",
                        "description": "Second x coordinate."
                    },
                    {
                        "type": "param",
                        "name": "y2",
                        "description": "Second y coordinate."
                    },
                    {
                        "type": "return",
                        "value": "The squared distance between the two points."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nSquared distance between two points."
            }
        ],
        "name": "Crafty.math.squaredDistance",
        "comp": "Crafty.math"
    },
    {
        "file": "src/math.js",
        "startLine": 193,
        "endLine": 202,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean Crafty.math.withinRange(Number value, Number min, Number max)",
                "contents": [
                    {
                        "type": "param",
                        "name": "value",
                        "description": "The specific value."
                    },
                    {
                        "type": "param",
                        "name": "min",
                        "description": "Minimum value."
                    },
                    {
                        "type": "param",
                        "name": "max",
                        "description": "Maximum value."
                    },
                    {
                        "type": "return",
                        "value": "Returns true if value is within a specific range."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nCheck if a value is within a specific range."
            }
        ],
        "name": "Crafty.math.withinRange",
        "comp": "Crafty.math"
    },
    {
        "file": "src/math.js",
        "startLine": 210,
        "endLine": 223,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nVector2D uses the following form:\n<x, y>\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} Vector2D();",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Vector2D} Vector2D(Vector2D);",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Vector2D} Vector2D(Number, Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D|Number=0} x",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number=0} y",
                        "description": ""
                    }
                ]
            }
        ],
        "name": "Crafty.math.Vector2D",
        "categories": [
            "2D"
        ],
        "class": "This is a general purpose 2D vector class",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 240,
        "endLine": 249,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nAdds the passed vector to this vector\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} add(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} this after adding"
                    }
                ]
            }
        ],
        "name": ".add",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 257,
        "endLine": 267,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCalculates the angle between the passed vector and this vector, using <0,0> as the point of reference.\nAngles returned have the range (−π, π].\n"
            },
            {
                "type": "method",
                "signature": "public {Number} angleBetween(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Number} the angle between the two vectors in radians"
                    }
                ]
            }
        ],
        "name": ".angleBetween",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 273,
        "endLine": 282,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCalculates the angle to the passed vector from this vector, using this vector as the point of reference.\n"
            },
            {
                "type": "method",
                "signature": "public {Number} angleTo(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Number} the angle to the passed vector in radians"
                    }
                ]
            }
        ],
        "name": ".angleTo",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 288,
        "endLine": 296,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCreates and exact, numeric copy of this vector\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} clone();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Vector2D} the new vector"
                    }
                ]
            }
        ],
        "name": ".clone",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 302,
        "endLine": 311,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCalculates the distance from this vector to the passed vector.\n"
            },
            {
                "type": "method",
                "signature": "public {Number} distance(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Number} the distance between the two vectors"
                    }
                ]
            }
        ],
        "name": ".distance",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 317,
        "endLine": 328,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCalculates the squared distance from this vector to the passed vector.\nThis function avoids calculating the square root, thus being slightly faster than .distance( ).\n"
            },
            {
                "type": "method",
                "signature": "public {Number} distanceSq(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Number} the squared distance between the two vectors"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".distance"
                ]
            }
        ],
        "name": ".distanceSq",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 334,
        "endLine": 343,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nDivides this vector by the passed vector.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} divide(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} this vector after dividing"
                    }
                ]
            }
        ],
        "name": ".divide",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 351,
        "endLine": 360,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCalculates the dot product of this and the passed vectors\n"
            },
            {
                "type": "method",
                "signature": "public {Number} dotProduct(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Number} the resultant dot product"
                    }
                ]
            }
        ],
        "name": ".dotProduct",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 366,
        "endLine": 375,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCalculates the z component of the cross product of the two vectors augmented to 3D.\n"
            },
            {
                "type": "method",
                "signature": "public {Number} crossProduct(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Number} the resultant cross product"
                    }
                ]
            }
        ],
        "name": ".crossProduct",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 381,
        "endLine": 390,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nDetermines if this vector is numerically equivalent to the passed vector.\n"
            },
            {
                "type": "method",
                "signature": "public {Boolean} equals(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Boolean} true if the vectors are equivalent"
                    }
                ]
            }
        ],
        "name": ".equals",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 397,
        "endLine": 407,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCalculates a new vector that is perpendicular to this vector.\nThe perpendicular vector has the same magnitude as this vector and is obtained by a counter-clockwise rotation of 90° of this vector.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} perpendicular([Vector2D]);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} [result]",
                        "description": "An optional parameter to save the result in"
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} the perpendicular vector"
                    }
                ]
            }
        ],
        "name": ".perpendicular",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 414,
        "endLine": 424,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCalculates a new right-handed unit vector that is perpendicular to the line created by this and the passed vector.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} getNormal(Vector2D[, Vector2D]);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Vector2D} [result]",
                        "description": "An optional parameter to save the result in"
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} the new normal vector"
                    }
                ]
            }
        ],
        "name": ".getNormal",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 431,
        "endLine": 439,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nDetermines if this vector is equal to <0,0>\n"
            },
            {
                "type": "method",
                "signature": "public {Boolean} isZero();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Boolean} true if this vector is equal to <0,0>"
                    }
                ]
            }
        ],
        "name": ".isZero",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 445,
        "endLine": 454,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCalculates the magnitude of this vector.\nNote: Function objects in JavaScript already have a 'length' member, hence the use of magnitude instead.\n"
            },
            {
                "type": "method",
                "signature": "public {Number} magnitude();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Number} the magnitude of this vector"
                    }
                ]
            }
        ],
        "name": ".magnitude",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 460,
        "endLine": 470,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCalculates the square of the magnitude of this vector.\nThis function avoids calculating the square root, thus being slightly faster than .magnitude( ).\n"
            },
            {
                "type": "method",
                "signature": "public {Number} magnitudeSq();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Number} the square of the magnitude of this vector"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".magnitude"
                ]
            }
        ],
        "name": ".magnitudeSq",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 476,
        "endLine": 485,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nMultiplies this vector by the passed vector\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} multiply(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} this vector after multiplying"
                    }
                ]
            }
        ],
        "name": ".multiply",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 493,
        "endLine": 501,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nNegates this vector (ie. <-x,-y>)\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} negate();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Vector2D} this vector after negation"
                    }
                ]
            }
        ],
        "name": ".negate",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 509,
        "endLine": 518,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nNormalizes this vector (scales the vector so that its new magnitude is 1)\nFor vectors where magnitude is 0, <1,0> is returned.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} normalize();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Vector2D} this vector after normalization"
                    }
                ]
            }
        ],
        "name": ".normalize",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 535,
        "endLine": 546,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nScales this vector by the passed amount(s)\nIf scalarY is omitted, scalarX is used for both axes\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} scale(Number[, Number]);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number} scalarX",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} [scalarY]",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} this after scaling"
                    }
                ]
            }
        ],
        "name": ".scale",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 558,
        "endLine": 567,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nScales this vector such that its new magnitude is equal to the passed value.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} scaleToMagnitude(Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number} mag",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} this vector after scaling"
                    }
                ]
            }
        ],
        "name": ".scaleToMagnitude",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 576,
        "endLine": 587,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nSets the values of this vector using a passed vector or pair of numbers.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} setValues(Vector2D);",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Vector2D} setValues(Number, Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number|Vector2D} x",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} y",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} this vector after setting of values"
                    }
                ]
            }
        ],
        "name": ".setValues",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 601,
        "endLine": 610,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nSubtracts the passed vector from this vector.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} subtract(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{vector2D} this vector after subtracting"
                    }
                ]
            }
        ],
        "name": ".subtract",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 618,
        "endLine": 626,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nReturns a string representation of this vector.\n"
            },
            {
                "type": "method",
                "signature": "public {String} toString();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{String}"
                    }
                ]
            }
        ],
        "name": ".toString",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 632,
        "endLine": 643,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nTranslates (moves) this vector by the passed amounts.\nIf dy is omitted, dx is used for both axes.\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} translate(Number[, Number]);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number} dx",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} [dy]",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} this vector after translating"
                    }
                ]
            }
        ],
        "name": ".translate",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 655,
        "endLine": 669,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCalculates the triple product of three vectors.\ntriple vector product = b(a•c) - a(b•c)\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} tripleProduct(Vector2D, Vector2D, Vector2D, [Vector2D]);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} a",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Vector2D} b",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Vector2D} c",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Vector2D} [result]",
                        "description": "An optional parameter to save the result in"
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} the triple product as a new vector"
                    }
                ]
            }
        ],
        "name": ".tripleProduct",
        "comp": "Crafty.math.Vector2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 682,
        "endLine": 703,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "raw",
                "value": "The third row is always assumed to be [0, 0, 1].\n\nMatrix2D uses the following form, as per the whatwg.org specifications for canvas.transform():\n[a, c, e]\n[b, d, f]\n[0, 0, 1]\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} new Matrix2D();",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} new Matrix2D(Matrix2D);",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} new Matrix2D(Number, Number, Number, Number, Number, Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Matrix2D|Number=1} a",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number=0} b",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number=0} c",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number=1} d",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number=0} e",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number=0} f",
                        "description": ""
                    }
                ]
            }
        ],
        "name": "Crafty.math.Matrix2D",
        "categories": [
            "2D"
        ],
        "class": "This is a 2D Matrix2D class. It is 3x3 to allow for affine transformations in 2D space.",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 731,
        "endLine": 740,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nApplies the matrix transformations to the passed object\n"
            },
            {
                "type": "method",
                "signature": "public {Vector2D} apply(Vector2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Vector2D} vecRH",
                        "description": "vector to be transformed"
                    },
                    {
                        "type": "return",
                        "value": "{Vector2D} the passed vector object after transforming"
                    }
                ]
            }
        ],
        "name": ".apply",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 756,
        "endLine": 764,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCreates an exact, numeric copy of the current matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} clone();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Matrix2D}"
                    }
                ]
            }
        ],
        "name": ".clone",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 770,
        "endLine": 780,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nMultiplies this matrix with another, overriding the values of this matrix.\nThe passed matrix is assumed to be on the right-hand side.\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} combine(Matrix2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Matrix2D} mtrxRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this matrix after combination"
                    }
                ]
            }
        ],
        "name": ".combine",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 795,
        "endLine": 804,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nChecks for the numeric equality of this matrix versus another.\n"
            },
            {
                "type": "method",
                "signature": "public {Boolean} equals(Matrix2D);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Matrix2D} mtrxRH",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Boolean} true if the two matrices are numerically equal"
                    }
                ]
            }
        ],
        "name": ".equals",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 812,
        "endLine": 820,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nCalculates the determinant of this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Number} determinant();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Number} det(this matrix)"
                    }
                ]
            }
        ],
        "name": ".determinant",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 826,
        "endLine": 835,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nInverts this matrix if possible\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} invert();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Matrix2D} this inverted matrix or the original matrix on failure"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".isInvertible"
                ]
            }
        ],
        "name": ".invert",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 861,
        "endLine": 869,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nReturns true if this matrix is the identity matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Boolean} isIdentity();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Boolean}"
                    }
                ]
            }
        ],
        "name": ".isIdentity",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 875,
        "endLine": 884,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nDetermines is this matrix is invertible.\n"
            },
            {
                "type": "method",
                "signature": "public {Boolean} isInvertible();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{Boolean} true if this matrix is invertible"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    ".invert"
                ]
            }
        ],
        "name": ".isInvertible",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 890,
        "endLine": 899,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nApplies a counter-clockwise pre-rotation to this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} preRotate(Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{number} rads",
                        "description": "angle to rotate in radians"
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this matrix after pre-rotation"
                    }
                ]
            }
        ],
        "name": ".preRotate",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 915,
        "endLine": 925,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nApplies a pre-scaling to this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} preScale(Number[, Number]);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number} scalarX",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} [scalarY] scalarX is used if scalarY is undefined",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this after pre-scaling"
                    }
                ]
            }
        ],
        "name": ".preScale",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 939,
        "endLine": 950,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nApplies a pre-translation to this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} preTranslate(Vector2D);",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} preTranslate(Number, Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number|Vector2D} dx",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} dy",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this matrix after pre-translation"
                    }
                ]
            }
        ],
        "name": ".preTranslate",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 964,
        "endLine": 973,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nApplies a counter-clockwise post-rotation to this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} rotate(Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number} rads",
                        "description": "angle to rotate in radians"
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this matrix after rotation"
                    }
                ]
            }
        ],
        "name": ".rotate",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 992,
        "endLine": 1002,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nApplies a post-scaling to this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} scale(Number[, Number]);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number} scalarX",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} [scalarY] scalarX is used if scalarY is undefined",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this after post-scaling"
                    }
                ]
            }
        ],
        "name": ".scale",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 1018,
        "endLine": 1033,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nSets the values of this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} setValues(Matrix2D);",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} setValues(Number, Number, Number, Number, Number, Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Matrix2D|Number} a",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} b",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} c",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} d",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} e",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} f",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this matrix containing the new values"
                    }
                ]
            }
        ],
        "name": ".setValues",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 1055,
        "endLine": 1063,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nReturns the string representation of this matrix.\n"
            },
            {
                "type": "method",
                "signature": "public {String} toString();",
                "contents": [
                    {
                        "type": "return",
                        "value": "{String}"
                    }
                ]
            }
        ],
        "name": ".toString",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/math.js",
        "startLine": 1070,
        "endLine": 1081,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nApplies a post-translation to this matrix\n"
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} translate(Vector2D);",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public {Matrix2D} translate(Number, Number);",
                "contents": [
                    {
                        "type": "param",
                        "name": "{Number|Vector2D} dx",
                        "description": ""
                    },
                    {
                        "type": "param",
                        "name": "{Number} dy",
                        "description": ""
                    },
                    {
                        "type": "return",
                        "value": "{Matrix2D} this matrix after post-translation"
                    }
                ]
            }
        ],
        "name": ".translate",
        "comp": "Crafty.math.Matrix2D",
        "public": true
    },
    {
        "file": "src/model.js",
        "startLine": 4,
        "endLine": 36,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Model is a component that offers new features for isolating business\nlogic in your application. It offers default values, dirty values,\nand deep events on your data.\n\nAll data should be accessed via the appropriate methods `.get`, `.set`,\nand `.data` for the proper events to be triggered. It is not encouraged\nto access them directly.\n\nDirty values make it simple to inspect a model and see what values have changed.\n\nDeep events allow you to bind to specific fields, like `name` or even deep fields\nlike `contact.email` and get notified when those specific fields are updated.\n"
            },
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Change",
                        "description": "When any data on the model has changed.",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "Change[key]",
                        "description": "When the specific key on the model has changed.",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "Change[key.key]",
                        "description": "The nested key value has changed.",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.c('Person', {\n  name: 'Fox',\n  init: function() { this.requires('Model'); }\n});\nperson = Crafty.e('Person').attr({name: 'blaine'});\nperson.bind('Change[name]', function() {\n  console.log('name changed!');\n});\nperson.attr('name', 'blainesch'); // Triggers event\nperson.is_dirty('name'); // true\nperson.changed // name\n```"
                    }
                ]
            }
        ],
        "name": "Model",
        "categories": [
            "Model"
        ]
    },
    {
        "file": "src/model.js",
        "startLine": 76,
        "endLine": 92,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Helps determine when data or the entire component is \"dirty\" or has changed attributes.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nperson = Crafty.e('Person').attr({name: 'Fox', age: 24})\nperson.is_dirty() // false\nperson.is_dirty('name') // false\n\nperson.attr('name', 'Lucky');\nperson.is_dirty(); // true\nperson.is_dirty('name'); // true\nperson.is_dirty('age'); // false\nperson.changed; // ['name']\n```"
                    }
                ]
            }
        ],
        "name": ".is_dirty",
        "comp": "Model"
    },
    {
        "file": "src/particles.js",
        "startLine": 4,
        "endLine": 10,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "ParticleEnd",
                        "description": "when the particle animation has finished",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Based on Parcycle by Mr. Speaker, licensed under the MIT, Ported by Leo Koppelkamm\n**This is canvas only & won't do anything if the browser doesn't support it!**\nTo see how this works take a look in https://github.com/craftyjs/Crafty/blob/master/src/particles.js"
            }
        ],
        "name": "Particles",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/particles.js",
        "startLine": 19,
        "endLine": 58,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .particles(Object options)",
                "contents": [
                    {
                        "type": "param",
                        "name": "options",
                        "description": "Map of options that specify the behavior and look of the particles."
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar options = {\n\tmaxParticles: 150,\n\tsize: 18,\n\tsizeRandom: 4,\n\tspeed: 1,\n\tspeedRandom: 1.2,\n\t// Lifespan in frames\n\tlifeSpan: 29,\n\tlifeSpanRandom: 7,\n\t// Angle is calculated clockwise: 12pm is 0deg, 3pm is 90deg etc.\n\tangle: 65,\n\tangleRandom: 34,\n\tstartColour: [255, 131, 0, 1],\n\tstartColourRandom: [48, 50, 45, 0],\n\tendColour: [245, 35, 0, 0],\n\tendColourRandom: [60, 60, 60, 0],\n\t// Only applies when fastMode is off, specifies how sharp the gradients are drawn\n\tsharpness: 20,\n\tsharpnessRandom: 10,\n\t// Random spread from origin\n\tspread: 10,\n\t// How many frames should this last\n\tduration: -1,\n\t// Will draw squares instead of circle gradients\n\tfastMode: false,\n\tgravity: { x: 0, y: 0.1 },\n\t// sensible values are 0-3\n\tjitter: 0\n}\n\nCrafty.e(\"2D,Canvas,Particles\").particles(options);\n```"
                    }
                ]
            }
        ],
        "name": ".particles",
        "comp": "Particles"
    },
    {
        "file": "src/scenes.js",
        "startLine": 8,
        "endLine": 80,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "SceneChange",
                        "description": "just before a new scene is initialized",
                        "objName": "Data",
                        "objProp": "{ oldScene:String, newScene:String }"
                    },
                    {
                        "type": "trigger",
                        "event": "SceneDestroy",
                        "description": "just before the current scene is destroyed",
                        "objName": "Data",
                        "objProp": "{ newScene:String  }"
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public void Crafty.scene(String sceneName, Function init[, Function uninit])",
                "contents": [
                    {
                        "type": "param",
                        "name": "sceneName",
                        "description": "Name of the scene to add"
                    },
                    {
                        "type": "param",
                        "name": "init",
                        "description": "Function to execute when scene is played"
                    },
                    {
                        "type": "param",
                        "name": "uninit",
                        "description": "Function to execute before next scene is played, after entities with `2D` are destroyed"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This is equivalent to calling `Crafty.defineScene`.\n"
            },
            {
                "type": "method",
                "signature": "public void Crafty.scene(String sceneName[, Data])",
                "contents": [
                    {
                        "type": "param",
                        "name": "sceneName",
                        "description": "Name of scene to play"
                    },
                    {
                        "type": "param",
                        "name": "Data",
                        "description": "The init function of the scene will be called with this data as its parameter.  Can be of any type other than a function."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "This is equivalent to calling `Crafty.enterScene`.\n\nMethod to create scenes on the stage. Pass an ID and function to register a scene.\n\nTo play a scene, just pass the ID. When a scene is played, all\npreviously-created entities with the `2D` component are destroyed. The\nviewport is also reset.\n\nYou can optionally specify an arugment that will be passed to the scene's init function.\n\nIf you want some entities to persist over scenes (as in, not be destroyed)\nsimply add the component `Persist`.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.defineScene(\"loading\", function() {\n    Crafty.background(\"#000\");\n    Crafty.e(\"2D, DOM, Text\")\n          .attr({ w: 100, h: 20, x: 150, y: 120 })\n          .text(\"Loading\")\n          .css({ \"text-align\": \"center\"})\n          .textColor(\"#FFFFFF\");\n});\n\nCrafty.defineScene(\"UFO_dance\",\n             function() {Crafty.background(\"#444\"); Crafty.e(\"UFO\");},\n             function() {...send message to server...});\n\n// An example of an init function which accepts arguments, in this case an object.\nCrafty.defineScene(\"square\", function(attributes) {\n    Crafty.background(\"#000\");\n    Crafty.e(\"2D, DOM, Color\")\n          .attr(attributes)\n          .color(\"red\");\n\n});\n\n```\nThis defines (but does not play) two scenes as discussed below.\n```\nCrafty.enterScene(\"loading\");\n```\nThis command will clear the stage by destroying all `2D` entities (except\nthose with the `Persist` component). Then it will set the background to\nblack and display the text \"Loading\".\n```\nCrafty.enterScene(\"UFO_dance\");\n```\nThis command will clear the stage by destroying all `2D` entities (except\nthose with the `Persist` component). Then it will set the background to\ngray and create a UFO entity. Finally, the next time the game encounters\nanother command of the form `Crafty.scene(scene_name)` (if ever), then the\ngame will send a message to the server.\n```\nCrafty.enterScene(\"square\", {x:10, y:10, w:20, h:20});\n```\nThis will clear the stage, set the background black, and create a red square with the specified position and dimensions.\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.scene",
        "categories": [
            "Scenes",
            "Stage"
        ]
    },
    {
        "file": "src/sound.js",
        "startLine": 5,
        "endLine": 15,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nAdd sound files and play them. Chooses best format for browser support.\nDue to the nature of HTML5 audio, three types of audio files will be\nrequired for cross-browser capabilities. These formats are MP3, Ogg and WAV.\nWhen sound was not muted on before pause, sound will be unmuted after unpause.\nWhen sound is muted Crafty.pause() does not have any effect on sound\n\nThe maximum number of sounds that can be played simultaneously is defined by Crafty.audio.maxChannels.  The default value is 7."
            }
        ],
        "name": "Crafty.audio",
        "categories": [
            "Audio"
        ]
    },
    {
        "file": "src/sound.js",
        "startLine": 53,
        "endLine": 59,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.supports(String extension)",
                "contents": [
                    {
                        "type": "param",
                        "name": "extension",
                        "description": "A file extension to check audio support for"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nReturn true if the browser thinks it can play the given file type, otherwise false"
            }
        ],
        "name": "Crafty.audio.supports",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound.js",
        "startLine": 80,
        "endLine": 89,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.create(String id, String url)",
                "contents": [
                    {
                        "type": "param",
                        "name": "id",
                        "description": "A string to refer to sounds"
                    },
                    {
                        "type": "param",
                        "name": "url",
                        "description": "A string pointing to the sound file"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nCreates an audio asset with the given id and resource.  `Crafty.audio.add` is a more flexible interface that allows cross-browser compatibility.\n\nIf the sound file extension is not supported, returns false; otherwise, returns the audio asset."
            }
        ],
        "name": "Crafty.audio.create",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound.js",
        "startLine": 115,
        "endLine": 155,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.add(String id, String url)",
                "contents": [
                    {
                        "type": "param",
                        "name": "id",
                        "description": "A string to refer to sounds"
                    },
                    {
                        "type": "param",
                        "name": "url",
                        "description": "A string pointing to the sound file"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this Crafty.audio.add(String id, Array urls)",
                "contents": [
                    {
                        "type": "param",
                        "name": "urls",
                        "description": "Array of urls pointing to different format of the same sound, selecting the first that is playable"
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this Crafty.audio.add(Object map)",
                "contents": [
                    {
                        "type": "param",
                        "name": "map",
                        "description": "key-value pairs where the key is the `id` and the value is either a `url` or `urls`"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nLoads a sound to be played. Due to the nature of HTML5 audio,\nthree types of audio files will be required for cross-browser capabilities.\nThese formats are MP3, Ogg and WAV.\n\nPassing an array of URLs will determine which format the browser can play and select it over any other.\n\nAccepts an object where the key is the audio name and\neither a URL or an Array of URLs (to determine which type to use).\n\nThe ID you use will be how you refer to that sound when using `Crafty.audio.play`.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n//adding audio from an object\nCrafty.audio.add({\n  shoot: [\"sounds/shoot.wav\",\n          \"sounds/shoot.mp3\",\n          \"sounds/shoot.ogg\"]\n});\n\n//adding a single sound\nCrafty.audio.add(\"walk\", [\n\"sounds/walk.mp3\",\n\"sounds/walk.ogg\",\n\"sounds/walk.wav\"\n]);\n\n//only one format\nCrafty.audio.add(\"jump\", \"sounds/jump.mp3\");\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.add",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound.js",
        "startLine": 190,
        "endLine": 213,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.play(String id)",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public this Crafty.audio.play(String id, Number repeatCount)",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public this Crafty.audio.play(String id, Number repeatCount, Number volume)",
                "contents": [
                    {
                        "type": "param",
                        "name": "id",
                        "description": "A string to refer to sounds"
                    },
                    {
                        "type": "param",
                        "name": "repeatCount",
                        "description": "Repeat count for the file, where -1 stands for repeat forever."
                    },
                    {
                        "type": "param",
                        "name": "volume",
                        "description": "volume can be a number between 0.0 and 1.0"
                    },
                    {
                        "type": "return",
                        "value": "The audio element used to play the sound.  Null if the call failed due to a lack of open channels."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nWill play a sound previously added by using the ID that was used in `Crafty.audio.add`.\nHas a default maximum of 5 channels so that the same sound can play simultaneously unless all of the channels are playing.\n\n*Note that the implementation of HTML5 Audio is buggy at best.*\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.audio.play(\"walk\");\n\n//play and repeat forever\nCrafty.audio.play(\"backgroundMusic\", -1);\nCrafty.audio.play(\"explosion\",1,0.5); //play sound once with volume of 50%\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.play",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound.js",
        "startLine": 260,
        "endLine": 264,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.setChannels(Number n)",
                "contents": [
                    {
                        "type": "param",
                        "name": "n",
                        "description": "The maximum number of channels"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.setChannels",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound.js",
        "startLine": 305,
        "endLine": 319,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.remove([String id])",
                "contents": [
                    {
                        "type": "param",
                        "name": "id",
                        "description": "A string to refer to sounds"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nWill stop the sound and remove all references to the audio object allowing the browser to free the memory.\nIf no id is given, all sounds will be removed.\n\nThis function uses audio path set in Crafty.path in order to remove sound from the assets object.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.audio.remove(\"walk\");\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.remove",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound.js",
        "startLine": 348,
        "endLine": 360,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.stop([Number ID])",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nStops any playing sound. if id is not set, stop all sounds which are playing\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n//all sounds stopped playing now\nCrafty.audio.stop();\n\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.stop",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound.js",
        "startLine": 391,
        "endLine": 403,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.toggleMute()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nMute or unmute every Audio instance that is playing. Toggles between\npausing or playing depending on the state.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n//toggle mute and unmute depending on current state\nCrafty.audio.toggleMute();\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.toggleMute",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound.js",
        "startLine": 413,
        "endLine": 423,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.mute()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nMute every Audio instance that is playing.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.audio.mute();\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.mute",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound.js",
        "startLine": 428,
        "endLine": 438,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.unmute()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nUnmute every Audio instance that is playing.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.audio.unmute();\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.unmute",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound.js",
        "startLine": 444,
        "endLine": 456,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.pause(string ID)",
                "contents": [
                    {
                        "type": "param",
                        "name": "{string} id",
                        "description": "The id of the audio object to pause"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nPause the Audio instance specified by id param.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.audio.pause('music');\n```\n"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.pause",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound.js",
        "startLine": 470,
        "endLine": 482,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.unpause(string ID)",
                "contents": [
                    {
                        "type": "param",
                        "name": "{string} id",
                        "description": "The id of the audio object to unpause"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nResume playing the Audio instance specified by id param.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.audio.unpause('music');\n```\n"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.unpause",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound.js",
        "startLine": 495,
        "endLine": 507,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.audio.togglePause(string ID)",
                "contents": [
                    {
                        "type": "param",
                        "name": "{string} id",
                        "description": "The id of the audio object to pause/"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nToggle the pause status of the Audio instance specified by id param.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.audio.togglePause('music');\n```\n"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.togglePause",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sound.js",
        "startLine": 525,
        "endLine": 538,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean Crafty.audio.isPlaying(string ID)",
                "contents": [
                    {
                        "type": "param",
                        "name": "{string} id",
                        "description": "The id of the audio object"
                    },
                    {
                        "type": "return",
                        "value": "a Boolean indicating whether the audio is playing or not"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nCheck if audio with the given ID is playing or not (on at least one channel).\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar isPlaying = Crafty.audio.isPlaying('music');\n```\n"
                    }
                ]
            }
        ],
        "name": "Crafty.audio.isPlaying",
        "comp": "Crafty.audio"
    },
    {
        "file": "src/sprite-animation.js",
        "startLine": 5,
        "endLine": 27,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "StartAnimation",
                        "description": "When an animation starts playing, or is resumed from the paused state",
                        "objName": "Data",
                        "objProp": "{Reel}"
                    },
                    {
                        "type": "trigger",
                        "event": "AnimationEnd",
                        "description": "When the animation finishes",
                        "objName": "Data",
                        "objProp": "{ Reel }"
                    },
                    {
                        "type": "trigger",
                        "event": "FrameChange",
                        "description": "Each time the frame of the current reel changes",
                        "objName": "Data",
                        "objProp": "{ Reel }"
                    },
                    {
                        "type": "trigger",
                        "event": "ReelChange",
                        "description": "When the reel changes",
                        "objName": "Data",
                        "objProp": "{ Reel }"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nUsed to animate sprites by treating a sprite map as a set of animation frames.\nMust be applied to an entity that has a sprite-map component.\n\nTo define an animation, see the `reel` method.  To play an animation, see the `animate` method.\n\nA reel is an object that contains the animation frames and current state for an animation.  The reel object has the following properties:"
            },
            {
                "type": "param",
                "name": "id: (String)",
                "description": "the name of the reel"
            },
            {
                "type": "param",
                "name": "frames: (Array)",
                "description": "A list of frames in the format [xpos, ypos]"
            },
            {
                "type": "param",
                "name": "currentFrame: (Number)",
                "description": "The index of the current frame"
            },
            {
                "type": "param",
                "name": "easing: (Crafty.easing object)",
                "description": "The object that handles the internal progress of the animation."
            },
            {
                "type": "param",
                "name": "duration: (Number)",
                "description": "The duration in milliseconds."
            },
            {
                "type": "raw",
                "value": "\nMany animation related events pass a reel object as data.  As typical with events, this should be treated as read only data that might be later altered by the entity.  If you wish to preserve the data, make a copy of it.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.sprite"
                ]
            }
        ],
        "name": "SpriteAnimation",
        "categories": [
            "Animation"
        ]
    },
    {
        "file": "src/sprite-animation.js",
        "startLine": 56,
        "endLine": 60,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nThe playback rate of the animation.  This property defaults to 1."
            }
        ],
        "name": ".animationSpeed",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/sprite-animation.js",
        "startLine": 69,
        "endLine": 117,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Used to define reels, to change the active reel, and to fetch the id of the active reel.\n"
            },
            {
                "type": "method",
                "signature": "public this .reel(String reelId, Duration duration, Number fromX, Number fromY, Number frameCount)",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Defines a reel by starting and ending position on the sprite sheet."
                    },
                    {
                        "type": "param",
                        "name": "reelId",
                        "description": "ID of the animation reel being created"
                    },
                    {
                        "type": "param",
                        "name": "duration",
                        "description": "The length of the animation in milliseconds."
                    },
                    {
                        "type": "param",
                        "name": "fromX",
                        "description": "Starting `x` position on the sprite map (x's unit is the horizontal size of the sprite in the sprite map)."
                    },
                    {
                        "type": "param",
                        "name": "fromY",
                        "description": "`y` position on the sprite map (y's unit is the horizontal size of the sprite in the sprite map). Remains constant through the animation."
                    },
                    {
                        "type": "param",
                        "name": "frameCount",
                        "description": "The number of sequential frames in the animation.  If negative, the animation will play backwards."
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public this .reel(String reelId, Duration duration, Array frames)",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Defines a reel by an explicit list of frames"
                    },
                    {
                        "type": "param",
                        "name": "reelId",
                        "description": "ID of the animation reel being created"
                    },
                    {
                        "type": "param",
                        "name": "duration",
                        "description": "The length of the animation in milliseconds."
                    },
                    {
                        "type": "param",
                        "name": "frames",
                        "description": "An array of arrays containing the `x` and `y` values of successive frames: [[x1,y1],[x2,y2],...] (the values are in the unit of the sprite map's width/height respectively)."
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public this .reel(String reelId)",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Switches to the specified reel.  The sprite will be updated to that reel's current frame"
                    },
                    {
                        "type": "param",
                        "name": "reelID",
                        "description": "the ID to switch to"
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public Reel .reel()",
                "contents": [
                    {
                        "type": "return",
                        "value": "The id of the current reel"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\n\nA method to handle animation reels.  Only works for sprites built with the Crafty.sprite methods.\nSee the Tween component for animation of 2D properties.\n\nTo setup an animation reel, pass the name of the reel (used to identify the reel later), and either an\narray of absolute sprite positions or the start x on the sprite map, the y on the sprite map and then the end x on the sprite map.\n\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// Define a sprite-map component\nCrafty.sprite(16, \"images/sprite.png\", {\n    PlayerSprite: [0,0]\n});\n\n// Define an animation on the second row of the sprite map (fromY = 1)\n// from the left most sprite (fromX = 0) to the fourth sprite\n// on that row (frameCount = 4), with a duration of 1 second\nCrafty.e(\"2D, DOM, SpriteAnimation, PlayerSprite\").reel('PlayerRunning', 1000, 0, 1, 4);\n\n// This is the same animation definition, but using the alternative method\nCrafty.e(\"2D, DOM, SpriteAnimation, PlayerSprite\").reel('PlayerRunning', 1000, [[0, 1], [1, 1], [2, 1], [3, 1]]);\n```"
                    }
                ]
            }
        ],
        "name": ".reel",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/sprite-animation.js",
        "startLine": 181,
        "endLine": 210,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .animate([String reelId] [, Number loopCount])",
                "contents": [
                    {
                        "type": "param",
                        "name": "reelId",
                        "description": "ID of the animation reel to play.  Defaults to the current reel if none is specified."
                    },
                    {
                        "type": "param",
                        "name": "loopCount",
                        "description": "Number of times to repeat the animation. Use -1 to repeat indefinitely.  Defaults to 1."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nPlay one of the reels previously defined through `.reel(...)`. Simply pass the name of the reel. If you wish the\nanimation to play multiple times in succession, pass in the amount of times as an additional parameter.\nTo have the animation repeat indefinitely, pass in `-1`.\n\nIf another animation is currently playing, it will be paused.\n\nThis will always play an animation from the beginning.  If you wish to resume from the current state of a reel, use `resumeAnimation()`.\n\nOnce an animation ends, it will remain at its last frame.\n\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\n// Define a sprite-map component\nCrafty.sprite(16, \"images/sprite.png\", {\n    PlayerSprite: [0,0]\n});\n\n// Play the animation across 20 frames (so each sprite in the 4 sprite animation should be seen for 5 frames) and repeat indefinitely\nCrafty.e(\"2D, DOM, SpriteAnimation, PlayerSprite\")\n    .reel('PlayerRunning', 20, 0, 0, 3) // setup animation\n    .animate('PlayerRunning', -1); // start animation\n```"
                    }
                ]
            }
        ],
        "name": ".animate",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/sprite-animation.js",
        "startLine": 253,
        "endLine": 259,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .resumeAnimation()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nThis will resume animation of the current reel from its current state.\nIf a reel is already playing, or there is no current reel, there will be no effect."
            }
        ],
        "name": ".resumeAnimation",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/sprite-animation.js",
        "startLine": 271,
        "endLine": 276,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .pauseAnimation(void)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nPauses the currently playing animation, or does nothing if no animation is playing."
            }
        ],
        "name": ".pauseAnimation",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/sprite-animation.js",
        "startLine": 287,
        "endLine": 294,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .resetAnimation()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nResets the current animation to its initial state.  Resets the number of loops to the last specified value, which defaults to 1.\n\nNeither pauses nor resumes the current animation."
            }
        ],
        "name": ".resetAnimation",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/sprite-animation.js",
        "startLine": 306,
        "endLine": 316,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .loops(Number loopCount)",
                "contents": [
                    {
                        "type": "param",
                        "name": "loopCount",
                        "description": "The number of times to play the animation"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nSets the number of times the animation will loop for.\nIf called while an animation is in progress, the current state will be considered the first loop.\n"
            },
            {
                "type": "method",
                "signature": "public Number .loops()",
                "contents": [
                    {
                        "type": "return",
                        "value": "The number of loops left.  Returns 0 if no reel is active."
                    }
                ]
            }
        ],
        "name": ".loops",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/sprite-animation.js",
        "startLine": 336,
        "endLine": 353,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public this .reelPosition(Integer position)",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Sets the position of the current reel by frame number."
                    },
                    {
                        "type": "param",
                        "name": "position",
                        "description": "the frame to jump to.  This is zero-indexed.  A negative values counts back from the last frame."
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public this .reelPosition(Number position)",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Sets the position of the current reel by percent progress."
                    },
                    {
                        "type": "param",
                        "name": "position",
                        "description": "a non-integer number between 0 and 1"
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public this .reelPosition(String position)",
                "contents": []
            },
            {
                "type": "raw",
                "value": "Jumps to the specified position.  The only currently accepted value is \"end\", which will jump to the end of the reel.\n"
            },
            {
                "type": "method",
                "signature": "public Number .reelPosition()",
                "contents": [
                    {
                        "type": "return",
                        "value": "The current frame number"
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            }
        ],
        "name": ".reelPosition",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/sprite-animation.js",
        "startLine": 435,
        "endLine": 449,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Boolean .isPlaying([String reelId])",
                "contents": [
                    {
                        "type": "param",
                        "name": "reelId",
                        "description": "The reelId of the reel we wish to examine"
                    },
                    {
                        "type": "return",
                        "value": "The current animation state"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nDetermines if the specified animation is currently playing. If no reelId is specified,\nchecks if any animation is playing.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nmyEntity.isPlaying() // is any animation playing\nmyEntity.isPlaying('PlayerRunning') // is the PlayerRunning animation playing\n```"
                    }
                ]
            }
        ],
        "name": ".isPlaying",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/sprite-animation.js",
        "startLine": 458,
        "endLine": 467,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public Reel .getReel()",
                "contents": [
                    {
                        "type": "return",
                        "value": "The current reel, or null if there is no active reel"
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public Reel .getReel(reelId)",
                "contents": [
                    {
                        "type": "param",
                        "name": "reelId",
                        "description": "The id of the reel to fetch."
                    },
                    {
                        "type": "return",
                        "value": "The specified reel, or `undefined` if no such reel exists."
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            }
        ],
        "name": ".getReel",
        "comp": "SpriteAnimation"
    },
    {
        "file": "src/sprite.js",
        "startLine": 6,
        "endLine": 55,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this Crafty.sprite([Number tile, [Number tileh]], String url, Object map[, Number paddingX[, Number paddingY[, Boolean paddingAroundBorder]]])",
                "contents": [
                    {
                        "type": "param",
                        "name": "tile",
                        "description": "Tile size of the sprite map, defaults to 1"
                    },
                    {
                        "type": "param",
                        "name": "tileh",
                        "description": "Height of the tile; if provided, tile is interpreted as the width"
                    },
                    {
                        "type": "param",
                        "name": "url",
                        "description": "URL of the sprite image"
                    },
                    {
                        "type": "param",
                        "name": "map",
                        "description": "Object where the key is what becomes a new component and the value points to a position on the sprite map"
                    },
                    {
                        "type": "param",
                        "name": "paddingX",
                        "description": "Horizontal space in between tiles. Defaults to 0."
                    },
                    {
                        "type": "param",
                        "name": "paddingY",
                        "description": "Vertical space in between tiles. Defaults to paddingX."
                    },
                    {
                        "type": "param",
                        "name": "paddingAroundBorder",
                        "description": "If padding should be applied around the border of the sprite sheet. If enabled the first tile starts at (paddingX,paddingY) instead of (0,0). Defaults to false."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Generates components based on positions in a sprite image to be applied to entities.\n\nAccepts a tile size, URL and map for the name of the sprite and its position.\n\nThe position must be an array containing the position of the sprite where index `0`\nis the `x` position, `1` is the `y` position and optionally `2` is the width and `3`\nis the height. If the sprite map has padding, pass the values for the `x` padding\nor `y` padding. If they are the same, just add one value.\n\nIf the sprite image has no consistent tile size, `1` or no argument need be\npassed for tile size.\n\nEntities that add the generated components are also given the `2D` component, and\na component called `Sprite`.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.sprite(\"imgs/spritemap6.png\", {flower:[0,0,20,30]});\nvar flower_entity = Crafty.e(\"2D, DOM, flower\");\n```\nThe first line creates a component called `flower` associated with the sub-image of\nspritemap6.png with top-left corner (0,0), width 20 pixels, and height 30 pixels.\nThe second line creates an entity with that image. (Note: The `2D` is not really\nnecessary here, because adding the `flower` component automatically also adds the\n`2D` component.)\n```\nCrafty.sprite(50, \"imgs/spritemap6.png\", {flower:[0,0], grass:[0,1,3,1]});\n```\nIn this case, the `flower` component is pixels 0 <= x < 50, 0 <= y < 50, and the\n`grass` component is pixels 0 <= x < 150, 50 <= y < 100. (The `3` means grass has a\nwidth of 3 tiles, i.e. 150 pixels.)\n```\nCrafty.sprite(50, 100, \"imgs/spritemap6.png\", {flower:[0,0], grass:[0,1]}, 10);\n```\nIn this case, each tile is 50x100, and there is a spacing of 10 pixels between\nconsecutive tiles. So `flower` is pixels 0 <= x < 50, 0 <= y < 100, and `grass` is\npixels 0 <= x < 50, 110 <= y < 210.\n"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Sprite"
                ]
            }
        ],
        "name": "Crafty.sprite",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/sprite.js",
        "startLine": 143,
        "endLine": 147,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "description": "when the sprites change",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Component for using tiles in a sprite map."
            }
        ],
        "name": "Sprite",
        "categories": [
            "Graphics"
        ]
    },
    {
        "file": "src/sprite.js",
        "startLine": 212,
        "endLine": 229,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .sprite(Number x, Number y[, Number w, Number h])",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "X cell position"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Y cell position"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "Width in cells. Optional."
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "Height in cells. Optional."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nUses a new location on the sprite map as its sprite. If w or h are ommitted, the width and height are not changed.\n\nValues should be in tiles or cells (not pixels).\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Sprite\")\n  .sprite(0, 0, 2, 2);\n```"
                    }
                ]
            }
        ],
        "name": ".sprite",
        "comp": "Sprite"
    },
    {
        "file": "src/sprite.js",
        "startLine": 232,
        "endLine": 236,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nThe coordinate of the slide within the sprite in the format of [x, y, w, h]."
            }
        ],
        "name": ".__coord",
        "comp": "Sprite"
    },
    {
        "file": "src/sprite.js",
        "startLine": 252,
        "endLine": 269,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .crop(Number x, Number y, Number w, Number h)",
                "contents": [
                    {
                        "type": "param",
                        "name": "x",
                        "description": "Offset x position"
                    },
                    {
                        "type": "param",
                        "name": "y",
                        "description": "Offset y position"
                    },
                    {
                        "type": "param",
                        "name": "w",
                        "description": "New width"
                    },
                    {
                        "type": "param",
                        "name": "h",
                        "description": "New height"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nIf the entity needs to be smaller than the tile size, use this method to crop it.\n\nThe values should be in pixels rather than tiles.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Sprite\")\n  .crop(40, 40, 22, 23);\n```"
                    }
                ]
            }
        ],
        "name": ".crop",
        "comp": "Sprite"
    },
    {
        "file": "src/storage.js",
        "startLine": 4,
        "endLine": 7,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "Very simple way to get and set values, which will persist when the browser is closed also. Storage wraps around HTML5 Web Storage, which is well-supported across browsers and platforms, but limited to 5MB total storage per domain."
            }
        ],
        "name": "Storage",
        "categories": [
            "Utilities"
        ]
    },
    {
        "file": "src/storage.js",
        "startLine": 9,
        "endLine": 47,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": ".storage(String key)",
                "contents": [
                    {
                        "type": "param",
                        "name": "key",
                        "description": "a key you would like to get from the storage. It will return null if the key does not exists."
                    }
                ]
            },
            {
                "type": "method",
                "signature": ".storage(String key, String value)",
                "contents": [
                    {
                        "type": "param",
                        "name": "key",
                        "description": "the key you would like to save the data under."
                    },
                    {
                        "type": "param",
                        "name": "value",
                        "description": "the value you would like to save."
                    }
                ]
            },
            {
                "type": "method",
                "signature": ".storage(String key, [Object value, Array value, Boolean value])",
                "contents": [
                    {
                        "type": "param",
                        "name": "key",
                        "description": "the key you would like to save the data under."
                    },
                    {
                        "type": "param",
                        "name": "value",
                        "description": "the value you would like to save, can be an Object or an Array."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nStorage function is very simple and can be used to either get or set values.\nYou can store both booleans, strings, objects and arrays.\n\nPlease note: You should not store data, while the game is playing, as it can cause the game to slow down. You should load data when you start the game, or when the user for an example click a \"Save gameprocess\" button.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Get an already stored value\n```\nvar playername = Crafty.storage('playername');\n```\n"
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Save a value\n```\nCrafty.storage('playername', 'Hero');\n```\n"
                    }
                ]
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Test to see if a value is already there.\n```\nvar heroname = Crafty.storage('name');\nif(!heroname){\n  // Maybe ask the player what their name is here\n  heroname = 'Guest';\n}\n// Do something with heroname\n```"
                    }
                ]
            }
        ],
        "name": ".storage",
        "comp": "Storage"
    },
    {
        "file": "src/storage.js",
        "startLine": 75,
        "endLine": 90,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": ".storage.remove(String key)",
                "contents": [
                    {
                        "type": "param",
                        "name": "key",
                        "description": "a key where you will like to delete the value of."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nGenerally you do not need to remove values from localStorage, but if you do\nstore large amount of text, or want to unset something you can do that with\nthis function.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Get an already stored value\n```\nCrafty.storage.remove('playername');\n```\n"
                    }
                ]
            }
        ],
        "name": ".storage.remove",
        "comp": "Storage"
    },
    {
        "file": "src/text.js",
        "startLine": 4,
        "endLine": 25,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "description": "when the text is changed",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "Component to make a text entity.\n\nBy default, text will have the style \"10px sans-serif\".\n\nNote 1: An entity with the text component is just text! If you want to write text\ninside an image, you need one entity for the text and another entity for the image.\nMore tips for writing text inside an image: (1) Use the z-index (from 2D component)\nto ensure that the text is on top of the image, not the other way around; (2)\nuse .attach() (from 2D component) to glue the text to the image so they move and\nrotate together.\n\nNote 2: For DOM (but not canvas) text entities, various font settings (like\ntext-decoration and text-align) can be set using `.css()` (see DOM component). But\nyou cannot use `.css()` to set the properties which are controlled by `.textFont()`\nor `.textColor()` -- the settings will be ignored.\n\nNote 3: If you use canvas text with glyphs that are taller than standard letters, portions of the glyphs might be cut off."
            }
        ],
        "name": "Text",
        "categories": [
            "Graphics"
        ],
        "requires": "Canvas or DOM"
    },
    {
        "file": "src/text.js",
        "startLine": 98,
        "endLine": 120,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .text(String text)",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public this .text(Function textgenerator)",
                "contents": [
                    {
                        "type": "param",
                        "name": "text",
                        "description": "String of text that will be inserted into the DOM or Canvas element."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nThis method will update the text inside the entity.\n\nIf you need to reference attributes on the entity itself you can pass a function instead of a string.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Text\").attr({ x: 100, y: 100 }).text(\"Look at me!!\");\n\nCrafty.e(\"2D, DOM, Text\").attr({ x: 100, y: 100 })\n    .text(function () { return \"My position is \" + this._x });\n\nCrafty.e(\"2D, Canvas, Text\").attr({ x: 100, y: 100 }).text(\"Look at me!!\");\n\nCrafty.e(\"2D, Canvas, Text\").attr({ x: 100, y: 100 })\n    .text(function () { return \"My position is \" + this._x });\n```"
                    }
                ]
            }
        ],
        "name": ".text",
        "comp": "Text"
    },
    {
        "file": "src/text.js",
        "startLine": 152,
        "endLine": 173,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this .textColor(String color)",
                "contents": [
                    {
                        "type": "param",
                        "name": "color",
                        "description": "The color in name, hex, rgb or rgba"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nChange the color of the text. You can use HEX, rgb and rgba colors.\n\nIf you want the text to be transparent, you should use rgba where you can define alphaChannel.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Text\").attr({ x: 100, y: 100 }).text(\"Look at me!!\")\n  .textColor('#FF0000');\n\nCrafty.e(\"2D, Canvas, Text\").attr({ x: 100, y: 100 }).text('Look at me!!')\n  .textColor('rgba(0, 255, 0, 0.5)');\n\nCrafty.e(\"2D, Canvas, Text\").attr({ x: 100, y: 100 }).text('Look at me!!')\n  .textColor('white');\n```"
                    }
                ]
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.assignColor"
                ]
            }
        ],
        "name": ".textColor",
        "comp": "Text"
    },
    {
        "file": "src/text.js",
        "startLine": 182,
        "endLine": 204,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .textFont(String key, * value)",
                "contents": [
                    {
                        "type": "param",
                        "name": "key",
                        "description": "Property of the entity to modify"
                    },
                    {
                        "type": "param",
                        "name": "value",
                        "description": "Value to set the property to"
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public this .textFont(Object map)",
                "contents": [
                    {
                        "type": "param",
                        "name": "map",
                        "description": "Object where the key is the property to modify and the value as the property value"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nUse this method to set font property of the text entity.  Possible values are: type, weight, size, family, lineHeight, and variant.\n\nWhen rendered by the canvas, lineHeight and variant will be ignored.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Text\").textFont({ type: 'italic', family: 'Arial' });\nCrafty.e(\"2D, Canvas, Text\").textFont({ size: '20px', weight: 'bold' });\n\nCrafty.e(\"2D, Canvas, Text\").textFont(\"type\", \"italic\");\nCrafty.e(\"2D, Canvas, Text\").textFont(\"type\"); // italic\n```"
                    }
                ]
            }
        ],
        "name": ".textFont",
        "comp": "Text"
    },
    {
        "file": "src/text.js",
        "startLine": 232,
        "endLine": 247,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "Invalidate",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "method",
                "signature": "public this .unselectable()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nThis method sets the text so that it cannot be selected (highlighted) by dragging.\n(Canvas text can never be highlighted, so this only matters for DOM text.)\nWorks by changing the css property \"user-select\" and its variants.\n\nLikewise, this sets the mouseover cursor to be \"default\" (arrow), not \"text\" (I-beam)\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.e(\"2D, DOM, Text\").text('This text cannot be highlighted!').unselectable();\n```"
                    }
                ]
            }
        ],
        "name": ".unselectable",
        "comp": "Text"
    },
    {
        "file": "src/time.js",
        "startLine": 4,
        "endLine": 6,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [],
        "name": "Delay",
        "categories": [
            "Utilities"
        ]
    },
    {
        "file": "src/time.js",
        "startLine": 37,
        "endLine": 77,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this.delay(Function callback, Number delay[, Number repeat[, Function callbackOff]])",
                "contents": [
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method to execute after given amount of milliseconds. If reference of a"
                    },
                    {
                        "type": "raw",
                        "value": "method is passed, there's possibility to cancel the delay."
                    },
                    {
                        "type": "param",
                        "name": "delay",
                        "description": "Amount of milliseconds to execute the method."
                    },
                    {
                        "type": "param",
                        "name": "repeat",
                        "description": "(optional) How often to repeat the delayed function. A value of 0 triggers the delayed"
                    },
                    {
                        "type": "raw",
                        "value": "function exactly once. A value n > 0 triggers the delayed function exactly n+1 times. A\nvalue of -1 triggers the delayed function indefinitely. Defaults to one execution."
                    },
                    {
                        "type": "param",
                        "name": "callbackOff",
                        "description": "(optional) Method to execute after delay ends(after all iterations are executed)."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "If repeat value equals -1, callbackOff will never be triggered.\n\nThe delay method will execute a function after a given amount of time in milliseconds.\n\nIt is not a wrapper for `setTimeout`.\n\nIf Crafty is paused, the delay is interrupted with the pause and then resume when unpaused\n\nIf the entity is destroyed, the delay is also destroyed and will not have effect.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "\nThe simplest delay\n```\nconsole.log(\"start\");\nCrafty.e(\"Delay\").delay(function() {\n  console.log(\"100ms later\");\n}, 100, 0);\n```\n\nDelay with callbackOff to be executed after all delay iterations\n```\nconsole.log(\"start\");\nCrafty.e(\"Delay\").delay(function() {\n  console.log(\"100ms later\");\n}, 100, 3, function() {\n  console.log(\"delay finished\");\n});\n```\n"
                    }
                ]
            }
        ],
        "name": ".delay",
        "comp": "Delay"
    },
    {
        "file": "src/time.js",
        "startLine": 89,
        "endLine": 108,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public this.cancelDelay(Function callback)",
                "contents": [
                    {
                        "type": "param",
                        "name": "callback",
                        "description": "Method reference passed to .delay"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nThe cancelDelay method will cancel a delay set previously.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar doSomething = function(){\n  console.log(\"doing something\");\n};\n\n// execute doSomething each 100 miliseconds indefinetely\nvar ent = Crafty.e(\"Delay\").delay(doSomething, 100, -1);\n\n// and some time later, cancel further execution of doSomething\nent.cancelDelay(doSomething);\n```"
                    }
                ]
            }
        ],
        "name": ".cancelDelay",
        "comp": "Delay"
    },
    {
        "file": "src/viewport.js",
        "startLine": 5,
        "endLine": 22,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "ViewportScroll",
                        "description": "when the viewport's x or y coordinates change",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "ViewportScale",
                        "description": "when the viewport's scale changes",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "ViewportResize",
                        "description": "when the viewport's dimension's change",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "InvalidateViewport",
                        "description": "when the viewport changes",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "StopCamera",
                        "description": "when any camera animations should stop, such as at the start of a new animation.",
                        "objName": "Data",
                        "objProp": null
                    },
                    {
                        "type": "trigger",
                        "event": "CameraAnimationDone",
                        "description": "when a camera animation comes reaches completion",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nViewport is essentially a 2D camera looking at the stage. Can be moved or zoomed, which\nin turn will react just like a camera moving in that direction.\n\nTip: At any given moment, the stuff that you can see is...\n\n`x` between `(-Crafty.viewport._x)` and `(-Crafty.viewport._x + (Crafty.viewport._width / Crafty.viewport._scale))`\n\n`y` between `(-Crafty.viewport._y)` and `(-Crafty.viewport._y + (Crafty.viewport._height / Crafty.viewport._scale))`"
            }
        ],
        "name": "Crafty.viewport",
        "categories": [
            "Stage"
        ]
    },
    {
        "file": "src/viewport.js",
        "startLine": 25,
        "endLine": 32,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nDecides if the viewport functions should clamp to game entities.\nWhen set to `true` functions such as Crafty.viewport.mouselook() will not allow you to move the\nviewport over areas of the game that has no entities.\nFor development it can be useful to set this to false."
            }
        ],
        "name": "Crafty.viewport.clampToEntities",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/viewport.js",
        "startLine": 37,
        "endLine": 46,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nWill move the stage and therefore every visible entity along the `x`\naxis in the opposite direction.\n\nWhen this value is set, it will shift the entire stage. This means that entity\npositions are not exactly where they are on screen. To get the exact position,\nsimply add `Crafty.viewport.x` onto the entities `x` position."
            }
        ],
        "name": "Crafty.viewport.x",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/viewport.js",
        "startLine": 49,
        "endLine": 58,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nWill move the stage and therefore every visible entity along the `y`\naxis in the opposite direction.\n\nWhen this value is set, it will shift the entire stage. This means that entity\npositions are not exactly where they are on screen. To get the exact position,\nsimply add `Crafty.viewport.y` onto the entities `y` position."
            }
        ],
        "name": "Crafty.viewport.y",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/viewport.js",
        "startLine": 62,
        "endLine": 71,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nThis value is the current scale (zoom) of the viewport. When the value is bigger than 1, everything\nlooks bigger (zoomed in). When the value is less than 1, everything looks smaller (zoomed out). This\ndoes not alter the size of the stage itself, just the magnification of what it shows.\n\nThis is a read-only property: Do not set it directly. Instead, use `Crafty.viewport.scale(...)`\nor `Crafty.viewport.zoom(...)`"
            }
        ],
        "name": "Crafty.viewport._scale",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/viewport.js",
        "startLine": 76,
        "endLine": 96,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "\nA rectangle which defines the bounds of the viewport.\nIt should be an object with two properties, `max` and `min`,\nwhich are each an object with `x` and `y` properties.\n\nIf this property is null, Crafty uses the bounding box of all the items\non the stage.  This is the initial value.  (To prevent this behavior, set `Crafty.viewport.clampToEntities` to `false`)\n\nIf you wish to bound the viewport along one axis but not the other, you can use `-Infinity` and `+Infinity` as bounds.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.viewport.clampToEntities"
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Set the bounds to a 500 by 500 square:\n\n```\nCrafty.viewport.bounds = {min:{x:0, y:0}, max:{x:500, y:500}};\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.viewport.bounds",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/viewport.js",
        "startLine": 100,
        "endLine": 115,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "Crafty.viewport.scroll(String axis, Number val)",
                "contents": [
                    {
                        "type": "param",
                        "name": "axis",
                        "description": "'x' or 'y'"
                    },
                    {
                        "type": "param",
                        "name": "val",
                        "description": "The new absolute position on the axis"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nWill move the viewport to the position given on the specified axis\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "Will move the camera 500 pixels right of its initial position, in effect\nshifting everything in the viewport 500 pixels to the left.\n\n```\nCrafty.viewport.scroll('_x', 500);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.viewport.scroll",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/viewport.js",
        "startLine": 133,
        "endLine": 142,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public void Crafty.viewport.pan(Number dx, Number dy, Number time)",
                "contents": [
                    {
                        "type": "param",
                        "name": "Number dx",
                        "description": "The distance along the x axis"
                    },
                    {
                        "type": "param",
                        "name": "Number dy",
                        "description": "The distance along the y axis"
                    },
                    {
                        "type": "param",
                        "name": "Number time",
                        "description": "The duration in ms for the entire camera movement"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nPans the camera a given number of pixels over the specified time"
            }
        ],
        "name": "Crafty.viewport.pan",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/viewport.js",
        "startLine": 189,
        "endLine": 204,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.viewport.follow(Object target, Number offsetx, Number offsety)",
                "contents": [
                    {
                        "type": "param",
                        "name": "Object target",
                        "description": "An entity with the 2D component"
                    },
                    {
                        "type": "param",
                        "name": "Number offsetx",
                        "description": "Follow target should be offsetx pixels away from center"
                    },
                    {
                        "type": "param",
                        "name": "Number offsety",
                        "description": "Positive puts target to the right of center"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nFollows a given entity with the 2D component. If following target will take a portion of\nthe viewport out of bounds of the world, following will stop until the target moves away.\n"
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nvar ent = Crafty.e('2D, DOM').attr({w: 100, h: 100:});\nCrafty.viewport.follow(ent, 0, 0);\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.viewport.follow",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/viewport.js",
        "startLine": 236,
        "endLine": 243,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.viewport.centerOn(Object target, Number time)",
                "contents": [
                    {
                        "type": "param",
                        "name": "Object target",
                        "description": "An entity with the 2D component"
                    },
                    {
                        "type": "param",
                        "name": "Number time",
                        "description": "The duration in ms of the camera motion"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nCenters the viewport on the given entity."
            }
        ],
        "name": "Crafty.viewport.centerOn",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/viewport.js",
        "startLine": 258,
        "endLine": 269,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.viewport.zoom(Number amt, Number cent_x, Number cent_y, Number time)",
                "contents": [
                    {
                        "type": "param",
                        "name": "Number amt",
                        "description": "amount to zoom in on the target by (eg. 2, 4, 0.5)"
                    },
                    {
                        "type": "param",
                        "name": "Number cent_x",
                        "description": "the center to zoom on"
                    },
                    {
                        "type": "param",
                        "name": "Number cent_y",
                        "description": "the center to zoom on"
                    },
                    {
                        "type": "param",
                        "name": "Number time",
                        "description": "the duration in ms of the entire zoom operation"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nZooms the camera in on a given point. amt > 1 will bring the camera closer to the subject\namt < 1 will bring it farther away. amt = 0 will reset to the default zoom level\nZooming is multiplicative. To reset the zoom amount, pass 0."
            }
        ],
        "name": "Crafty.viewport.zoom",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/viewport.js",
        "startLine": 347,
        "endLine": 367,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.viewport.scale(Number amt)",
                "contents": [
                    {
                        "type": "param",
                        "name": "Number amt",
                        "description": "amount to zoom/scale in on the elements"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nAdjusts the scale (zoom). When `amt` is 1, it is set to the normal scale,\ne.g. an entity with `this.w == 20` would appear exactly 20 pixels wide.\nWhen `amt` is 10, that same entity would appear 200 pixels wide (i.e., zoomed in\nby a factor of 10), and when `amt` is 0.1, that same entity would be 2 pixels wide\n(i.e., zoomed out by a factor of `(1 / 0.1)`).\n\nIf you pass an `amt` of 0, it is treated the same as passing 1, i.e. the scale is reset.\n\nThis method sets the absolute scale, while `Crafty.viewport.zoom` sets the scale relative to the existing value."
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.viewport.zoom"
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "example",
                "contents": [
                    {
                        "type": "raw",
                        "value": "```\nCrafty.viewport.scale(2); // Zoom in -- all entities will appear twice as large.\n```"
                    }
                ]
            }
        ],
        "name": "Crafty.viewport.scale",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/viewport.js",
        "startLine": 377,
        "endLine": 387,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.viewport.mouselook(Boolean active)",
                "contents": [
                    {
                        "type": "param",
                        "name": "Boolean active",
                        "description": "Activate or deactivate mouselook"
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nToggle mouselook on the current viewport.\nSimply call this function and the user will be able to\ndrag the viewport around.\n\nIf the user starts a drag, \"StopCamera\" will be triggered, which will cancel any existing camera animations."
            }
        ],
        "name": "Crafty.viewport.mouselook",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/viewport.js",
        "startLine": 467,
        "endLine": 480,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "method",
                "signature": "public void Crafty.viewport.init([Number width, Number height, String stage_elem])",
                "contents": []
            },
            {
                "type": "method",
                "signature": "public void Crafty.viewport.init([Number width, Number height, HTMLElement stage_elem])",
                "contents": [
                    {
                        "type": "param",
                        "name": "Number width",
                        "description": "Width of the viewport"
                    },
                    {
                        "type": "param",
                        "name": "Number height",
                        "description": "Height of the viewport"
                    },
                    {
                        "type": "param",
                        "name": "String or HTMLElement stage_elem",
                        "description": "the element to use as the stage (either its id or the actual element)."
                    }
                ]
            },
            {
                "type": "raw",
                "value": "\nInitialize the viewport. If the arguments 'width' or 'height' are missing, use Crafty.DOM.window.width and Crafty.DOM.window.height (full screen model).\n\nThe argument 'stage_elem' is used to specify a stage element other than the default, and can be either a string or an HTMLElement.  If a string is provided, it will look for an element with that id and, if none exists, create a div.  If an HTMLElement is provided, that is used directly.  Omitting this argument is the same as passing an id of 'cr-stage'.\n"
            },
            {
                "type": "xref",
                "xrefs": [
                    "Crafty.device",
                    "Crafty.DOM",
                    "Crafty.stage"
                ]
            }
        ],
        "name": "Crafty.viewport.init",
        "comp": "Crafty.viewport"
    },
    {
        "file": "src/viewport.js",
        "startLine": 504,
        "endLine": 507,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "The stage where all the DOM entities will be placed."
            }
        ],
        "name": "Crafty.stage",
        "categories": [
            "Core"
        ]
    },
    {
        "file": "src/viewport.js",
        "startLine": 510,
        "endLine": 513,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "The `#cr-stage` div element."
            }
        ],
        "name": "Crafty.stage.elem",
        "comp": "Crafty.stage"
    },
    {
        "file": "src/viewport.js",
        "startLine": 516,
        "endLine": 527,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": "`Crafty.stage.inner` is a div inside the `#cr-stage` div that holds all DOM entities.\nIf you use canvas, a `canvas` element is created at the same level in the dom\nas the the `Crafty.stage.inner` div. So the hierarchy in the DOM is\n\n```\nCrafty.stage.elem\n - Crafty.stage.inner (a div HTMLElement)\n - Crafty.canvas._canvas (a canvas HTMLElement)\n```"
            }
        ],
        "name": "Crafty.stage.inner",
        "comp": "Crafty.stage"
    },
    {
        "file": "src/viewport.js",
        "startLine": 678,
        "endLine": 687,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public Crafty.viewport.reload()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nRecalculate and reload stage width, height and position.\nUseful when browser return wrong results on init (like safari on Ipad2).\nYou should also call this method if you insert custom DOM elements that affect Crafty's stage offset.\n"
            }
        ],
        "name": "Crafty.viewport.reload",
        "comp": "Crafty.stage"
    },
    {
        "file": "src/viewport.js",
        "startLine": 707,
        "endLine": 715,
        "commit": "b74c13c0cc74f8773bb2bf563009728113ac751c",
        "contents": [
            {
                "type": "triggers",
                "events": [
                    {
                        "type": "trigger",
                        "event": "StopCamera",
                        "description": "called to cancel camera animations",
                        "objName": "Data",
                        "objProp": null
                    }
                ]
            },
            {
                "type": "raw",
                "value": ""
            },
            {
                "type": "method",
                "signature": "public Crafty.viewport.reset()",
                "contents": []
            },
            {
                "type": "raw",
                "value": "\nResets the viewport to starting values, and cancels any existing camera animations.\nCalled when scene() is run."
            }
        ],
        "name": "Crafty.viewport.reset",
        "comp": "Crafty.stage"
    }
]